<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Settings - Fit-With-AI</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #6C63FF;
            --secondary: #4D44DB;
            --accent: #FF6584;
            --light: #F8F9FA;
            --dark: #343A40;
            --success: #28A745;
            --warning: #FFC107;
            --danger: #DC3545;
            --gray: #6C757D;
            --light-gray: #E9ECEF;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            background: radial-gradient(ellipse at top, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
            color: white;
            margin: 0;
            padding: 0;
            min-height: 100vh;
            position: relative;
            overflow-x: hidden;
        }
        
        body::before {
            content: '';
            position: fixed;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: 
                radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 255, 255, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 40% 40%, rgba(120, 119, 198, 0.2) 0%, transparent 50%);
            animation: float 20s ease-in-out infinite;
            pointer-events: none;
            z-index: -1;
        }
        
        @keyframes float {
            0%, 100% { transform: translate(0, 0) rotate(0deg); }
            33% { transform: translate(30px, -30px) rotate(120deg); }
            66% { transform: translate(-20px, 20px) rotate(240deg); }
        }
        
        .dashboard-container {
            display: grid;
            grid-template-columns: 280px 1fr;
            min-height: 100vh;
            gap: 20px;
            padding: 20px;
        }
        
        .sidebar {
            background: transparent;
            border: none;
            padding: 30px 20px;
            position: sticky;
            top: 20px;
            height: fit-content;
        }
        
        .sidebar-header {
            display: flex;
            align-items: center;
            margin-bottom: 2rem;
            padding: 0 1rem;
        }
        
        .sidebar-header img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }
        
        .user-name {
            font-weight: 600;
            margin: 0;
        }
        
        .user-plan {
            font-size: 0.8rem;
            color: var(--primary);
            background: rgba(108, 99, 255, 0.1);
            padding: 2px 8px;
            border-radius: 20px;
            margin-top: 5px;
        }
        
        .nav-menu {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .nav-item {
            margin-bottom: 5px;
        }
        
        .nav-link {
            display: flex;
            align-items: center;
            padding: 12px 1rem;
            color: rgba(255, 255, 255, 0.7);
            text-decoration: none;
            border-radius: 8px;
            transition: all 0.3s ease;
        }
        
        .nav-link:hover, .nav-link.active {
            background: rgba(108, 99, 255, 0.2);
            color: white;
            transform: translateX(5px);
        }
        
        .nav-link i {
            margin-right: 10px;
            font-size: 1.2rem;
        }        
        
        .logout-section {
            margin-top: 2rem;
            padding-top: 1rem;
            border-top: 1px solid var(--light-gray);
        }
        
        .logout-link {
            display: flex;
            align-items: center;
            padding: 12px 1rem;
            color: var(--danger);
            text-decoration: none;
            border-radius: 8px;
            transition: all 0.3s ease;
            font-weight: 500;
        }
        
        .logout-link:hover {
            background: rgba(220, 53, 69, 0.1);
            color: var(--danger);
        }
        
        .logout-link i {
            margin-right: 10px;
            font-size: 1.2rem;
        }
        
        .main-content {
            flex: 1;
            padding: 2rem;
        }
        
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }
        
        .page-title {
            font-size: 2rem;
            font-weight: 600;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .settings-tabs {
            display: flex;
            border-bottom: 1px solid var(--light-gray);
            margin-bottom: 2rem;
        }
        
        .tab {
            padding: 12px 20px;
            cursor: pointer;
            font-weight: 500;
            color: rgba(255, 255, 255, 0.7);
            border-bottom: 3px solid transparent;
            transition: all 0.3s ease;
        }
        
        .tab.active {
            color: white;
            border-bottom: 3px solid var(--primary);
        }
        
        .settings-card {
            background: linear-gradient(135deg, rgba(108, 99, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 50%, rgba(108, 99, 255, 0.08) 100%);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            padding: 2rem;
            margin-bottom: 2rem;
        }
        
        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }
        
        .card-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin: 0;
            color: white;
        }
        
        .form-group {
            margin-bottom: 1.5rem;
        }
        
        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: white;
        }
        
        .form-control {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 8px;
            font-family: 'Poppins', sans-serif;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.1);
            color: white;
        }
        
        .form-control:focus {
            border-color: var(--primary);
            outline: none;
            box-shadow: 0 0 0 3px rgba(108, 99, 255, 0.2);
            background: rgba(255, 255, 255, 0.15);
        }
        
        .form-control::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }
        
        .btn {
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            border: none;
            font-family: 'Poppins', sans-serif;
        }
        
        .btn-primary {
            background: var(--primary);
            color: white;
        }
        
        .btn-primary:hover {
            background: var(--secondary);
        }
        
        .btn-outline {
            background: transparent;
            border: 1px solid var(--primary);
            color: var(--primary);
        }
        
        .btn-outline:hover {
            background: rgba(108, 99, 255, 0.1);
        }
        
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 50px;
            height: 24px;
        }
        
        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }
        
        .slider:before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        
        input:checked + .slider {
            background-color: var(--primary);
        }
        
        input:checked + .slider:before {
            transform: translateX(26px);
        }
        
        .badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.75rem;
            font-weight: 600;
        }
        
        .badge-success {
            background: rgba(40, 167, 69, 0.1);
            color: var(--success);
        }
        
        .badge-warning {
            background: rgba(255, 193, 7, 0.1);
            color: var(--warning);
        }
        
        .badge-danger {
            background: rgba(220, 53, 69, 0.1);
            color: var(--danger);
        }
        
        .connected-account {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 12px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 8px;
            margin-bottom: 12px;
            background: rgba(255, 255, 255, 0.05);
        }
        
        .account-info {
            display: flex;
            align-items: center;
        }
        
        .account-icon {
            width: 40px;
            height: 40px;
            border-radius: 8px;
            background: var(--light);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 12px;
            color: white;
        }
        
        .apple { background: #000; }
        .google { background: #4285F4; }
        .facebook { background: #3B5998; }
        .fitbit { background: #00B0B9; }
        
        .subscription-content {
            display: none;
        }
        
        .subscription-content.active {
            display: block;
        }
        
        .current-plan {
            background: linear-gradient(135deg, rgba(108, 99, 255, 0.2) 0%, rgba(255, 255, 255, 0.1) 50%, rgba(108, 99, 255, 0.15) 100%);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            border-radius: 12px;
            padding: 2rem;
            margin-bottom: 2rem;
            text-align: center;
        }
        
        .plan-name {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }
        
        .plan-price {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 1rem;
        }
        
        .plan-features {
            list-style: none;
            padding: 0;
            margin: 1rem 0;
        }
        
        .plan-features li {
            margin-bottom: 0.5rem;
            opacity: 0.9;
        }
        
        .plan-features li:before {
            content: "✓";
            margin-right: 0.5rem;
            font-weight: bold;
        }
        
        .pricing-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 2rem;
            margin-bottom: 2rem;
        }
        
        .pricing-card {
            background: linear-gradient(135deg, rgba(108, 99, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 50%, rgba(108, 99, 255, 0.08) 100%);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 12px;
            padding: 2rem;
            text-align: center;
            transition: all 0.3s ease;
            position: relative;
        }
        
        .pricing-card:hover {
            border-color: var(--primary);
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(108, 99, 255, 0.2);
        }
        
        .pricing-card.popular {
            border-color: var(--primary);
            transform: scale(1.05);
        }
        
        .popular-badge {
            position: absolute;
            top: -10px;
            left: 50%;
            transform: translateX(-50%);
            background: var(--primary);
            color: white;
            padding: 5px 20px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }
        
        .pricing-plan-name {
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 1rem;
            color: white;
        }
        
        .pricing-plan-price {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--primary);
            margin-bottom: 0.5rem;
        }
        
        .pricing-plan-period {
            color: var(--gray);
            margin-bottom: 2rem;
        }
        
        .pricing-features {
            list-style: none;
            padding: 0;
            margin: 2rem 0;
            text-align: left;
        }
        
        .pricing-features li {
            margin-bottom: 0.8rem;
            display: flex;
            align-items: center;
        }
        
        .pricing-features li:before {
            content: "✓";
            color: var(--success);
            font-weight: bold;
            margin-right: 0.8rem;
            font-size: 1.1rem;
        }
        
        .pricing-features li.unavailable {
            color: var(--gray);
            opacity: 0.6;
        }
        
        .pricing-features li.unavailable:before {
            content: "✗";
            color: var(--gray);
        }
        
        .btn-upgrade {
            width: 100%;
            padding: 12px;
            font-weight: 600;
            font-size: 1rem;
        }
        
        .payment-methods {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-top: 2rem;
            flex-wrap: wrap;
        }
        
        .payment-method {
            padding: 8px 16px;
            border: 1px solid var(--light-gray);
            border-radius: 8px;
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 0.9rem;
            color: var(--gray);
        }
        
        @media (max-width: 768px) {
            .settings-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                padding: 1rem;
            }
            
            .main-content {
                padding: 1rem;
            }
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
    <div class="dashboard-container">
        <!-- Sidebar Navigation -->
        <%- include('partials/sidebar', { currentPage: 'settings' }) %>
        
        <!-- Main Content -->
        <div class="main-content">
            <div class="page-header">
                <h1 class="page-title">Settings</h1>
                <div>
                    <button class="btn btn-outline" onclick="exportUserData()"><i class="fas fa-download"></i> Export Data</button>
                </div>
            </div>
            
            <div class="settings-tabs">
                <div class="tab active">Account</div>
                <div class="tab">Preferences</div>
                <div class="tab">Notifications</div>
                <div class="tab">Security</div>
                <div class="tab" id="billingTab">Subscription</div>
                <div class="tab">Advanced</div>
            </div>
            
            <!-- Account Settings Card -->
            <div class="settings-card account-content">
                <div class="card-header">
                    <h2 class="card-title">Profile Information</h2>
                    <span class="badge badge-success">Active</span>
                </div>
                
                <form>
                    <div class="form-group">
                        <label class="form-label">Full Name</label>
                        <input type="text" name="fullName" class="form-control" value="<%= user.fullName %>">
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Email Address</label>
                        <input type="email" name="email" class="form-control" value="<%= user.email %>">
                        <small class="text-muted">This is the email you use to log in</small>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Profile Photo</label>
                        <div style="display: flex; align-items: center; gap: 20px;">
                            <img id="profileImage" src="<%= user.profilePhoto ? user.profilePhoto + '?t=' + Date.now() : 'https://ui-avatars.com/api/?name=' + encodeURIComponent(user.fullName) + '&background=6C63FF&color=fff' %>" alt="User Avatar" style="width: 80px; height: 80px; border-radius: 50%; object-fit: cover;" onerror="this.src='https://ui-avatars.com/api/?name=' + encodeURIComponent('<%= user.fullName %>') + '&background=6C63FF&color=fff'">
                            <div>
                                <button type="button" class="btn btn-outline" onclick="showPhotoOptions()" style="margin-right: 10px;">
                                    <i class="fas fa-camera"></i> Change Photo
                                </button>
                                <button type="button" class="btn btn-outline" onclick="removeProfilePhoto()">
                                    <i class="fas fa-trash"></i> Remove
                                </button>
                            </div>
                        </div>
                        <input type="file" id="photoInput" accept="image/*" style="display: none;" onchange="handlePhotoUpload(event)">
                        <video id="cameraPreview" style="display: none; width: 300px; height: 200px; border-radius: 8px; margin-top: 10px;"></video>
                        <canvas id="photoCanvas" style="display: none;"></canvas>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Fitness ID</label>
                        <div style="display: flex; align-items: center; gap: 10px;">
                            <input type="text" class="form-control" value="<%= user.fitnessId || 'N/A' %>" readonly style="background: #f0f0f0;">
                            <button type="button" class="btn btn-outline" onclick="copyFitnessId('<%= user.fitnessId %>')">
                                <i class="fas fa-copy"></i> Copy
                            </button>
                        </div>
                        <small class="text-muted">Share this ID with friends to connect.</small>
                    </div>

                    <button type="submit" class="btn btn-primary" onclick="updateProfile(event)">Save Changes</button>
                </form>
            </div>
            
            <!-- Connected Accounts Card -->
            <div class="settings-card account-content">
                <div class="card-header">
                    <h2 class="card-title">Connected Accounts</h2>
                </div>
                
                <div class="connected-account">
                    <div class="account-info">
                        <div class="account-icon google">
                            <i class="fab fa-google"></i>
                        </div>
                        <div>
                            <h4 style="margin: 0;">Google</h4>
                            <small style="color: var(--gray);">Connected for authentication</small>
                        </div>
                    </div>
                    <button class="btn btn-outline">Disconnect</button>
                </div>
                
                <div class="connected-account">
                    <div class="account-info">
                        <div class="account-icon apple">
                            <i class="fab fa-apple"></i>
                        </div>
                        <div>
                            <h4 style="margin: 0;">Apple Health</h4>
                            <small style="color: var(--gray);">Not connected</small>
                        </div>
                    </div>
                    <button class="btn btn-primary">Connect</button>
                </div>
                
                <div class="connected-account">
                    <div class="account-info">
                        <div class="account-icon fitbit">
                            <i class="fab fa-fitbit"></i>
                        </div>
                        <div>
                            <h4 style="margin: 0;">Fitbit</h4>
                            <small style="color: var(--gray);">Not connected</small>
                        </div>
                    </div>
                    <button class="btn btn-primary">Connect</button>
                </div>
            </div>
            
            <!-- Account Security Card -->
            <div class="settings-card account-content">
                <div class="card-header">
                    <h2 class="card-title">Account Security</h2>
                </div>
                
                <div style="margin-bottom: 1.5rem;">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                        <div>
                            <h4 style="margin: 0;">Two-Factor Authentication</h4>
                            <small style="color: var(--gray);">Add an extra layer of security</small>
                        </div>
                        <label class="toggle-switch">
                            <input type="checkbox" id="twoFactorToggle" <%= user.security?.twoFactorEnabled ? 'checked' : '' %> onchange="toggleTwoFactor(this.checked)">
                            <span class="slider"></span>
                        </label>
                    </div>
                </div>
                
                <div style="margin-bottom: 1.5rem;">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                        <div>
                            <h4 style="margin: 0;">Password</h4>
                            <small style="color: var(--gray);" id="passwordLastChanged">Last changed <%= user.security?.passwordLastChanged ? new Date(user.security.passwordLastChanged).toLocaleDateString() : 'Never' %></small>
                        </div>
                        <button class="btn btn-outline" onclick="changePassword()">Change</button>
                    </div>
                </div>
                
                <div style="margin-bottom: 1.5rem;">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                        <div>
                            <h4 style="margin: 0;">Active Sessions</h4>
                            <small style="color: var(--gray);" id="activeSessionsCount">Loading...</small>
                        </div>
                        <button class="btn btn-outline" onclick="viewActiveSessions()">View All</button>
                    </div>
                </div>
            </div>
            
            <!-- Preferences Content -->
            <div class="preferences-content" style="display: none;">
                <!-- App Preferences -->
                <div class="settings-card">
                    <div class="card-header">
                        <h2 class="card-title">App Preferences</h2>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Theme</label>
                        <select class="form-control" id="themeSelect" onchange="updatePreference('theme', this.value)">
                            <option value="dark" <%= (user.preferences?.theme || 'dark') === 'dark' ? 'selected' : '' %>>Dark Theme</option>
                            <option value="light" <%= (user.preferences?.theme || 'dark') === 'light' ? 'selected' : '' %>>Light Theme</option>
                            <option value="auto" <%= (user.preferences?.theme || 'dark') === 'auto' ? 'selected' : '' %>>Auto (System)</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Language</label>
                        <select class="form-control" id="languageSelect" onchange="updatePreference('language', this.value)">
                            <option value="en" <%= (user.preferences?.language || 'en') === 'en' ? 'selected' : '' %>>English</option>
                            <option value="es" <%= (user.preferences?.language || 'en') === 'es' ? 'selected' : '' %>>Spanish</option>
                            <option value="fr" <%= (user.preferences?.language || 'en') === 'fr' ? 'selected' : '' %>>French</option>
                            <option value="de" <%= (user.preferences?.language || 'en') === 'de' ? 'selected' : '' %>>German</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Units</label>
                        <select class="form-control" id="unitsSelect" onchange="updatePreference('units', this.value)">
                            <option value="metric" <%= (user.preferences?.units || 'metric') === 'metric' ? 'selected' : '' %>>Metric (kg, cm)</option>
                            <option value="imperial" <%= (user.preferences?.units || 'metric') === 'imperial' ? 'selected' : '' %>>Imperial (lbs, ft)</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Time Format</label>
                        <select class="form-control" id="timeFormatSelect" onchange="updatePreference('timeFormat', this.value)">
                            <option value="12" <%= (user.preferences?.timeFormat || '12') === '12' ? 'selected' : '' %>>12-hour (AM/PM)</option>
                            <option value="24" <%= (user.preferences?.timeFormat || '12') === '24' ? 'selected' : '' %>>24-hour</option>
                        </select>
                    </div>
                </div>
                
                <!-- Workout Preferences -->
                <div class="settings-card">
                    <div class="card-header">
                        <h2 class="card-title">Workout Preferences</h2>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0;">Auto-start Rest Timer</h4>
                                <small style="color: var(--gray);">Automatically start rest timer after each set</small>
                            </div>
                            <label class="toggle-switch">
                                <input type="checkbox" id="autoRestTimer" <%= (user.preferences?.autoRestTimer !== false) ? 'checked' : '' %> onchange="updatePreference('autoRestTimer', this.checked)">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Default Rest Time (seconds)</label>
                        <input type="number" class="form-control" id="defaultRestTime" value="<%= user.preferences?.defaultRestTime || 90 %>" min="30" max="300" onchange="updatePreference('defaultRestTime', parseInt(this.value))">
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0;">Workout Music</h4>
                                <small style="color: var(--gray);">Play background music during workouts</small>
                            </div>
                            <label class="toggle-switch">
                                <input type="checkbox" id="workoutMusic" <%= (user.preferences?.workoutMusic) ? 'checked' : '' %> onchange="updatePreference('workoutMusic', this.checked)">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Preferred Workout Days</label>
                        <div style="display: flex; gap: 10px; flex-wrap: wrap; margin-top: 10px;">
                            <label style="display: flex; align-items: center; gap: 5px;"><input type="checkbox" checked> Mon</label>
                            <label style="display: flex; align-items: center; gap: 5px;"><input type="checkbox" checked> Tue</label>
                            <label style="display: flex; align-items: center; gap: 5px;"><input type="checkbox"> Wed</label>
                            <label style="display: flex; align-items: center; gap: 5px;"><input type="checkbox" checked> Thu</label>
                            <label style="display: flex; align-items: center; gap: 5px;"><input type="checkbox" checked> Fri</label>
                            <label style="display: flex; align-items: center; gap: 5px;"><input type="checkbox"> Sat</label>
                            <label style="display: flex; align-items: center; gap: 5px;"><input type="checkbox"> Sun</label>
                        </div>
                    </div>
                </div>
                
                <!-- Privacy Preferences -->
                <div class="settings-card">
                    <div class="card-header">
                        <h2 class="card-title">Privacy Preferences</h2>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0;">Profile Visibility</h4>
                                <small style="color: var(--gray);">Make your profile visible to other users</small>
                            </div>
                            <label class="toggle-switch">
                                <input type="checkbox" id="profileVisibility" <%= (user.preferences?.profileVisibility !== false) ? 'checked' : '' %> onchange="updatePreference('profileVisibility', this.checked)">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0;">Share Workout Stats</h4>
                                <small style="color: var(--gray);">Allow others to see your workout statistics</small>
                            </div>
                            <label class="toggle-switch">
                                <input type="checkbox" id="shareWorkoutStats" <%= (user.preferences?.shareWorkoutStats) ? 'checked' : '' %> onchange="updatePreference('shareWorkoutStats', this.checked)">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0;">Data Analytics</h4>
                                <small style="color: var(--gray);">Help improve the app by sharing anonymous usage data</small>
                            </div>
                            <label class="toggle-switch">
                                <input type="checkbox" id="dataAnalytics" <%= (user.preferences?.dataAnalytics !== false) ? 'checked' : '' %> onchange="updatePreference('dataAnalytics', this.checked)">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Notifications Content -->
            <div class="notifications-content" style="display: none;">
                <!-- Push Notifications -->
                <div class="settings-card">
                    <div class="card-header">
                        <h2 class="card-title">Push Notifications</h2>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0;">Workout Reminders</h4>
                                <small style="color: var(--gray);">Get reminded about your scheduled workouts</small>
                            </div>
                            <label class="toggle-switch">
                                <input type="checkbox" id="workoutReminders" <%= (user.notifications?.workoutReminders !== false) ? 'checked' : '' %> onchange="updateNotification('workoutReminders', this.checked)">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0;">Progress Updates</h4>
                                <small style="color: var(--gray);">Weekly progress summaries and achievements</small>
                            </div>
                            <label class="toggle-switch">
                                <input type="checkbox" id="progressUpdates" <%= (user.notifications?.progressUpdates !== false) ? 'checked' : '' %> onchange="updateNotification('progressUpdates', this.checked)">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0;">Challenge Notifications</h4>
                                <small style="color: var(--gray);">Updates about challenges and competitions</small>
                            </div>
                            <label class="toggle-switch">
                                <input type="checkbox" id="challengeNotifications" <%= (user.notifications?.challengeNotifications) ? 'checked' : '' %> onchange="updateNotification('challengeNotifications', this.checked)">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0;">Social Updates</h4>
                                <small style="color: var(--gray);">Friend activities and community updates</small>
                            </div>
                            <label class="toggle-switch">
                                <input type="checkbox" id="socialUpdates" <%= (user.notifications?.socialUpdates) ? 'checked' : '' %> onchange="updateNotification('socialUpdates', this.checked)">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                </div>
                
                <!-- Email Notifications -->
                <div class="settings-card">
                    <div class="card-header">
                        <h2 class="card-title">Email Notifications</h2>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0;">Weekly Reports</h4>
                                <small style="color: var(--gray);">Detailed weekly fitness reports</small>
                            </div>
                            <label class="toggle-switch">
                                <input type="checkbox" id="weeklyReports" <%= (user.notifications?.weeklyReports !== false) ? 'checked' : '' %> onchange="updateNotification('weeklyReports', this.checked)">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0;">Marketing Emails</h4>
                                <small style="color: var(--gray);">Tips, news, and promotional content</small>
                            </div>
                            <label class="toggle-switch">
                                <input type="checkbox" id="marketingEmails" <%= (user.notifications?.marketingEmails) ? 'checked' : '' %> onchange="updateNotification('marketingEmails', this.checked)">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0;">Security Alerts</h4>
                                <small style="color: var(--gray);">Account security and login notifications</small>
                            </div>
                            <label class="toggle-switch">
                                <input type="checkbox" id="securityAlerts" <%= (user.notifications?.securityAlerts !== false) ? 'checked' : '' %> onchange="updateNotification('securityAlerts', this.checked)">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                </div>
                
                <!-- Notification Schedule -->
                <div class="settings-card">
                    <div class="card-header">
                        <h2 class="card-title">Notification Schedule</h2>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Quiet Hours</label>
                        <div style="display: flex; gap: 10px; align-items: center;">
                            <input type="time" class="form-control" id="quietHoursStart" value="<%= user.notifications?.quietHours?.start || '22:00' %>" style="width: auto;" onchange="updateNotification('quietHours', {start: this.value, end: document.getElementById('quietHoursEnd').value})">
                            <span>to</span>
                            <input type="time" class="form-control" id="quietHoursEnd" value="<%= user.notifications?.quietHours?.end || '08:00' %>" style="width: auto;" onchange="updateNotification('quietHours', {start: document.getElementById('quietHoursStart').value, end: this.value})">
                        </div>
                        <small style="color: var(--gray);">No notifications during these hours</small>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0;">Weekend Notifications</h4>
                                <small style="color: var(--gray);">Receive notifications on weekends</small>
                            </div>
                            <label class="toggle-switch">
                                <input type="checkbox" id="weekendNotifications" <%= (user.notifications?.weekendNotifications) ? 'checked' : '' %> onchange="updateNotification('weekendNotifications', this.checked)">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Security Content -->
            <div class="security-content" style="display: none;">
                <!-- Account Security -->
                <div class="settings-card">
                    <div class="card-header">
                        <h2 class="card-title">Account Security</h2>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0;">Two-Factor Authentication</h4>
                                <small style="color: var(--gray);">Add an extra layer of security</small>
                            </div>
                            <label class="toggle-switch">
                                <input type="checkbox">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0;">Password</h4>
                                <small style="color: var(--gray);">Last changed 3 months ago</small>
                            </div>
                            <button class="btn btn-outline">Change</button>
                        </div>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0;">Login Notifications</h4>
                                <small style="color: var(--gray);">Get notified of new login attempts</small>
                            </div>
                            <label class="toggle-switch">
                                <input type="checkbox" checked>
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                </div>
                
                <!-- Active Sessions -->
                <div class="settings-card">
                    <div class="card-header">
                        <h2 class="card-title">Active Sessions</h2>
                    </div>
                    
                    <div class="session-item" style="display: flex; justify-content: space-between; align-items: center; padding: 12px; border: 1px solid rgba(255,255,255,0.2); border-radius: 8px; margin-bottom: 10px;">
                        <div>
                            <h4 style="margin: 0;">Current Session</h4>
                            <small style="color: var(--gray);">Chrome on macOS • Active now</small>
                        </div>
                        <span class="badge badge-success">Current</span>
                    </div>
                    
                    <div class="session-item" style="display: flex; justify-content: space-between; align-items: center; padding: 12px; border: 1px solid rgba(255,255,255,0.2); border-radius: 8px; margin-bottom: 10px;">
                        <div>
                            <h4 style="margin: 0;">Mobile App</h4>
                            <small style="color: var(--gray);">iPhone • Last active 2 hours ago</small>
                        </div>
                        <button class="btn btn-outline" style="font-size: 0.8rem; padding: 6px 12px;">Revoke</button>
                    </div>
                    
                    <button class="btn btn-outline" style="margin-top: 10px;">Revoke All Other Sessions</button>
                </div>
                
                <!-- Privacy Settings -->
                <div class="settings-card">
                    <div class="card-header">
                        <h2 class="card-title">Privacy Settings</h2>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0;">Data Encryption</h4>
                                <small style="color: var(--gray);">Encrypt sensitive data at rest</small>
                            </div>
                            <label class="toggle-switch">
                                <input type="checkbox" checked disabled>
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0;">Activity Logging</h4>
                                <small style="color: var(--gray);">Log account activity for security</small>
                            </div>
                            <label class="toggle-switch">
                                <input type="checkbox" checked>
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Advanced Content -->
            <div class="advanced-content" style="display: none;">
                <!-- Data Management -->
                <div class="settings-card">
                    <div class="card-header">
                        <h2 class="card-title">Data Management</h2>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0;">Auto Backup</h4>
                                <small style="color: var(--gray);">Automatically backup your data weekly</small>
                            </div>
                            <label class="toggle-switch">
                                <input type="checkbox" checked>
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0;">Data Sync</h4>
                                <small style="color: var(--gray);">Sync data across all your devices</small>
                            </div>
                            <label class="toggle-switch">
                                <input type="checkbox" checked>
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Data Retention Period</label>
                        <select class="form-control">
                            <option value="1year" selected>1 Year</option>
                            <option value="2years">2 Years</option>
                            <option value="5years">5 Years</option>
                            <option value="forever">Forever</option>
                        </select>
                    </div>
                </div>
                
                <!-- Developer Options -->
                <div class="settings-card">
                    <div class="card-header">
                        <h2 class="card-title">Developer Options</h2>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0;">Debug Mode</h4>
                                <small style="color: var(--gray);">Enable detailed logging for troubleshooting</small>
                            </div>
                            <label class="toggle-switch">
                                <input type="checkbox">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0;">Beta Features</h4>
                                <small style="color: var(--gray);">Access experimental features</small>
                            </div>
                            <label class="toggle-switch">
                                <input type="checkbox">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0;">API Access</h4>
                                <small style="color: var(--gray);">Generate API keys for third-party integrations</small>
                            </div>
                            <button class="btn btn-outline">Manage Keys</button>
                        </div>
                    </div>
                </div>
                
                <!-- System Information -->
                <div class="settings-card">
                    <div class="card-header">
                        <h2 class="card-title">System Information</h2>
                    </div>
                    
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
                        <div>
                            <h4 style="margin: 0 0 5px 0;">App Version</h4>
                            <small style="color: var(--gray);">v2.1.0</small>
                        </div>
                        <div>
                            <h4 style="margin: 0 0 5px 0;">Database Version</h4>
                            <small style="color: var(--gray);">v1.8.3</small>
                        </div>
                        <div>
                            <h4 style="margin: 0 0 5px 0;">Last Backup</h4>
                            <small style="color: var(--gray);">2 days ago</small>
                        </div>
                        <div>
                            <h4 style="margin: 0 0 5px 0;">Storage Used</h4>
                            <small style="color: var(--gray);">245 MB</small>
                        </div>
                    </div>
                    
                    <div style="margin-top: 20px;">
                        <button class="btn btn-outline" onclick="checkForUpdates()">Check for Updates</button>
                        <button class="btn btn-outline" style="margin-left: 10px;" onclick="clearCache()">Clear Cache</button>
                    </div>
                </div>
            </div>
            
            <!-- Danger Zone Card -->
            <div class="settings-card account-content" style="border-left: 4px solid var(--danger);">
                <div class="card-header">
                    <h2 class="card-title" style="color: var(--danger);">Danger Zone</h2>
                </div>
                
                <div style="margin-bottom: 1.5rem;">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                        <div>
                            <h4 style="margin: 0;">Delete Account</h4>
                            <small style="color: var(--gray);">Permanently delete your account and all data</small>
                        </div>
                        <button class="btn btn-outline" style="border-color: var(--danger); color: var(--danger);" onclick="deleteAccount()">Delete Account</button>
                    </div>
                </div>
                
                <div style="margin-bottom: 1.5rem;">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                        <div>
                            <h4 style="margin: 0;">Reset All Data</h4>
                            <small style="color: var(--gray);">Clear all your workout and progress data</small>
                        </div>
                        <button class="btn btn-outline" style="border-color: var(--danger); color: var(--danger);" onclick="resetAllData()">Reset Data</button>
                    </div>
                </div>
            </div>
            
            <!-- Subscription Content -->
            <div class="subscription-content">
                <!-- Current Plan Card -->
                <div class="current-plan">
                    <div class="plan-name" id="currentPlanName">
                        <% 
                        const planNames = {
                            'free': 'Free Plan',
                            'basic': 'Basic Pro',
                            'premium': 'Premium Pro',
                            'yearly': 'Yearly Premium'
                        };
                        const currentPlan = user.subscription?.plan || 'free';
                        %>
                        <%= planNames[user.subscription?.plan || 'free'] || 'Free Plan' %>
                    </div>
                    <div class="plan-price" id="currentPlanPrice">
                        <% 
                        const planPrices = {
                            'free': '$0',
                            'basic': '$9.99', 
                            'premium': '$19.99',
                            'pro': '$29.99'
                        };
                        %>
                        <%= planPrices[user.subscription?.plan || 'free'] || '$0' %>/month
                    </div>
                    <ul class="plan-features">
                        <% if (currentPlan === 'free') { %>
                            <li>Basic workout tracking</li>
                            <li>Limited nutrition logging</li>
                            <li>Basic progress charts</li>
                        <% } else if (currentPlan === 'basic') { %>
                            <li>Unlimited workout tracking</li>
                            <li>Full nutrition logging</li>
                            <li>Advanced progress charts</li>
                            <li>Email support</li>
                        <% } else if (currentPlan === 'premium') { %>
                            <li>Everything in Basic</li>
                            <li>AI-powered workout recommendations</li>
                            <li>Meal planning & recipes</li>
                            <li>Priority support</li>
                        <% } else if (currentPlan === 'pro') { %>
                            <li>Everything in Premium</li>
                            <li>Personal AI fitness coach</li>
                            <li>Custom workout programs</li>
                            <li>1-on-1 coaching sessions</li>
                        <% } %>
                    </ul>
                    <% if (currentPlan !== 'pro') { %>
                        <button class="btn btn-outline" style="color: white; border-color: white;" onclick="showUpgradeOptions()">
                            <i class="fas fa-arrow-up"></i> Upgrade Plan
                        </button>
                    <% } %>
                </div>
                
                <!-- Pricing Plans -->
                <div class="pricing-grid" id="pricingPlans" style="display: none;">
                    <!-- Basic Plan -->
                    <div class="pricing-card">
                        <div class="pricing-plan-name">Basic Plan</div>
                        <div class="pricing-plan-price">$9.99</div>
                        <div class="pricing-plan-period">per month</div>
                        <ul class="pricing-features">
                            <li>Unlimited workout tracking</li>
                            <li>Full nutrition logging</li>
                            <li>Advanced progress charts</li>
                            <li>Email support</li>
                            <li class="unavailable">AI workout recommendations</li>
                            <li class="unavailable">Meal planning</li>
                        </ul>
                        <button class="btn btn-primary btn-upgrade" onclick="upgradePlan('basic', 9.99)">
                            Choose Basic
                        </button>
                    </div>
                    
                    <!-- Premium Plan -->
                    <div class="pricing-card popular">
                        <div class="popular-badge">Most Popular</div>
                        <div class="pricing-plan-name">Premium Plan</div>
                        <div class="pricing-plan-price">$19.99</div>
                        <div class="pricing-plan-period">per month</div>
                        <ul class="pricing-features">
                            <li>Everything in Basic</li>
                            <li>AI-powered workout recommendations</li>
                            <li>Meal planning & recipes</li>
                            <li>Advanced analytics</li>
                            <li>Priority support</li>
                            <li class="unavailable">Personal AI coach</li>
                        </ul>
                        <button class="btn btn-primary btn-upgrade" onclick="upgradePlan('premium', 19.99)">
                            Choose Premium
                        </button>
                    </div>
                    
                    <!-- Pro Plan -->
                    <div class="pricing-card">
                        <div class="pricing-plan-name">Pro Plan</div>
                        <div class="pricing-plan-price">$29.99</div>
                        <div class="pricing-plan-period">per month</div>
                        <ul class="pricing-features">
                            <li>Everything in Premium</li>
                            <li>Personal AI fitness coach</li>
                            <li>Custom workout programs</li>
                            <li>1-on-1 coaching sessions</li>
                            <li>Nutrition consultation</li>
                            <li>24/7 priority support</li>
                        </ul>
                        <button class="btn btn-primary btn-upgrade" onclick="upgradePlan('pro', 29.99)">
                            Choose Pro
                        </button>
                    </div>
                </div>
                
                <!-- Payment Methods -->
                <div class="payment-methods">
                    <div class="payment-method">
                        <i class="fab fa-cc-visa"></i>
                        <span>Visa</span>
                    </div>
                    <div class="payment-method">
                        <i class="fab fa-cc-mastercard"></i>
                        <span>Mastercard</span>
                    </div>
                    <div class="payment-method">
                        <i class="fab fa-cc-paypal"></i>
                        <span>PayPal</span>
                    </div>
                    <div class="payment-method">
                        <i class="fab fa-apple-pay"></i>
                        <span>Apple Pay</span>
                    </div>
                </div>
                
                <!-- Payment History -->
                <div class="settings-card">
                    <div class="card-header">
                        <h2 class="card-title">Payment History</h2>
                    </div>
                    <div id="paymentHistory">
                        <% if (user.subscription?.paymentHistory && user.subscription.paymentHistory.length > 0) { %>
                            <% user.subscription.paymentHistory.forEach(payment => { %>
                                <div style="display: flex; justify-content: space-between; align-items: center; padding: 12px; border-bottom: 1px solid var(--light-gray);">
                                    <div>
                                        <strong><%= payment.plan %> Plan</strong>
                                        <br>
                                        <small style="color: var(--gray);"><%= new Date(payment.date).toLocaleDateString() %></small>
                                    </div>
                                    <div style="text-align: right;">
                                        <strong>$<%= payment.amount %></strong>
                                        <br>
                                        <span class="badge badge-success"><%= payment.status %></span>
                                    </div>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <p style="text-align: center; color: var(--gray); padding: 2rem;">
                                No payment history available
                            </p>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // Tab switching functionality
        document.querySelectorAll('.tab').forEach((tab, index) => {
            tab.addEventListener('click', function() {
                document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                this.classList.add('active');
                
                // Hide all content sections
                document.querySelectorAll('.account-content').forEach(el => el.style.display = 'none');
                document.querySelector('.subscription-content').classList.remove('active');
                document.querySelector('.preferences-content').style.display = 'none';
                document.querySelector('.notifications-content').style.display = 'none';
                document.querySelector('.security-content').style.display = 'none';
                document.querySelector('.advanced-content').style.display = 'none';
                
                // Show content based on tab
                const tabText = this.textContent.trim();
                switch(tabText) {
                    case 'Account':
                        document.querySelectorAll('.account-content').forEach(el => el.style.display = 'block');
                        break;
                    case 'Preferences':
                        document.querySelector('.preferences-content').style.display = 'block';
                        break;
                    case 'Notifications':
                        document.querySelector('.notifications-content').style.display = 'block';
                        break;
                    case 'Security':
                        document.querySelector('.security-content').style.display = 'block';
                        break;
                    case 'Subscription':
                        document.querySelector('.subscription-content').classList.add('active');
                        break;
                    case 'Advanced':
                        document.querySelector('.advanced-content').style.display = 'block';
                        break;
                }
            });
        });

        // Show upgrade options
        function showUpgradeOptions() {
            const pricingPlans = document.getElementById('pricingPlans');
            if (pricingPlans.style.display === 'none') {
                pricingPlans.style.display = 'grid';
            } else {
                pricingPlans.style.display = 'none';
            }
        }

        // Upgrade plan function
        async function upgradePlan(planType, price) {
            try {
                // Show loading state
                const button = event.target;
                const originalText = button.innerHTML;
                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
                button.disabled = true;

                // Simulate payment processing
                await new Promise(resolve => setTimeout(resolve, 2000));

                // Call API to upgrade subscription
                const response = await fetch('/api/subscription/upgrade', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        plan: planType,
                        amount: price,
                        paymentMethod: 'Credit Card',
                        duration: 'monthly'
                    })
                });

                const result = await response.json();

                if (result.success) {
                    // Show success message
                    showNotification('Subscription upgraded successfully!', 'success');
                    
                    // Update current plan display
                    updateCurrentPlanDisplay(planType, price);
                    
                    // Hide pricing plans
                    document.getElementById('pricingPlans').style.display = 'none';
                    
                    // Refresh page after a short delay
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    showNotification('Upgrade failed: ' + result.error, 'error');
                }

            } catch (error) {
                console.error('Upgrade error:', error);
                showNotification('Upgrade failed. Please try again.', 'error');
            } finally {
                // Reset button
                button.innerHTML = originalText;
                button.disabled = false;
            }
        }

        // Update current plan display
        function updateCurrentPlanDisplay(planType, price) {
            const planNames = {
                'basic': 'Basic Plan',
                'premium': 'Premium Plan',
                'pro': 'Pro Plan'
            };
            
            document.getElementById('currentPlanName').textContent = planNames[planType];
            document.getElementById('currentPlanPrice').textContent = `$${price}/month`;
        }

        // Legacy notification function (updated to use toast)
        function showNotification(message, type) {
            showToast(message, type);
        }

        function copyFitnessId(fitnessId) {
            navigator.clipboard.writeText(fitnessId).then(() => {
                showToast('Fitness ID copied!', 'success');
            }, () => {
                showToast('Copy failed', 'error');
            });
        }

        // Logout confirmation
        function confirmLogout() {
            return confirm('Are you sure you want to logout?');
        }

        // Profile photo management
        let cameraStream = null;

        function showPhotoOptions() {
            const options = [
                { text: 'Take Photo', action: 'camera' },
                { text: 'Upload Photo', action: 'upload' },
                { text: 'Cancel', action: 'cancel' }
            ];

            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.5);
                display: flex;
                justify-content: center;
                align-items: center;
                z-index: 2000;
            `;

            const content = document.createElement('div');
            content.style.cssText = `
                background: linear-gradient(135deg, rgba(108, 99, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 50%, rgba(108, 99, 255, 0.08) 100%);
                backdrop-filter: blur(20px);
                border: 1px solid rgba(255, 255, 255, 0.1);
                padding: 2rem;
                border-radius: 12px;
                text-align: center;
                min-width: 300px;
                color: white;
            `;

            content.innerHTML = `
                <h3 style="margin-bottom: 1.5rem; color: white;">Choose Photo Option</h3>
                <div style="display: flex; flex-direction: column; gap: 10px;">
                    <button class="btn btn-primary" onclick="startCamera(); closeModal();">📷 Take Photo</button>
                    <button class="btn btn-outline" onclick="document.getElementById('photoInput').click(); closeModal();">📁 Upload Photo</button>
                    <button class="btn btn-outline" onclick="closeModal()">Cancel</button>
                </div>
            `;

            modal.appendChild(content);
            document.body.appendChild(modal);

            window.closeModal = function() {
                document.body.removeChild(modal);
            };
        }

        async function startCamera() {
            try {
                const video = document.getElementById('cameraPreview');
                video.style.display = 'block';
                
                cameraStream = await navigator.mediaDevices.getUserMedia({ video: true });
                video.srcObject = cameraStream;
                video.play();

                // Add capture button
                if (!document.getElementById('captureBtn')) {
                    const captureBtn = document.createElement('button');
                    captureBtn.id = 'captureBtn';
                    captureBtn.className = 'btn btn-primary';
                    captureBtn.innerHTML = '📸 Capture Photo';
                    captureBtn.style.marginTop = '10px';
                    captureBtn.onclick = capturePhoto;
                    video.parentNode.appendChild(captureBtn);

                    const cancelBtn = document.createElement('button');
                    cancelBtn.className = 'btn btn-outline';
                    cancelBtn.innerHTML = 'Cancel';
                    cancelBtn.style.marginTop = '10px';
                    cancelBtn.style.marginLeft = '10px';
                    cancelBtn.onclick = stopCamera;
                    video.parentNode.appendChild(cancelBtn);
                }
            } catch (error) {
                console.error('Camera access error:', error);
                showNotification('Camera access denied or not available', 'error');
            }
        }

        function capturePhoto() {
            const video = document.getElementById('cameraPreview');
            const canvas = document.getElementById('photoCanvas');
            const ctx = canvas.getContext('2d');

            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            ctx.drawImage(video, 0, 0);

            canvas.toBlob(function(blob) {
                const file = new File([blob], 'camera-photo.jpg', { type: 'image/jpeg' });
                uploadPhotoFile(file);
                stopCamera();
            }, 'image/jpeg', 0.8);
        }

        function stopCamera() {
            if (cameraStream) {
                cameraStream.getTracks().forEach(track => track.stop());
                cameraStream = null;
            }
            document.getElementById('cameraPreview').style.display = 'none';
            const captureBtn = document.getElementById('captureBtn');
            if (captureBtn) captureBtn.remove();
        }

        function handlePhotoUpload(event) {
            const file = event.target.files[0];
            if (file) {
                uploadPhotoFile(file);
            }
        }

        async function uploadPhotoFile(file) {
            try {
                const formData = new FormData();
                formData.append('photo', file);

                showToast('Uploading photo...', 'info');

                const response = await fetch('/api/settings/profile-photo', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                console.log('Upload result:', result);

                if (result.success) {
                    console.log('Setting image src to:', result.photoUrl);
                    const img = document.getElementById('profileImage');
                    img.src = result.photoUrl;
                    showToast('Photo updated successfully!', 'success');
                    
                    // Trigger sidebar avatar update
                    window.dispatchEvent(new CustomEvent('profilePhotoUpdated', {
                        detail: { photoUrl: result.photoUrl }
                    }));
                    
                    // Reload page after 1 second to ensure changes persist
                    setTimeout(() => {
                        window.location.reload(true);
                    }, 1000);
                } else {
                    showToast('Upload failed: ' + (result.error || 'Unknown error'), 'error');
                }
            } catch (error) {
                console.error('Photo upload error:', error);
                showToast('Network error. Please try again.', 'error');
            }
        }

        async function removeProfilePhoto() {
            if (!confirm('Are you sure you want to remove your profile photo?')) {
                return;
            }

            try {
                const response = await fetch('/api/settings/profile-photo', {
                    method: 'DELETE'
                });

                const result = await response.json();

                if (result.success) {
                    document.getElementById('profileImage').src = 'https://ui-avatars.com/api/?name=' + encodeURIComponent('<%= user.fullName %>') + '&background=6C63FF&color=fff';
                    showToast('Photo removed!', 'success');
                } else {
                    showToast('Remove failed', 'error');
                }
            } catch (error) {
                console.error('Remove photo error:', error);
                showToast('Remove failed', 'error');
            }
        }

        // Update profile information
        async function updateProfile(event) {
            event.preventDefault();
            
            const fullNameInput = document.querySelector('input[name="fullName"]');
            const emailInput = document.querySelector('input[name="email"]');
            
            const fullName = fullNameInput.value.trim();
            const email = emailInput.value.trim();

            if (!fullName || !email) {
                showToast('Fill all fields', 'error');
                return;
            }

            try {
                showToast('Updating profile...', 'info');

                const response = await fetch('/api/settings/profile', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        fullName: fullName,
                        email: email
                    })
                });

                const result = await response.json();
                console.log('Profile update result:', result);

                if (result.success) {
                    showToast('Profile updated successfully!', 'success');
                    
                    // Force reload after 1 second to show changes
                    setTimeout(() => {
                        window.location.reload(true);
                    }, 1000);
                } else {
                    showToast('Update failed: ' + (result.error || 'Unknown error'), 'error');
                }
            } catch (error) {
                console.error('Update profile error:', error);
                showToast('Network error. Please try again.', 'error');
            }
        }

        // Reset all data
        async function resetAllData() {
            const confirmation = prompt('This will permanently delete all your workout data, progress, and achievements. Type "RESET" to confirm:');
            
            if (confirmation !== 'RESET') {
                showNotification('Data reset cancelled', 'info');
                return;
            }

            try {
                showNotification('Resetting all data...', 'info');

                const response = await fetch('/api/settings/reset-data', {
                    method: 'POST'
                });

                const result = await response.json();

                if (result.success) {
                    showNotification('All data has been reset successfully!', 'success');
                    setTimeout(() => {
                        window.location.href = '/dashboard';
                    }, 2000);
                } else {
                    showNotification('Failed to reset data: ' + result.error, 'error');
                }
            } catch (error) {
                console.error('Reset data error:', error);
                showNotification('Failed to reset data', 'error');
            }
        }

        // Delete account
        async function deleteAccount() {
            const confirmation = prompt('This will permanently delete your account and all data. Type "DELETE" to confirm:');
            
            if (confirmation !== 'DELETE') {
                showNotification('Account deletion cancelled', 'info');
                return;
            }

            const password = prompt('Please enter your password to confirm account deletion:');
            
            if (!password) {
                showNotification('Password is required to delete account', 'error');
                return;
            }

            try {
                showNotification('Deleting account...', 'info');

                const response = await fetch('/api/settings/account', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        password: password
                    })
                });

                const result = await response.json();

                if (result.success) {
                    showNotification('Account deleted successfully. Redirecting...', 'success');
                    setTimeout(() => {
                        window.location.href = '/';
                    }, 2000);
                } else {
                    showNotification('Failed to delete account: ' + result.error, 'error');
                }
            } catch (error) {
                console.error('Delete account error:', error);
                showNotification('Failed to delete account', 'error');
            }
        }

        // Export user data
        async function exportUserData() {
            try {
                showNotification('Preparing data export...', 'info');
                
                const response = await fetch('/api/settings/export-data', {
                    method: 'GET'
                });
                
                if (response.ok) {
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `fit-with-ai-data-${new Date().toISOString().split('T')[0]}.json`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    window.URL.revokeObjectURL(url);
                    
                    showNotification('Data exported successfully!', 'success');
                } else {
                    showNotification('Failed to export data', 'error');
                }
            } catch (error) {
                console.error('Export error:', error);
                showNotification('Export failed', 'error');
            }
        }
        
        // Toast notification function
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            const colors = {
                success: '#28A745',
                error: '#DC3545',
                info: '#17A2B8',
                warning: '#FFC107'
            };
            
            toast.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 12px 20px;
                border-radius: 8px;
                color: white;
                font-weight: 500;
                z-index: 3000;
                background: ${colors[type]};
                box-shadow: 0 4px 20px rgba(0,0,0,0.3);
                max-width: 350px;
                transform: translateX(100%);
                transition: transform 0.3s ease;
                font-size: 14px;
            `;
            toast.textContent = message;
            
            document.body.appendChild(toast);
            
            setTimeout(() => toast.style.transform = 'translateX(0)', 100);
            
            setTimeout(() => {
                toast.style.transform = 'translateX(100%)';
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }
        
        // Update user preferences
        async function updatePreference(key, value) {
            try {
                const response = await fetch('/api/settings/preferences', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ [key]: value })
                });
                
                const result = await response.json();
                if (result.success) {
                    showToast(`${key.charAt(0).toUpperCase() + key.slice(1)} updated`, 'success');
                } else {
                    showToast('Failed to update preference', 'error');
                }
            } catch (error) {
                showToast('Update failed', 'error');
            }
        }
        
        // Update notification settings
        async function updateNotification(key, value) {
            try {
                const response = await fetch('/api/settings/notifications', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ [key]: value })
                });
                
                const result = await response.json();
                if (result.success) {
                    showToast(`Notification setting updated`, 'success');
                } else {
                    showToast('Failed to update notification', 'error');
                }
            } catch (error) {
                showToast('Update failed', 'error');
            }
        }
        
        // Update security settings
        async function updateSecurity(key, value) {
            try {
                const response = await fetch('/api/settings/security', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ [key]: value })
                });
                
                const result = await response.json();
                if (result.success) {
                    showToast(`Security setting updated`, 'success');
                } else {
                    showToast('Failed to update security', 'error');
                }
            } catch (error) {
                showToast('Update failed', 'error');
            }
        }
        
        // Advanced settings functions
        async function checkForUpdates() {
            showToast('Checking for updates...', 'info');
            try {
                const response = await fetch('/api/settings/check-updates');
                const result = await response.json();
                showToast(result.message, result.hasUpdate ? 'warning' : 'success');
            } catch (error) {
                showToast('Update check failed', 'error');
            }
        }
        
        async function clearCache() {
            if (confirm('Clear all cached data?')) {
                try {
                    const response = await fetch('/api/settings/clear-cache', { method: 'POST' });
                    const result = await response.json();
                    showToast(result.success ? 'Cache cleared!' : 'Clear failed', result.success ? 'success' : 'error');
                } catch (error) {
                    showToast('Clear failed', 'error');
                }
            }
        }
        
        // Toggle two-factor authentication
        async function toggleTwoFactor(enabled) {
            try {
                showToast('Updating 2FA...', 'info');
                
                const response = await fetch('/api/settings/two-factor', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ enabled })
                });
                
                const result = await response.json();
                if (result.success) {
                    showToast(enabled ? '2FA enabled successfully!' : '2FA disabled', 'success');
                } else {
                    showToast('Failed to update 2FA: ' + result.error, 'error');
                    document.getElementById('twoFactorToggle').checked = !enabled;
                }
            } catch (error) {
                showToast('2FA update failed', 'error');
                document.getElementById('twoFactorToggle').checked = !enabled;
            }
        }
        
        // Change password
        async function changePassword() {
            const currentPassword = prompt('Enter your current password:');
            if (!currentPassword) return;
            
            const newPassword = prompt('Enter your new password:');
            if (!newPassword || newPassword.length < 6) {
                showToast('Password must be at least 6 characters', 'error');
                return;
            }
            
            const confirmPassword = prompt('Confirm your new password:');
            if (newPassword !== confirmPassword) {
                showToast('Passwords do not match', 'error');
                return;
            }
            
            try {
                showToast('Changing password...', 'info');
                
                const response = await fetch('/api/settings/change-password', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        currentPassword, 
                        newPassword 
                    })
                });
                
                const result = await response.json();
                if (result.success) {
                    showToast('Password changed successfully!', 'success');
                    document.getElementById('passwordLastChanged').textContent = 'Last changed today';
                } else {
                    showToast('Failed to change password: ' + result.error, 'error');
                }
            } catch (error) {
                showToast('Password change failed', 'error');
            }
        }
        
        // View active sessions
        async function viewActiveSessions() {
            try {
                const response = await fetch('/api/settings/active-sessions');
                const result = await response.json();
                
                if (result.success) {
                    showSessionsModal(result.sessions);
                } else {
                    showToast('Failed to load sessions', 'error');
                }
            } catch (error) {
                showToast('Failed to load sessions', 'error');
            }
        }
        
        // Show sessions modal
        function showSessionsModal(sessions) {
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.5);
                display: flex;
                justify-content: center;
                align-items: center;
                z-index: 2000;
            `;
            
            const content = document.createElement('div');
            content.style.cssText = `
                background: linear-gradient(135deg, rgba(108, 99, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 50%, rgba(108, 99, 255, 0.08) 100%);
                backdrop-filter: blur(20px);
                border: 1px solid rgba(255, 255, 255, 0.1);
                padding: 2rem;
                border-radius: 12px;
                min-width: 500px;
                max-width: 90vw;
                max-height: 80vh;
                overflow-y: auto;
                color: white;
            `;
            
            content.innerHTML = `
                <h3 style="margin-bottom: 1.5rem; color: white;">Active Sessions</h3>
                <div id="sessionsList">
                    ${sessions.map(session => `
                        <div style="display: flex; justify-content: space-between; align-items: center; padding: 12px; border: 1px solid rgba(255,255,255,0.2); border-radius: 8px; margin-bottom: 10px; background: rgba(255,255,255,0.05);">
                            <div>
                                <h4 style="margin: 0; color: white;">${session.device || 'Unknown Device'}</h4>
                                <small style="color: rgba(255,255,255,0.7);">${session.browser || 'Unknown Browser'} • ${session.location || 'Unknown Location'}</small><br>
                                <small style="color: rgba(255,255,255,0.5);">Last active: ${new Date(session.lastActive).toLocaleString()}</small>
                            </div>
                            ${session.current ? 
                                '<span style="background: var(--success); color: white; padding: 4px 8px; border-radius: 4px; font-size: 0.8rem;">Current</span>' : 
                                `<button onclick="revokeSession('${session.id}')" style="background: var(--danger); color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 0.8rem;">Revoke</button>`
                            }
                        </div>
                    `).join('')}
                </div>
                <div style="display: flex; gap: 10px; margin-top: 20px;">
                    <button onclick="revokeAllSessions()" class="btn btn-outline" style="color: var(--danger); border-color: var(--danger);">Revoke All Others</button>
                    <button onclick="closeModal()" class="btn btn-outline">Close</button>
                </div>
            `;
            
            modal.appendChild(content);
            document.body.appendChild(modal);
            
            window.closeModal = function() {
                document.body.removeChild(modal);
            };
        }
        
        // Revoke session
        async function revokeSession(sessionId) {
            try {
                const response = await fetch('/api/settings/revoke-session', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ sessionId })
                });
                
                const result = await response.json();
                if (result.success) {
                    showToast('Session revoked', 'success');
                    viewActiveSessions();
                } else {
                    showToast('Failed to revoke session', 'error');
                }
            } catch (error) {
                showToast('Failed to revoke session', 'error');
            }
        }
        
        // Revoke all other sessions
        async function revokeAllSessions() {
            if (!confirm('Revoke all other sessions? You will need to log in again on other devices.')) {
                return;
            }
            
            try {
                const response = await fetch('/api/settings/revoke-all-sessions', {
                    method: 'POST'
                });
                
                const result = await response.json();
                if (result.success) {
                    showToast('All other sessions revoked', 'success');
                    closeModal();
                    loadActiveSessionsCount();
                } else {
                    showToast('Failed to revoke sessions', 'error');
                }
            } catch (error) {
                showToast('Failed to revoke sessions', 'error');
            }
        }
        
        // Load active sessions count
        async function loadActiveSessionsCount() {
            try {
                const response = await fetch('/api/settings/sessions-count');
                const result = await response.json();
                
                if (result.success) {
                    const count = result.count;
                    document.getElementById('activeSessionsCount').textContent = `${count} active session${count !== 1 ? 's' : ''}`;
                } else {
                    document.getElementById('activeSessionsCount').textContent = 'Unable to load';
                }
            } catch (error) {
                document.getElementById('activeSessionsCount').textContent = 'Unable to load';
            }
        }
        
        // Load active sessions count on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadActiveSessionsCount();
        });
    </script>

    <!-- Photo Options Modal Styles -->
    <style>
        .photo-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 2000;
        }
        
        .photo-modal-content {
            background: linear-gradient(135deg, rgba(108, 99, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 50%, rgba(108, 99, 255, 0.08) 100%);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            padding: 2rem;
            border-radius: 12px;
            text-align: center;
            min-width: 300px;
            color: white;
        }
        
        #cameraPreview {
            border: 2px solid var(--primary);
            border-radius: 8px;
        }
        
        .notification {
            animation: slideIn 0.3s ease-out;
        }
        
        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
    </style>
    
    <script src="/js/voice-assistant-siri.js"></script>
    <script src="/js/smart-voice-assistant.js"></script>
</body>
</html>

