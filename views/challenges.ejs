<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Challenges & Achievements - Fit-With-AI</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #6C63FF;
            --secondary: #4D44DB;
            --accent: #FF6584;
            --light: #F8F9FA;
            --dark: #343A40;
            --success: #28A745;
            --warning: #FFC107;
            --danger: #DC3545;
            --gray: #6C757D;
            --light-gray: #E9ECEF;
            --gold: #FFD700;
            --silver: #C0C0C0;
            --bronze: #CD7F32;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            background: radial-gradient(ellipse at top, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
            color: #ffffff;
            overflow-x: hidden;
            min-height: 100vh;
        }
        
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 40% 40%, rgba(120, 219, 255, 0.2) 0%, transparent 50%);
            pointer-events: none;
            z-index: -1;
        }
        
        .dashboard-container {
            display: grid;
            grid-template-columns: 280px 1fr;
            min-height: 100vh;
            gap: 20px;
            padding: 20px;
        }
        
        .sidebar {
            background: transparent;
            border: none;
            padding: 30px 20px;
            position: sticky;
            top: 20px;
            height: fit-content;
        }
        
        .sidebar-header {
            display: flex;
            align-items: center;
            margin-bottom: 2rem;
            padding: 0 1rem;
        }
        
        .sidebar-header img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }
        
        .user-name {
            font-weight: 600;
            margin: 0;
            color: white;
        }
        
        .user-plan {
            font-size: 0.8rem;
            color: var(--primary);
            background: rgba(108, 99, 255, 0.1);
            padding: 2px 8px;
            border-radius: 20px;
            margin-top: 5px;
        }
        
        .nav-menu {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .nav-item {
            margin-bottom: 5px;
        }
        
        .nav-link {
            display: flex;
            align-items: center;
            padding: 12px 15px;
            color: rgba(255, 255, 255, 0.7);
            text-decoration: none;
            border-radius: 15px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .nav-link::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
            transition: left 0.5s;
        }
        
        .nav-link:hover::before {
            left: 100%;
        }
        
        .nav-link:hover, .nav-link.active {
            background: rgba(108, 99, 255, 0.2);
            color: #ffffff;
            transform: translateX(5px);
        }
        
        .nav-link i {
            margin-right: 10px;
            font-size: 1.2rem;
        }        
        .logout-section {
            margin-top: 2rem;
            padding-top: 1rem;
            border-top: 1px solid var(--light-gray);
        }
        
        .logout-link {
            display: flex;
            align-items: center;
            padding: 12px 1rem;
            color: var(--danger);
            text-decoration: none;
            border-radius: 8px;
            transition: all 0.3s ease;
            font-weight: 500;
        }
        
        .logout-link:hover {
            background: rgba(220, 53, 69, 0.1);
            color: var(--danger);
        }
        
        .logout-link i {
            margin-right: 10px;
            font-size: 1.2rem;
        }
        
        .main-content {
            display: flex;
            flex-direction: column;
            gap: 25px;
        }
        
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }
        
        .page-title {
            font-size: 2rem;
            font-weight: 600;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .stats-overview {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 2rem;
        }
        
        .stat-card {
            background: transparent;
            border: none;
            padding: 1.5rem;
            text-align: center;
            position: relative;
            transition: transform 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
        }
        
        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(108, 99, 255, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(108, 99, 255, 0.08) 100%);
            border-radius: 12px;
            z-index: -1;
        }
        
        .stat-icon {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            margin: 0 auto 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            color: white;
        }
        
        .stat-icon.gold { background: var(--gold); }
        .stat-icon.silver { background: var(--silver); }
        .stat-icon.bronze { background: var(--bronze); }
        .stat-icon.primary { background: var(--primary); }
        
        .stat-value {
            font-size: 2rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--primary);
        }
        
        .stat-label {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
        }
        
        .content-grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 2rem;
        }
        
        .challenges-section {
            background: transparent;
            border: none;
            padding: 1.5rem;
            position: relative;
        }
        
        .challenges-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(108, 99, 255, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(108, 99, 255, 0.08) 100%);
            border-radius: 12px;
            z-index: -1;
        }
        
        .section-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 1.5rem;
        }
        
        .section-title {
            font-size: 1.3rem;
            font-weight: 600;
            margin: 0;
            color: white;
        }
        
        .challenge-tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 1.5rem;
        }
        
        .tab-btn {
            padding: 8px 16px;
            border: none;
            background: rgba(255, 255, 255, 0.1);
            color: rgba(255, 255, 255, 0.7);
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .tab-btn.active {
            background: var(--primary);
            color: white;
        }
        
        .challenge-card {
            background: transparent;
            border: none;
            padding: 1.5rem;
            margin-bottom: 1rem;
            transition: all 0.3s ease;
            position: relative;
        }
        
        .challenge-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(255, 255, 255, 0.05) 0%,
                rgba(108, 99, 255, 0.08) 50%,
                rgba(255, 255, 255, 0.03) 100%);
            border-radius: 12px;
            z-index: -1;
            transition: all 0.3s ease;
        }
        
        .challenge-card:hover::before {
            background: linear-gradient(135deg, 
                rgba(255, 255, 255, 0.1) 0%,
                rgba(108, 99, 255, 0.15) 50%,
                rgba(255, 255, 255, 0.08) 100%);
        }
        
        .challenge-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1rem;
        }
        
        .challenge-info h3 {
            margin: 0 0 0.5rem 0;
            font-size: 1.1rem;
            font-weight: 600;
            color: white;
        }
        
        .challenge-meta {
            display: flex;
            gap: 15px;
            font-size: 0.85rem;
            color: rgba(255, 255, 255, 0.7);
        }
        
        .challenge-badge {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }
        
        .badge-active {
            background: rgba(40, 167, 69, 0.1);
            color: var(--success);
        }
        
        .badge-completed {
            background: rgba(108, 99, 255, 0.1);
            color: var(--primary);
        }
        
        .badge-upcoming {
            background: rgba(255, 193, 7, 0.1);
            color: var(--warning);
        }
        
        .difficulty-badge {
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.7rem;
            font-weight: 500;
        }
        
        .difficulty-beginner {
            background: rgba(40, 167, 69, 0.2);
            color: var(--success);
        }
        
        .difficulty-intermediate {
            background: rgba(255, 193, 7, 0.2);
            color: var(--warning);
        }
        
        .difficulty-advanced {
            background: rgba(220, 53, 69, 0.2);
            color: var(--danger);
        }
        
        .challenge-progress {
            margin: 1rem 0;
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .progress-ring {
            width: 60px;
            height: 60px;
            position: relative;
        }
        
        .progress-ring svg {
            width: 100%;
            height: 100%;
            transform: rotate(-90deg);
        }
        
        .progress-ring circle {
            fill: none;
            stroke-width: 4;
        }
        
        .progress-ring .bg {
            stroke: rgba(255,255,255,0.1);
        }
        
        .progress-ring .progress {
            stroke: var(--primary);
            stroke-linecap: round;
            transition: stroke-dashoffset 0.5s ease;
        }
        
        .progress-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 0.8rem;
            font-weight: 600;
            color: white;
        }
        
        .progress-details {
            flex: 1;
        }
        
        .progress-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            font-size: 0.9rem;
        }
        
        .time-remaining {
            display: flex;
            align-items: center;
            gap: 5px;
            color: var(--warning);
            font-size: 0.85rem;
            margin-top: 5px;
        }
        
        .challenge-reward {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 1rem;
            padding: 10px;
            background: rgba(255, 213, 0, 0.1);
            border-radius: 8px;
        }
        
        .reward-icon {
            color: var(--gold);
        }
        
        .achievements-sidebar {
            background: transparent;
            border: none;
            padding: 1.5rem;
            height: fit-content;
            position: relative;
        }
        
        .achievements-sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(108, 99, 255, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(108, 99, 255, 0.08) 100%);
            border-radius: 12px;
            z-index: -1;
        }
        
        .btn {
            padding: 10px 20px;
            border-radius: 8px;
            font-family: 'Poppins', sans-serif;
            cursor: pointer;
            transition: all 0.3s ease;
            border: none;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }
        
        .btn-primary {
            background: var(--primary);
            color: white;
        }
        
        .btn-outline {
            background: white;
            color: var(--primary);
            border: 1px solid var(--primary);
        }
        
        .btn-success {
            background: var(--success);
            color: white;
        }
        
        .btn-small {
            padding: 6px 12px;
            font-size: 0.85rem;
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: var(--gray);
        }
        
        .empty-state {
            text-align: center;
            padding: 40px;
            color: var(--gray);
        }
        
        .quick-actions-sidebar {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        
        .action-btn-small {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 12px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.85rem;
            color: rgba(255, 255, 255, 0.8);
        }
        
        .action-btn-small:hover {
            background: var(--primary);
            color: white;
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        
        .modal-content {
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
            margin: 5% auto;
            padding: 0;
            border-radius: 16px;
            width: 90%;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
            border: 1px solid rgba(255,255,255,0.1);
            box-shadow: 0 20px 60px rgba(0,0,0,0.5);
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 25px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }
        
        .modal-header h3 {
            margin: 0;
            color: white;
            font-size: 1.5rem;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .close {
            font-size: 24px;
            font-weight: bold;
            cursor: pointer;
            color: rgba(255,255,255,0.7);
            background: rgba(255,255,255,0.1);
            border: none;
            width: 35px;
            height: 35px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }
        
        .close:hover {
            background: rgba(255,255,255,0.2);
            color: white;
        }
        
        .form-group {
            margin-bottom: 25px;
            padding: 0 25px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: rgba(255,255,255,0.9);
        }
        
        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 12px;
            border: 1px solid rgba(255,255,255,0.2);
            border-radius: 10px;
            font-family: 'Poppins', sans-serif;
            box-sizing: border-box;
            background: rgba(255,255,255,0.05);
            color: white;
            transition: all 0.3s ease;
        }
        
        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: var(--primary);
            background: rgba(255,255,255,0.1);
        }
        
        .form-group select option {
            background: #1a1a2e;
            color: white;
        }
        
        .form-group input[type="number"] {
            width: 48%;
            display: inline-block;
        }
        
        .form-group select {
            width: 48%;
            display: inline-block;
            margin-left: 4%;
        }
        
        .form-actions {
            display: flex;
            justify-content: flex-end;
            gap: 15px;
            padding: 25px;
            border-top: 1px solid rgba(255,255,255,0.1);
        }
        
        .btn {
            padding: 12px 24px;
            border-radius: 10px;
            font-family: 'Poppins', sans-serif;
            cursor: pointer;
            transition: all 0.3s ease;
            border: none;
            text-decoration: none;
            display: inline-block;
            text-align: center;
            font-weight: 500;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            box-shadow: 0 4px 15px rgba(108, 99, 255, 0.3);
        }
        
        .btn-outline {
            background: rgba(255,255,255,0.1);
            color: white;
            border: 1px solid rgba(255,255,255,0.3);
        }
        
        .btn:hover {
            transform: translateY(-2px);
        }
        
        @media (max-width: 768px) {
            .dashboard-container {
                grid-template-columns: 1fr;
                padding: 10px;
            }
            
            .sidebar {
                display: none;
            }
            
            .main-content {
                padding: 1rem;
            }
            
            .content-grid {
                grid-template-columns: 1fr;
            }
            
            .stats-overview {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"></script>
</head>
<body>
    <div class="dashboard-container">
        <!-- Sidebar Navigation -->
        <div class="sidebar">
            <div class="sidebar-header">
                <img src="https://ui-avatars.com/api/?name=<%= user.fullName %>&background=6C63FF&color=fff" alt="User Avatar">
                <div>
                    <h3 class="user-name"><%= user.fullName %></h3>
                    <span class="user-plan">Premium Plan</span>
                </div>
            </div>
            
            <ul class="nav-menu">
                <li class="nav-item"><a href="/dashboard?token=<%= navToken %>" class="nav-link"><i class="fas fa-home"></i> Dashboard</a></li>
                <li class="nav-item"><a href="/workouts?token=<%= navToken %>" class="nav-link"><i class="fas fa-dumbbell"></i> Workouts</a></li>
                <li class="nav-item"><a href="/progress?token=<%= navToken %>" class="nav-link"><i class="fas fa-chart-line"></i> Progress</a></li>
                <li class="nav-item"><a href="/nutrition?token=<%= navToken %>" class="nav-link"><i class="fas fa-utensils"></i> Nutrition</a></li>
                <li class="nav-item"><a href="/nutriscan?token=<%= navToken %>" class="nav-link"><i class="fas fa-qrcode"></i> NutriScan</a></li>
                <li class="nav-item"><a href="/meal-planner?token=<%= navToken %>" class="nav-link"><i class="fas fa-calendar-check"></i> Meal Planner</a></li>
                <li class="nav-item"><a href="/challenges?token=<%= navToken %>" class="nav-link active"><i class="fas fa-trophy"></i> Challenges</a></li>
                <li class="nav-item"><a href="/health?token=<%= navToken %>" class="nav-link"><i class="fas fa-heartbeat"></i> Health Metrics</a></li>
                <li class="nav-item"><a href="/biometrics?token=<%= navToken %>" class="nav-link" data-premium="analytics"><i class="fas fa-chart-bar"></i> Biometrics</a></li>
                <li class="nav-item"><a href="/schedule?token=<%= navToken %>" class="nav-link"><i class="fas fa-calendar-alt"></i> Schedule</a></li>
                <li class="nav-item"><a href="/community?token=<%= navToken %>" class="nav-link"><i class="fas fa-users"></i> Community</a></li>
                <li class="nav-item"><a href="/chat?token=<%= navToken %>" class="nav-link"><i class="fas fa-comments"></i> Chat</a></li>
                <li class="nav-item"><a href="/ai-coach?token=<%= navToken %>" class="nav-link" data-premium="ai-coach"><i class="fas fa-robot"></i> AI Coach</a></li>
                <li class="nav-item"><a href="/settings?token=<%= navToken %>" class="nav-link"><i class="fas fa-cog"></i> Settings</a></li>
                <li class="nav-item"><a href="/subscription?token=<%= navToken %>" class="nav-link"><i class="fas fa-crown"></i> Subscription</a></li>
            </ul>
            
            <!-- Logout Section -->
            <div class="logout-section">
                <a href="/logout" class="logout-link" onclick="return confirmLogout()">
                    <i class="fas fa-sign-out-alt"></i> Logout
                </a>
            </div>
        </div>
        
        <!-- Main Content -->
        <div class="main-content">
            <div class="page-header">
                <h1 class="page-title">Challenges & Achievements</h1>
                <div>
                    <button class="btn btn-primary" onclick="showCreateChallengeModal()"><i class="fas fa-plus"></i> Create Challenge</button>
                </div>
            </div>
            
            <div class="stats-overview" id="statsOverview">
                <div class="loading">Loading your stats...</div>
            </div>
            
            <div class="content-grid">
                <div class="challenges-section">
                    <div class="section-header">
                        <h2 class="section-title">Challenges</h2>
                    </div>
                    
                    <div class="challenge-tabs">
                        <button class="tab-btn active" onclick="switchTab('active')">Active</button>
                        <button class="tab-btn" onclick="switchTab('suggested')">Suggested</button>
                        <button class="tab-btn" onclick="switchTab('completed')">Completed</button>
                        <button class="tab-btn" onclick="switchTab('templates')">Templates</button>
                    </div>
                    
                    <div style="display: flex; gap: 10px; margin-bottom: 1rem;">
                        <input type="text" id="challengeSearch" placeholder="Search challenges..." style="flex: 1; padding: 8px 12px; border: 1px solid rgba(255,255,255,0.2); border-radius: 20px; background: rgba(255,255,255,0.05); color: white;">
                        <select id="difficultyFilter" style="padding: 8px 12px; border: 1px solid rgba(255,255,255,0.2); border-radius: 20px; background: rgba(255,255,255,0.05); color: white;">
                            <option value="">All Levels</option>
                            <option value="beginner">Beginner</option>
                            <option value="intermediate">Intermediate</option>
                            <option value="advanced">Advanced</option>
                        </select>
                    </div>
                    
                    <div id="challengesContainer">
                        <div class="loading">Loading challenges...</div>
                    </div>
                </div>
                
                <div class="achievements-sidebar">
                    <h3 class="section-title">Leaderboard</h3>
                    <div id="leaderboard">
                        <div class="loading">Loading leaderboard...</div>
                    </div>
                    
                    <div style="margin-top: 2rem;">
                        <h4>Quick Templates</h4>
                        <div class="quick-actions-sidebar">
                            <button class="action-btn-small" onclick="createQuickChallenge('7-day-water')">
                                <i class="fas fa-tint"></i> 7-Day Water
                            </button>
                            <button class="action-btn-small" onclick="createQuickChallenge('push-up-week')">
                                <i class="fas fa-dumbbell"></i> Push-up Week
                            </button>
                            <button class="action-btn-small" onclick="createQuickChallenge('10k-steps')">
                                <i class="fas fa-walking"></i> 10K Steps
                            </button>
                        </div>
                    </div>
                    
                    <div style="margin-top: 2rem;">
                        <h4>Achievements</h4>
                        <div id="achievementBadges">
                            <div style="text-align: center; padding: 20px; color: rgba(255,255,255,0.7);">
                                <i class="fas fa-medal" style="font-size: 2rem; margin-bottom: 10px; opacity: 0.5;"></i>
                                <p>Complete challenges to earn badges!</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Create Challenge Modal -->
    <div id="createChallengeModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Create New Challenge</h3>
                <span class="close" onclick="closeModal('createChallengeModal')">&times;</span>
            </div>
            <form id="createChallengeForm">
                <div class="form-group">
                    <label>Challenge Title</label>
                    <input type="text" id="challengeTitle" maxlength="100" required>
                </div>
                <div class="form-group">
                    <label>Description</label>
                    <textarea id="challengeDescription" rows="3" maxlength="500" required></textarea>
                </div>
                <div class="form-group">
                    <label>Challenge Type</label>
                    <select id="challengeType" required onchange="updateCategoryOptions()">
                        <option value="workout">Workout Challenge</option>
                        <option value="nutrition">Nutrition Challenge</option>
                        <option value="habit">Habit Challenge</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Category</label>
                    <select id="challengeCategory" required>
                        <option value="strength">Strength Training</option>
                        <option value="cardio">Cardio & Endurance</option>
                        <option value="flexibility">Flexibility & Mobility</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Target</label>
                    <input type="number" id="challengeTarget" required>
                    <select id="challengeUnit" required>
                        <option value="workouts">Workouts</option>
                        <option value="minutes">Minutes</option>
                        <option value="reps">Reps</option>
                        <option value="steps">Steps</option>
                        <option value="calories">Calories</option>
                        <option value="glasses">Glasses</option>
                        <option value="meals">Meals</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Duration</label>
                    <input type="number" id="challengeDuration" value="7" required>
                    <select id="challengeDurationUnit">
                        <option value="days">Days</option>
                        <option value="weeks">Weeks</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Challenge Friend (Fitness ID or Email)</label>
                    <input type="text" id="challengeFriend" placeholder="Enter friend's Fitness ID or email" required>
                </div>
                <div class="form-group">
                    <label>Reward Points</label>
                    <input type="number" id="challengePoints" value="100" min="50" max="1000">
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-outline" onclick="closeModal('createChallengeModal')">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create & Send Challenge</button>
                </div>
            </form>
        </div>
    </div>
    
    <script>
        let currentTab = 'active';
        let userStats = null;
        
        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // GSAP Animations
            gsap.registerPlugin(ScrollTrigger);
            
            gsap.from(".page-header", {duration: 1, y: -50, opacity: 0, ease: "power2.out"});
            gsap.from(".stats-overview .stat-card", {duration: 1, y: 50, opacity: 0, stagger: 0.1, delay: 0.3, ease: "power2.out"});
            gsap.from(".content-grid > *", {duration: 1, y: 50, opacity: 0, stagger: 0.2, delay: 0.6, ease: "power2.out"});
            
            // Animate challenge cards when they appear
            gsap.set(".challenge-card", {y: 30, opacity: 0});
            gsap.to(".challenge-card", {y: 0, opacity: 1, duration: 0.6, stagger: 0.1, delay: 1, ease: "power2.out"});
            
            loadUserStats();
            loadChallenges('active');
            loadLeaderboard();
        });
        
        // Load user stats
        async function loadUserStats() {
            try {
                const response = await fetch('/api/challenges/stats');
                const data = await response.json();
                
                if (data.success) {
                    userStats = data.stats;
                    displayStats(data.stats);
                } else {
                    // Start fresh with zeros
                    const freshStats = {
                        challengesCompleted: 0,
                        currentStreak: 0,
                        achievementsUnlocked: 0,
                        totalPoints: 0
                    };
                    userStats = freshStats;
                    displayStats(freshStats);
                }
            } catch (error) {
                console.error('Error loading stats:', error);
                // Start fresh with zeros
                const freshStats = {
                    challengesCompleted: 0,
                    currentStreak: 0,
                    achievementsUnlocked: 0,
                    totalPoints: 0
                };
                userStats = freshStats;
                displayStats(freshStats);
            }
        }
        
        // Display user stats
        function displayStats(stats) {
            const container = document.getElementById('statsOverview');
            container.innerHTML = `
                <div class="stat-card">
                    <div class="stat-icon gold">
                        <i class="fas fa-trophy"></i>
                    </div>
                    <div class="stat-value">${stats.challengesCompleted}</div>
                    <div class="stat-label">Challenges Completed</div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-icon primary">
                        <i class="fas fa-fire"></i>
                    </div>
                    <div class="stat-value">${stats.currentStreak}</div>
                    <div class="stat-label">Day Streak</div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-icon bronze">
                        <i class="fas fa-medal"></i>
                    </div>
                    <div class="stat-value">${stats.achievementsUnlocked}</div>
                    <div class="stat-label">Achievements Unlocked</div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-icon silver">
                        <i class="fas fa-star"></i>
                    </div>
                    <div class="stat-value">${stats.totalPoints.toLocaleString()}</div>
                    <div class="stat-label">Points Earned</div>
                </div>
            `;
        }
        
        // Switch tabs
        function switchTab(tabName) {
            currentTab = tabName;
            
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
            
            if (tabName === 'templates') {
                displayTemplates();
            } else {
                loadChallenges(tabName);
            }
        }
        
        // Search and filter functionality
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('challengeSearch');
            const difficultyFilter = document.getElementById('difficultyFilter');
            
            if (searchInput) {
                searchInput.addEventListener('input', filterChallenges);
            }
            if (difficultyFilter) {
                difficultyFilter.addEventListener('change', filterChallenges);
            }
        });
        
        function filterChallenges() {
            const searchTerm = document.getElementById('challengeSearch')?.value.toLowerCase() || '';
            const difficulty = document.getElementById('difficultyFilter')?.value || '';
            const cards = document.querySelectorAll('.challenge-card');
            
            cards.forEach(card => {
                const title = card.querySelector('h3')?.textContent.toLowerCase() || '';
                const cardDifficulty = card.querySelector('.difficulty-badge')?.textContent || '';
                
                const matchesSearch = title.includes(searchTerm);
                const matchesDifficulty = !difficulty || cardDifficulty === difficulty;
                
                card.style.display = matchesSearch && matchesDifficulty ? 'block' : 'none';
            });
        }
        
        // Load challenges based on tab
        async function loadChallenges(type) {
            try {
                const response = await fetch(`/api/challenges?type=${type}`);
                const data = await response.json();
                
                if (data.success) {
                    displayChallenges(data.challenges || [], type);
                } else {
                    displayChallenges([], type);
                }
            } catch (error) {
                console.error('Error loading challenges:', error);
                displayChallenges([], type);
            }
        }
        
        // Display challenges
        function displayChallenges(challenges, type) {
            const container = document.getElementById('challengesContainer');
            
            if (type === 'templates') {
                displayTemplates();
                return;
            }
            
            if (challenges.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-trophy" style="font-size: 3rem; color: var(--gray); margin-bottom: 1rem;"></i>
                        <h3>No ${type} challenges</h3>
                        <p>${type === 'active' ? 'Join some challenges to get started!' : 'Check back later for new challenges.'}</p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = challenges.map(challenge => {
                const progress = challenge.userProgress?.percentage || 0;
                const circumference = 2 * Math.PI * 26;
                const strokeDashoffset = circumference - (progress / 100) * circumference;
                
                return `
                <div class="challenge-card" data-challenge-id="${challenge._id}">
                    <div class="challenge-header">
                        <div class="challenge-info">
                            <h3>${challenge.title}</h3>
                            <div class="challenge-meta">
                                ${challenge.daysLeft ? `<span><i class="fas fa-clock"></i> ${challenge.daysLeft}d left</span>` : ''}
                                <span><i class="fas fa-users"></i> ${challenge.participantCount || 0}</span>
                                <span class="difficulty-badge difficulty-${challenge.difficulty}">${challenge.difficulty}</span>
                            </div>
                        </div>
                        <div class="challenge-badge badge-${type === 'suggested' ? 'upcoming' : type}">
                            ${type === 'suggested' ? 'Suggested' : type === 'completed' ? 'Completed' : 'Active'}
                        </div>
                    </div>
                    
                    <p>${challenge.description}</p>
                    
                    ${type === 'active' && challenge.userProgress ? `
                        <div class="challenge-progress">
                            <div class="progress-ring">
                                <svg>
                                    <circle class="bg" cx="30" cy="30" r="26"></circle>
                                    <circle class="progress" cx="30" cy="30" r="26" 
                                            stroke-dasharray="${circumference}" 
                                            stroke-dashoffset="${strokeDashoffset}"></circle>
                                </svg>
                                <div class="progress-text">${Math.round(progress)}%</div>
                            </div>
                            <div class="progress-details">
                                <div class="progress-header">
                                    <span>${challenge.userProgress.current}/${challenge.target.value} ${challenge.target.unit}</span>
                                </div>
                                ${challenge.daysLeft ? `
                                    <div class="time-remaining">
                                        <i class="fas fa-hourglass-half"></i>
                                        <span>${challenge.daysLeft} days remaining</span>
                                    </div>
                                ` : ''}
                            </div>
                        </div>
                    ` : ''}
                    
                    <div class="challenge-reward">
                        <i class="fas fa-gift reward-icon"></i>
                        <span>Reward: ${challenge.rewards?.points || 100} points${challenge.rewards?.badges ? ' + Badge' : ''}</span>
                    </div>
                    
                    <div style="margin-top: 1rem; display: flex; gap: 10px;">
                        ${type === 'active' ? `
                            <button class="btn btn-success btn-small" onclick="logProgress('${challenge._id}', '${challenge.type}')">Log Progress</button>
                            <button class="btn btn-outline btn-small" onclick="shareChallenge('${challenge._id}')">Share</button>
                        ` : type === 'completed' ? `
                            <button class="btn btn-outline btn-small" onclick="viewStats('${challenge._id}')">View Stats</button>
                            <button class="btn btn-outline btn-small" onclick="shareAchievement('${challenge._id}')">Share</button>
                        ` : `
                            <button class="btn btn-primary btn-small" onclick="joinChallenge('${challenge._id}')">Join Challenge</button>
                            <button class="btn btn-outline btn-small" onclick="previewChallenge('${challenge._id}')">Preview</button>
                        `}
                    </div>
                </div>
            `}).join('');
        }
        
        // Display challenge templates
        function displayTemplates() {
            const container = document.getElementById('challengesContainer');
            const templates = [
                {
                    title: '7-Day Water Challenge',
                    description: 'Drink 8 glasses of water daily for a week',
                    type: 'habit',
                    category: 'hydration',
                    difficulty: 'beginner',
                    target: { value: 56, unit: 'glasses' },
                    duration: { value: 7, unit: 'days' },
                    points: 140
                },
                {
                    title: 'Push-up Week Challenge',
                    description: 'Complete push-ups every day for 7 days',
                    type: 'workout',
                    category: 'strength',
                    difficulty: 'intermediate',
                    target: { value: 7, unit: 'workouts' },
                    duration: { value: 7, unit: 'days' },
                    points: 200
                },
                {
                    title: '10K Steps Daily',
                    description: 'Walk 10,000 steps every day for a week',
                    type: 'habit',
                    category: 'cardio',
                    difficulty: 'intermediate',
                    target: { value: 70000, unit: 'steps' },
                    duration: { value: 7, unit: 'days' },
                    points: 180
                },
                {
                    title: 'Healthy Meals Week',
                    description: 'Log 3 healthy meals daily for 7 days',
                    type: 'nutrition',
                    category: 'nutrition',
                    difficulty: 'beginner',
                    target: { value: 21, unit: 'meals' },
                    duration: { value: 7, unit: 'days' },
                    points: 160
                }
            ];
            
            container.innerHTML = templates.map((template, index) => `
                <div class="challenge-card">
                    <div class="challenge-header">
                        <div class="challenge-info">
                            <h3>${template.title}</h3>
                            <div class="challenge-meta">
                                <span><i class="fas fa-calendar"></i> ${template.duration.value} ${template.duration.unit}</span>
                                <span class="difficulty-badge difficulty-${template.difficulty}">${template.difficulty}</span>
                            </div>
                        </div>
                        <div class="challenge-badge badge-upcoming">Template</div>
                    </div>
                    
                    <p>${template.description}</p>
                    
                    <div class="challenge-reward">
                        <i class="fas fa-gift reward-icon"></i>
                        <span>Reward: ${template.points} points + Badge</span>
                    </div>
                    
                    <div style="margin-top: 1rem;">
                        <button class="btn btn-primary btn-small" onclick="useTemplate(${index})">Use Template</button>
                        <button class="btn btn-outline btn-small" onclick="customizeTemplate(${index})">Customize</button>
                    </div>
                </div>
            `).join('');
        }
        
        // Load leaderboard
        async function loadLeaderboard() {
            try {
                const response = await fetch('/api/challenges/leaderboard');
                const data = await response.json();
                
                if (data.success && data.leaderboard.length > 0) {
                    displayLeaderboard(data.leaderboard);
                } else {
                    // Show empty state for fresh start
                    displayLeaderboard([]);
                }
            } catch (error) {
                console.error('Error loading leaderboard:', error);
                displayLeaderboard([]);
            }
        }
        
        // Display leaderboard
        function displayLeaderboard(leaderboard) {
            const container = document.getElementById('leaderboard');
            
            if (leaderboard.length === 0) {
                container.innerHTML = `
                    <div style="text-align: center; padding: 20px; color: rgba(255,255,255,0.7);">
                        <i class="fas fa-trophy" style="font-size: 2rem; margin-bottom: 10px; opacity: 0.5;"></i>
                        <p>Start completing challenges to see the leaderboard!</p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = leaderboard.map((user, index) => `
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px; padding: 8px; border-radius: 8px; ${user.name === '<%= user.fullName %>' ? 'background: rgba(108, 99, 255, 0.1); color: var(--primary); font-weight: 600;' : 'color: rgba(255,255,255,0.8);'}">
                    <div style="display: flex; align-items: center; gap: 10px;">
                        <span style="${index < 3 ? 'color: ' + (index === 0 ? 'var(--gold)' : index === 1 ? 'var(--silver)' : 'var(--bronze)') + ';' : ''}">
                            ${index < 3 ? (index === 0 ? '🥇' : index === 1 ? '🥈' : '🥉') : user.rank + '.'}
                        </span>
                        <span>${user.name}</span>
                    </div>
                    <span style="font-weight: 600;">${user.points.toLocaleString()} pts</span>
                </div>
            `).join('');
        }
        
        // Join challenge
        async function joinChallenge(challengeId) {
            try {
                const response = await fetch(`/api/challenges/${challengeId}/join`, {
                    method: 'POST'
                });
                const data = await response.json();
                
                if (data.success) {
                    showNotification('Successfully joined challenge!', 'success');
                    loadChallenges(currentTab);
                    loadUserStats();
                } else {
                    showNotification(data.error, 'error');
                }
            } catch (error) {
                console.error('Join challenge error:', error);
                showNotification('Failed to join challenge', 'error');
            }
        }
        
        // Log progress
        async function logProgress(challengeId, challengeType) {
            const progress = prompt(`Enter your progress (e.g., number of reps, minutes, glasses):`);
            if (!progress || isNaN(progress)) return;
            
            try {
                const response = await fetch(`/api/challenges/${challengeId}/progress`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ progress: parseFloat(progress) })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showNotification('Progress logged successfully!', 'success');
                    
                    // Celebration animation for milestones
                    if (data.milestone) {
                        celebrateProgress(data.milestone);
                    }
                    
                    loadChallenges(currentTab);
                    loadUserStats();
                } else {
                    showNotification(data.error, 'error');
                }
            } catch (error) {
                console.error('Log progress error:', error);
                showNotification('Failed to log progress', 'error');
            }
        }
        
        // Quick actions
        function logWorkout() {
            window.location.href = '/workouts';
        }
        
        function logWater() {
            window.location.href = '/nutrition';
        }
        
        function createQuickChallenge(type) {
            const templates = {
                '7-day-water': {
                    title: '7-Day Water Challenge',
                    description: 'Drink 8 glasses of water daily',
                    type: 'habit',
                    category: 'hydration',
                    target: { value: 56, unit: 'glasses' },
                    duration: { value: 7, unit: 'days' },
                    points: 140
                },
                'push-up-week': {
                    title: 'Push-up Week',
                    description: 'Do push-ups every day for a week',
                    type: 'workout',
                    category: 'strength',
                    target: { value: 7, unit: 'workouts' },
                    duration: { value: 7, unit: 'days' },
                    points: 200
                },
                '10k-steps': {
                    title: '10K Steps Challenge',
                    description: 'Walk 10,000 steps daily for a week',
                    type: 'habit',
                    category: 'cardio',
                    target: { value: 70000, unit: 'steps' },
                    duration: { value: 7, unit: 'days' },
                    points: 180
                }
            };
            
            const template = templates[type];
            if (template) {
                // Pre-fill form with template data
                document.getElementById('challengeTitle').value = template.title;
                document.getElementById('challengeDescription').value = template.description;
                document.getElementById('challengeType').value = template.type;
                document.getElementById('challengeCategory').value = template.category;
                document.getElementById('challengeTarget').value = template.target.value;
                document.getElementById('challengeUnit').value = template.target.unit;
                document.getElementById('challengeDuration').value = template.duration.value;
                document.getElementById('challengeDurationUnit').value = template.duration.unit;
                document.getElementById('challengePoints').value = template.points;
                
                showCreateChallengeModal();
            }
        }
        
        function useTemplate(index) {
            createQuickChallenge(['7-day-water', 'push-up-week', '10k-steps', 'healthy-meals'][index]);
        }
        
        function customizeTemplate(index) {
            useTemplate(index);
        }
        
        function shareChallenge(challengeId) {
            if (navigator.share) {
                navigator.share({
                    title: 'Join my fitness challenge!',
                    text: 'I\'m doing a fitness challenge. Want to join me?',
                    url: window.location.href
                });
            } else {
                showNotification('Challenge shared to clipboard!', 'success');
            }
        }
        
        function shareAchievement(challengeId) {
            if (navigator.share) {
                navigator.share({
                    title: 'Challenge Completed!',
                    text: 'I just completed a fitness challenge! 🏆',
                    url: window.location.href
                });
            } else {
                showNotification('Achievement shared!', 'success');
            }
        }
        
        function previewChallenge(challengeId) {
            showNotification('Challenge preview coming soon!', 'info');
        }
        
        function viewStats(challengeId) {
            showNotification('Challenge stats coming soon!', 'info');
        }
        
        function viewDetails(challengeId) {
            showNotification('Challenge details coming soon!', 'info');
        }
        
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            notification.style.cssText = `
                position: fixed; top: 20px; right: 20px; padding: 15px 20px;
                border-radius: 8px; color: white; z-index: 10000; font-weight: 500;
                background-color: ${type === 'success' ? '#28A745' : type === 'error' ? '#DC3545' : '#17A2B8'};
                transform: translateX(100%);
                transition: transform 0.3s ease;
            `;
            
            document.body.appendChild(notification);
            setTimeout(() => notification.style.transform = 'translateX(0)', 100);
            setTimeout(() => {
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }
        
        function celebrateProgress(milestone) {
            // Create confetti effect
            const colors = ['#6C63FF', '#FF6584', '#28A745', '#FFD700'];
            
            for (let i = 0; i < 50; i++) {
                const confetti = document.createElement('div');
                confetti.style.cssText = `
                    position: fixed;
                    width: 10px;
                    height: 10px;
                    background: ${colors[Math.floor(Math.random() * colors.length)]};
                    top: -10px;
                    left: ${Math.random() * 100}%;
                    z-index: 10000;
                    pointer-events: none;
                    border-radius: 50%;
                `;
                
                document.body.appendChild(confetti);
                
                gsap.to(confetti, {
                    y: window.innerHeight + 20,
                    rotation: Math.random() * 360,
                    duration: 3 + Math.random() * 2,
                    ease: 'power2.out',
                    onComplete: () => confetti.remove()
                });
            }
            
            // Show milestone message
            setTimeout(() => {
                showNotification(`🎉 Milestone reached: ${milestone}!`, 'success');
            }, 500);
        }
        
        // Create challenge modal
        function showCreateChallengeModal() {
            document.getElementById('createChallengeModal').style.display = 'block';
        }
        
        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }
        
        // Create challenge form
        document.getElementById('createChallengeForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = {
                title: document.getElementById('challengeTitle').value,
                description: document.getElementById('challengeDescription').value,
                type: document.getElementById('challengeType').value,
                category: document.getElementById('challengeCategory').value,
                target: {
                    value: parseInt(document.getElementById('challengeTarget').value),
                    unit: document.getElementById('challengeUnit').value
                },
                duration: {
                    value: parseInt(document.getElementById('challengeDuration').value),
                    unit: document.getElementById('challengeDurationUnit').value
                },
                friendIdentifier: document.getElementById('challengeFriend').value,
                points: parseInt(document.getElementById('challengePoints').value)
            };
            
            try {
                const response = await fetch('/api/challenges/create', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showNotification('Challenge created and invitation sent!', 'success');
                    closeModal('createChallengeModal');
                    document.getElementById('createChallengeForm').reset();
                    loadChallenges(currentTab);
                } else {
                    showNotification(data.error, 'error');
                }
            } catch (error) {
                console.error('Create challenge error:', error);
                showNotification('Failed to create challenge', 'error');
            }
        });
        
        function updateCategoryOptions() {
            const type = document.getElementById('challengeType').value;
            const categorySelect = document.getElementById('challengeCategory');
            
            categorySelect.innerHTML = '';
            
            if (type === 'workout') {
                categorySelect.innerHTML = `
                    <option value="strength">Strength Training</option>
                    <option value="cardio">Cardio & Endurance</option>
                    <option value="flexibility">Flexibility & Mobility</option>
                `;
            } else if (type === 'nutrition') {
                categorySelect.innerHTML = `
                    <option value="nutrition">Healthy Eating</option>
                `;
            } else if (type === 'habit') {
                categorySelect.innerHTML = `
                    <option value="hydration">Hydration</option>
                    <option value="sleep">Sleep Quality</option>
                    <option value="mindfulness">Mindfulness</option>
                `;
            }
        }
        
        function confirmLogout() {
            return confirm('Are you sure you want to logout?');
        }
        
        // Close modals when clicking outside
        window.onclick = function(event) {
            const modals = document.querySelectorAll('.modal');
            modals.forEach(modal => {
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });
        }
    </script>
    
    <script src="/js/voice-assistant-siri.js"></script>
</body>
</html>