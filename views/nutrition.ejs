<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nutrition - Fit-With-AI</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #6C63FF;
            --secondary: #4D44DB;
            --accent: #FF6584;
            --light: #F8F9FA;
            --dark: #343A40;
            --success: #28A745;
            --warning: #FFC107;
            --danger: #DC3545;
            --gray: #6C757D;
            --light-gray: #E9ECEF;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            background: radial-gradient(ellipse at top, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
            color: #ffffff;
            overflow-x: hidden;
            min-height: 100vh;
            margin: 0;
            padding: 0;
        }
        
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 40% 40%, rgba(120, 219, 255, 0.2) 0%, transparent 50%);
            pointer-events: none;
            z-index: -1;
        }
        
        .dashboard-container {
            display: grid;
            grid-template-columns: 280px 1fr;
            min-height: 100vh;
            gap: 20px;
            padding: 20px;
        }
        
        .sidebar {
            background: transparent;
            border: none;
            padding: 30px 20px;
            position: sticky;
            top: 20px;
            height: fit-content;
        }
        
        .sidebar-header {
            display: flex;
            align-items: center;
            margin-bottom: 2rem;
            padding: 0 1rem;
        }
        
        .sidebar-header img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }
        
        .user-name {
            font-weight: 600;
            margin: 0;
        }
        
        .user-plan {
            font-size: 0.8rem;
            color: var(--primary);
            background: rgba(108, 99, 255, 0.1);
            padding: 2px 8px;
            border-radius: 20px;
            margin-top: 5px;
        }
        
        .nav-menu {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .nav-item {
            margin-bottom: 5px;
        }
        
        .nav-link {
            display: flex;
            align-items: center;
            padding: 12px 15px;
            color: rgba(255, 255, 255, 0.7);
            text-decoration: none;
            border-radius: 15px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .nav-link::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
            transition: left 0.5s;
        }
        
        .nav-link:hover::before {
            left: 100%;
        }
        
        .nav-link:hover, .nav-link.active {
            background: rgba(108, 99, 255, 0.2);
            color: #ffffff;
            transform: translateX(5px);
        }
        
        .nav-link i {
            margin-right: 10px;
            font-size: 1.2rem;
        }        
        .logout-section {
            margin-top: 2rem;
            padding-top: 1rem;
            border-top: 1px solid var(--light-gray);
        }
        
        .logout-link {
            display: flex;
            align-items: center;
            padding: 12px 1rem;
            color: var(--danger);
            text-decoration: none;
            border-radius: 8px;
            transition: all 0.3s ease;
            font-weight: 500;
        }
        
        .logout-link:hover {
            background: rgba(220, 53, 69, 0.1);
            color: var(--danger);
        }
        
        .logout-link i {
            margin-right: 10px;
            font-size: 1.2rem;
        }
        
        .main-content {
            display: flex;
            flex-direction: column;
            gap: 25px;
        }
        
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }
        
        .page-title {
            font-size: 2rem;
            font-weight: 600;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .nutrition-summary {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 2rem;
        }
        
        .nutrition-card {
            background: transparent;
            border: none;
            padding: 1.5rem;
            text-align: center;
            position: relative;
        }
        
        .nutrition-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(108, 99, 255, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(108, 99, 255, 0.08) 100%);
            border-radius: 12px;
            z-index: -1;
        }
        
        .nutrition-value {
            font-size: 2rem;
            font-weight: 600;
            margin: 0.5rem 0;
        }
        
        .nutrition-label {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
        }
        
        .progress-ring {
            position: relative;
            width: 100px;
            height: 100px;
            margin: 0 auto 1rem;
        }
        
        .progress-ring-circle {
            transform: rotate(-90deg);
            transform-origin: 50% 50%;
            stroke: var(--primary);
            stroke-width: 6;
            stroke-dasharray: 283;
            stroke-dashoffset: 0;
            fill: none;
        }
        
        .progress-ring-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-weight: 600;
        }
        
        .macros-section {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 20px;
            margin-bottom: 2rem;
        }
        
        .macros-chart {
            background: transparent;
            border: none;
            padding: 1.5rem;
            position: relative;
        }
        
        .macros-chart::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(108, 99, 255, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(108, 99, 255, 0.08) 100%);
            border-radius: 12px;
            z-index: -1;
        }
        
        .macros-details {
            background: transparent;
            border: none;
            padding: 1.5rem;
            position: relative;
        }
        
        .macros-details::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(108, 99, 255, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(108, 99, 255, 0.08) 100%);
            border-radius: 12px;
            z-index: -1;
        }
        
        .macro-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
        }
        
        .macro-label {
            display: flex;
            align-items: center;
        }
        
        .macro-color {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 10px;
        }
        
        .macro-name {
            font-weight: 500;
        }
        
        .macro-value {
            font-weight: 600;
        }
        
        .meals-section {
            background: transparent;
            border: none;
            padding: 1.5rem;
            margin-bottom: 2rem;
            position: relative;
        }
        
        .meals-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(108, 99, 255, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(108, 99, 255, 0.08) 100%);
            border-radius: 12px;
            z-index: -1;
        }
        
        .meal-tabs {
            display: flex;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            margin-bottom: 1.5rem;
        }
        
        .meal-tab {
            padding: 10px 20px;
            cursor: pointer;
            border-bottom: 3px solid transparent;
        }
        
        .meal-tab.active {
            border-bottom: 3px solid var(--primary);
            color: var(--primary);
            font-weight: 500;
        }
        
        .meal-item {
            display: flex;
            justify-content: space-between;
            padding: 15px 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .meal-item:last-child {
            border-bottom: none;
        }
        
        .meal-info {
            display: flex;
            align-items: center;
        }
        
        .meal-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: rgba(108, 99, 255, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
            color: var(--primary);
        }
        
        .meal-name {
            font-weight: 500;
        }
        
        .meal-time {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.8rem;
        }
        
        .meal-calories {
            font-weight: 600;
        }
        
        .btn {
            padding: 8px 16px;
            border-radius: 8px;
            font-family: 'Poppins', sans-serif;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .btn-primary {
            background: var(--primary);
            color: white;
            border: none;
        }
        
        .btn-outline {
            background: white;
            color: var(--primary);
            border: 1px solid var(--primary);
        }
        
        .quick-actions {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 15px;
            margin-bottom: 2rem;
        }
        
        .action-btn {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            background: transparent;
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            color: rgba(255, 255, 255, 0.8);
            position: relative;
        }
        
        .action-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(108, 99, 255, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(108, 99, 255, 0.08) 100%);
            border-radius: 12px;
            z-index: -1;
        }
        
        .action-btn:hover {
            background: var(--primary);
            color: white;
            transform: translateY(-2px);
        }
        
        .action-btn i {
            font-size: 1.5rem;
            margin-bottom: 8px;
        }
        
        .nutrition-insights {
            background: transparent;
            border: none;
            padding: 1.5rem;
            margin-bottom: 2rem;
            position: relative;
        }
        
        .nutrition-insights::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(108, 99, 255, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(108, 99, 255, 0.08) 100%);
            border-radius: 12px;
            z-index: -1;
        }
        
        .insights-container {
            margin-top: 1rem;
        }
        
        .insight-item {
            display: flex;
            align-items: flex-start;
            padding: 15px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            margin-bottom: 10px;
        }
        
        .insight-item i {
            color: var(--primary);
            margin-right: 10px;
            margin-top: 2px;
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        
        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 0;
            border-radius: 12px;
            width: 90%;
            max-width: 500px;
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px;
            border-bottom: 1px solid var(--light-gray);
        }
        
        .close {
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            color: var(--gray);
        }
        
        .form-group {
            margin-bottom: 20px;
            padding: 0 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }
        
        .form-group input, .form-group select {
            width: 100%;
            padding: 10px;
            border: 1px solid var(--light-gray);
            border-radius: 8px;
            font-family: 'Poppins', sans-serif;
            box-sizing: border-box;
        }
        
        .search-results {
            max-height: 200px;
            overflow-y: auto;
            border: 1px solid var(--light-gray);
            border-top: none;
            border-radius: 0 0 8px 8px;
        }
        
        .food-result {
            padding: 10px;
            cursor: pointer;
            border-bottom: 1px solid var(--light-gray);
            display: flex;
            justify-content: space-between;
        }
        
        .food-result:hover {
            background: var(--light);
        }
        
        .form-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            padding: 20px;
            border-top: 1px solid var(--light-gray);
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: var(--gray);
        }
        
        .goal-reached {
            background: linear-gradient(135deg, #28A745, #20C997);
            color: white;
        }
        
        .goal-reached .nutrition-label,
        .goal-reached .nutrition-value {
            color: white;
        }
        
        .goal-adjustment-alert {
            background: #FFF3CD;
            border: 1px solid #FFEAA7;
            color: #856404;
            padding: 10px 15px;
            border-radius: 8px;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
        }
        
        .goal-adjustment-alert i {
            margin-right: 10px;
        }
        
        .streak-badge {
            background: linear-gradient(135deg, #FF6B6B, #FF8E53);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .suggestion-item {
            display: flex;
            align-items: flex-start;
            padding: 15px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            margin-bottom: 10px;
        }
        
        /* New Feature Styles */
        .nutrition-header {
            display: grid;
            grid-template-columns: auto 1fr;
            gap: 20px;
            margin-bottom: 2rem;
            align-items: center;
        }
        
        .nutrition-score-card {
            text-align: center;
        }
        
        .score-circle {
            position: relative;
            display: inline-block;
        }
        
        .score-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 1.5rem;
            font-weight: 600;
            color: white;
        }
        
        .score-label {
            margin-top: 10px;
            color: rgba(255, 255, 255, 0.7);
        }
        
        .streak-badges {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        
        .achievement-badges {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        
        .badge {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
        }
        
        .water-tracker {
            background: transparent;
            border: none;
            padding: 1.5rem;
            margin-bottom: 2rem;
            position: relative;
        }
        
        .water-tracker::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(40, 167, 69, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(40, 167, 69, 0.08) 100%);
            border-radius: 12px;
            z-index: -1;
        }
        
        .water-bottle-container {
            display: flex;
            align-items: center;
            gap: 20px;
        }
        
        .water-bottle {
            width: 60px;
            height: 120px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 0 0 30px 30px;
            position: relative;
            overflow: hidden;
        }
        
        .water-fill {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(to top, #00bcd4, #4dd0e1);
            transition: height 0.5s ease;
        }
        
        .water-level {
            position: absolute;
            top: -30px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 0.9rem;
            font-weight: 600;
            color: white;
        }
        
        .water-controls {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        .water-btn {
            padding: 8px 16px;
            background: rgba(0, 188, 212, 0.2);
            border: 1px solid #00bcd4;
            color: #00bcd4;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .water-btn:hover {
            background: #00bcd4;
            color: white;
        }
        
        .macro-wheel-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
        }
        
        .macro-wheel {
            width: 200px;
            height: 200px;
            border-radius: 50%;
            position: relative;
            background: conic-gradient(
                #6C63FF 0deg 120deg,
                #FF6584 120deg 282deg,
                #28A745 282deg 360deg
            );
        }
        
        .wheel-center {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(26, 26, 46, 0.9);
            width: 80px;
            height: 80px;
            border-radius: 50%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }
        
        .remaining-calories {
            font-size: 1.5rem;
            font-weight: 600;
            color: white;
        }
        
        .remaining-label {
            font-size: 0.8rem;
            color: rgba(255, 255, 255, 0.7);
        }
        
        .macro-zones {
            display: flex;
            gap: 10px;
        }
        
        .zone {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
        }
        
        .zone.deficit {
            background: rgba(220, 53, 69, 0.2);
            color: var(--danger);
        }
        
        .zone.optimal {
            background: rgba(40, 167, 69, 0.2);
            color: var(--success);
        }
        
        .zone.excess {
            background: rgba(255, 193, 7, 0.2);
            color: var(--warning);
        }
        
        .zone.active {
            background: var(--success);
            color: white;
        }
        
        .smart-suggestions {
            background: transparent;
            border: none;
            padding: 1.5rem;
            margin-bottom: 2rem;
            position: relative;
        }
        
        .smart-suggestions::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(255, 101, 132, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(255, 101, 132, 0.08) 100%);
            border-radius: 12px;
            z-index: -1;
        }
        
        .suggestion-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
        }
        
        .suggestion-card {
            background: rgba(255, 255, 255, 0.05);
            padding: 20px;
            border-radius: 15px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            position: relative;
            overflow: hidden;
        }
        
        .suggestion-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
        }
        
        .suggestion-icon {
            font-size: 1.8rem;
            margin-bottom: 10px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .suggestion-text {
            font-weight: 600;
            margin-bottom: 15px;
            color: white;
            font-size: 1rem;
        }
        
        .meal-timeline {
            background: transparent;
            border: none;
            padding: 1.5rem;
            margin-bottom: 2rem;
            position: relative;
        }
        
        .meal-timeline::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(108, 99, 255, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(108, 99, 255, 0.08) 100%);
            border-radius: 12px;
            z-index: -1;
        }
        
        .timeline {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        
        .timeline-item {
            display: grid;
            grid-template-columns: 80px 1fr auto;
            gap: 15px;
            align-items: center;
            padding: 10px;
            border-radius: 8px;
        }
        
        .timeline-item.completed {
            background: rgba(40, 167, 69, 0.1);
            border-left: 4px solid var(--success);
        }
        
        .timeline-item.suggested {
            background: rgba(255, 193, 7, 0.1);
            border-left: 4px solid var(--warning);
        }
        
        .timeline-time {
            font-weight: 600;
            color: white;
        }
        
        .timeline-meal {
            color: rgba(255, 255, 255, 0.9);
        }
        
        .timeline-optimal {
            font-size: 0.8rem;
            color: var(--success);
        }
        
        .nutrition-heatmap {
            background: transparent;
            border: none;
            padding: 1.5rem;
            margin-bottom: 2rem;
            position: relative;
        }
        
        .nutrition-heatmap::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(108, 99, 255, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(108, 99, 255, 0.08) 100%);
            border-radius: 12px;
            z-index: -1;
        }
        
        .heatmap-calendar {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 10px;
            margin-bottom: 15px;
        }
        
        .heatmap-day {
            width: 60px;
            height: 60px;
            border-radius: 12px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            color: white;
            position: relative;
            cursor: pointer;
            transition: transform 0.3s ease;
        }
        
        .heatmap-day:hover {
            transform: scale(1.1);
        }
        
        .heatmap-day.poor {
            background: linear-gradient(135deg, #dc3545, #c82333);
        }
        
        .heatmap-day.average {
            background: linear-gradient(135deg, #ffc107, #e0a800);
        }
        
        .heatmap-day.good {
            background: linear-gradient(135deg, #17a2b8, #138496);
        }
        
        .heatmap-day.excellent {
            background: linear-gradient(135deg, #28a745, #1e7e34);
        }
        
        .day-score {
            font-size: 0.7rem;
            margin-top: 2px;
        }
        
        .heatmap-legend {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
        }
        
        .legend-item {
            display: flex;
            align-items: center;
            font-size: 0.8rem;
            color: rgba(255, 255, 255, 0.7);
        }
        
        .legend-item::before {
            content: '';
            width: 12px;
            height: 12px;
            border-radius: 3px;
            margin-right: 6px;
        }
        
        .legend-item.poor::before {
            background: #dc3545;
        }
        
        .legend-item.average::before {
            background: #ffc107;
        }
        
        .legend-item.good::before {
            background: #17a2b8;
        }
        
        .legend-item.excellent::before {
            background: #28a745;
        }
        
        .progress-photos {
            background: transparent;
            border: none;
            padding: 1.5rem;
            margin-bottom: 2rem;
            position: relative;
        }
        
        .progress-photos::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(255, 101, 132, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(255, 101, 132, 0.08) 100%);
            border-radius: 12px;
            z-index: -1;
        }
        
        .photo-comparison {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
        }
        
        .photo-slider {
            position: relative;
            width: 300px;
            height: 200px;
            border-radius: 12px;
            overflow: hidden;
        }
        
        .photo-before,
        .photo-after {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
        
        .photo-after {
            clip-path: inset(0 50% 0 0);
        }
        
        .photo-before img,
        .photo-after img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .photo-label {
            position: absolute;
            bottom: 10px;
            left: 10px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.8rem;
        }
        
        .suggestion-item i {
            color: var(--primary);
            margin-right: 15px;
            margin-top: 2px;
        }
        
        .suggested-foods {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 8px;
        }
        
        .food-tag {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            padding: 6px 14px;
            border-radius: 20px;
            font-size: 0.8rem;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.2);
            font-weight: 500;
            box-shadow: 0 2px 8px rgba(108, 99, 255, 0.3);
        }
        
        .food-tag:hover {
            background: linear-gradient(135deg, var(--secondary), var(--primary));
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(108, 99, 255, 0.4);
            border-color: rgba(255, 255, 255, 0.4);
        }
        
        @media (max-width: 768px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                padding: 1rem;
            }
            
            .main-content {
                padding: 1rem;
            }
            
            .nutrition-summary {
                grid-template-columns: 1fr 1fr;
            }
            
            .macros-section {
                grid-template-columns: 1fr;
            }
            
            .quick-actions {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"></script>
</head>
<body>
    <div class="dashboard-container">
        <!-- Sidebar Navigation -->
        <div class="sidebar">
            <div class="sidebar-header">
                <img src="https://ui-avatars.com/api/?name=<%= user.fullName %>&background=6C63FF&color=fff" alt="User Avatar">
                <div>
                    <h3 class="user-name"><%= user.fullName %></h3>
                    <span class="user-plan">Premium Plan</span>
                </div>
            </div>
            
             <ul class="nav-menu">
                <li class="nav-item"><a href="/dashboard?token=<%= navToken %>" class="nav-link"><i class="fas fa-home"></i> Dashboard</a></li>
                <li class="nav-item"><a href="/workouts?token=<%= navToken %>" class="nav-link"><i class="fas fa-dumbbell"></i> Workouts</a></li>
                <li class="nav-item"><a href="/progress?token=<%= navToken %>" class="nav-link"><i class="fas fa-chart-line"></i> Progress</a></li>
                <li class="nav-item"><a href="/nutrition?token=<%= navToken %>" class="nav-link active"><i class="fas fa-utensils"></i> Nutrition</a></li>
                <li class="nav-item"><a href="/nutriscan?token=<%= navToken %>" class="nav-link"><i class="fas fa-qrcode"></i> NutriScan</a></li>
                <li class="nav-item"><a href="/meal-planner?token=<%= navToken %>" class="nav-link"><i class="fas fa-calendar-check"></i> Meal Planner</a></li>
                <li class="nav-item"><a href="/challenges?token=<%= navToken %>" class="nav-link"><i class="fas fa-trophy"></i> Challenges</a></li>
                <li class="nav-item"><a href="/health?token=<%= navToken %>" class="nav-link"><i class="fas fa-heartbeat"></i> Health Metrics</a></li>
                <li class="nav-item"><a href="/biometrics?token=<%= navToken %>" class="nav-link"><i class="fas fa-chart-bar"></i> Biometrics</a></li>
                <li class="nav-item"><a href="/schedule?token=<%= navToken %>" class="nav-link"><i class="fas fa-calendar-alt"></i> Schedule</a></li>
                <li class="nav-item"><a href="/community?token=<%= navToken %>" class="nav-link"><i class="fas fa-users"></i> Community</a></li>
                <li class="nav-item"><a href="/chat?token=<%= navToken %>" class="nav-link"><i class="fas fa-comments"></i> Chat</a></li>
                <li class="nav-item"><a href="/ai-coach?token=<%= navToken %>" class="nav-link"><i class="fas fa-robot"></i> AI Coach</a></li>
                <li class="nav-item"><a href="/settings?token=<%= navToken %>" class="nav-link"><i class="fas fa-cog"></i> Settings</a></li>
                <li class="nav-item"><a href="/subscription?token=<%= navToken %>" class="nav-link"><i class="fas fa-crown"></i> Subscription</a></li>
            </ul>
            
            <!-- Logout Section -->
            <div class="logout-section">
                <a href="/logout" class="logout-link" onclick="return confirmLogout()">
                    <i class="fas fa-sign-out-alt"></i> Logout
                </a>
            </div>
        </div>
        
        <!-- Main Content -->
        <div class="main-content">
            <div class="page-header">
                <h1 class="page-title">Nutrition</h1>
                <div>
                    <button class="btn btn-primary" onclick="showLogFoodModal()"><i class="fas fa-plus"></i> Log Food</button>
                    <button class="btn btn-outline" onclick="openNutriScan()" style="margin-left: 10px;"><i class="fas fa-camera"></i> Scan</button>
                </div>
            </div>
            
            <!-- Nutrition Score & Streak -->
            <div class="nutrition-header">
                <div class="nutrition-score-card">
                    <div class="score-circle">
                        <svg width="80" height="80" viewBox="0 0 80 80">
                            <circle cx="40" cy="40" r="35" stroke="rgba(255,255,255,0.2)" stroke-width="6" fill="none"/>
                            <circle cx="40" cy="40" r="35" stroke="#28A745" stroke-width="6" fill="none" 
                                stroke-dasharray="220" stroke-dashoffset="220" stroke-linecap="round" id="scoreCircle"/>
                        </svg>
                        <div class="score-text" id="nutritionScore">0</div>
                    </div>
                    <div class="score-label">Nutrition Score</div>
                </div>
                <div class="streak-badges" id="streakBadges">
                    <div class="streak-badge" id="streakDisplay" style="display: none;">🔥 0 day streak!</div>
                    <div class="achievement-badges" id="achievementBadges">
                        <span class="badge" style="opacity: 0.3;">🏆 Start logging to unlock</span>
                    </div>
                </div>
            </div>
            
            <!-- Water Intake Tracker -->
            <div class="water-tracker">
                <h3>💧 Water Intake</h3>
                <div class="water-bottle-container">
                    <div class="water-bottle">
                        <div class="water-fill" style="height: 0%;"></div>
                        <div class="water-level">0L / 2.5L</div>
                    </div>
                    <div class="water-controls">
                        <button class="water-btn" onclick="addWater(250)">+250ml</button>
                        <button class="water-btn" onclick="addWater(500)">+500ml</button>
                        <button class="water-btn" onclick="addWater(750)">+750ml</button>
                    </div>
                </div>
            </div>
            
            <h2>Today's Summary</h2>
            <div class="nutrition-summary" id="nutritionSummary">
                <div class="loading">Loading nutrition data...</div>
            </div>
            
            <div class="macros-section">
                <div class="macros-chart">
                    <h3>Macro Balance Wheel</h3>
                    <div class="macro-wheel-container">
                        <div class="macro-wheel" id="macroWheel">
                            <div class="wheel-center">
                                <div class="remaining-calories" id="remainingCalories">0</div>
                                <div class="remaining-label">cal consumed</div>
                            </div>
                        </div>
                        <div class="macro-zones">
                            <div class="zone deficit active" id="calorieZone">Start Logging</div>
                        </div>
                    </div>
                </div>
                
                <div class="macros-details">
                    <h3>Macros Breakdown</h3>
                    <div class="macro-item">
                        <div class="macro-label">
                            <div class="macro-color" style="background: #6C63FF;"></div>
                            <span class="macro-name">Protein</span>
                        </div>
                        <div class="macro-value" id="proteinValue">0g (0%)</div>
                    </div>
                    
                    <div class="macro-item">
                        <div class="macro-label">
                            <div class="macro-color" style="background: #FF6584;"></div>
                            <span class="macro-name">Carbohydrates</span>
                        </div>
                        <div class="macro-value" id="carbsValue">0g (0%)</div>
                    </div>
                    
                    <div class="macro-item">
                        <div class="macro-label">
                            <div class="macro-color" style="background: #28A745;"></div>
                            <span class="macro-name">Fat</span>
                        </div>
                        <div class="macro-value" id="fatValue">0g (0%)</div>
                    </div>
                    
                    <div class="macro-item">
                        <div class="macro-label">
                            <div class="macro-color" style="background: #E9ECEF;"></div>
                            <span class="macro-name">Fiber</span>
                        </div>
                        <div class="macro-value" id="fiberValue">0g</div>
                    </div>
                    
                    <div class="macro-item">
                        <div class="macro-label">
                            <div class="macro-color" style="background: #E9ECEF;"></div>
                            <span class="macro-name">Sugar</span>
                        </div>
                        <div class="macro-value" id="sugarValue">0g</div>
                    </div>
                </div>
            </div>
            
            <!-- Smart Meal Suggestions -->
            <div class="smart-suggestions">
                <h3>🎯 Smart Suggestions</h3>
                <div class="suggestion-cards" id="suggestionCards">
                    <div class="suggestion-card">
                        <div class="suggestion-icon">🍽️</div>
                        <div class="suggestion-text">Start logging your meals to get personalized suggestions!</div>
                        <div class="suggested-foods">
                            <span class="food-tag" onclick="quickLog('Banana')">Banana</span>
                            <span class="food-tag" onclick="quickLog('Apple')">Apple</span>
                            <span class="food-tag" onclick="quickLog('Protein Shake')">Protein Shake</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Enhanced Quick Actions -->
            <div class="quick-actions">
                <button class="action-btn" onclick="openCamera()">
                    <i class="fas fa-camera"></i>
                    <span>Photo Log</span>
                </button>
                <button class="action-btn" onclick="openBarcodeScanner()">
                    <i class="fas fa-barcode"></i>
                    <span>Scan Barcode</span>
                </button>
                <button class="action-btn" onclick="showLogFoodModal()">
                    <i class="fas fa-plus"></i>
                    <span>Log Meal</span>
                </button>
                <button class="action-btn" onclick="openMealPlanner()">
                    <i class="fas fa-calendar"></i>
                    <span>Meal Plan</span>
                </button>
                <button class="action-btn" onclick="showRecipeSuggestions()">
                    <i class="fas fa-utensils"></i>
                    <span>Recipes</span>
                </button>
                <button class="action-btn" onclick="shareProgress()">
                    <i class="fas fa-share"></i>
                    <span>Share</span>
                </button>
            </div>
            
            <!-- Meal Timeline -->
            <div class="meal-timeline">
                <h3>🕐 Today's Meal Timeline</h3>
                <div class="timeline" id="mealTimeline">
                    <div class="timeline-item suggested">
                        <div class="timeline-time">Ready to start?</div>
                        <div class="timeline-meal">Log your first meal to begin tracking</div>
                        <div class="timeline-optimal">💡 Get started</div>
                    </div>
                </div>
            </div>
            
            <h2>Today's Meals</h2>
            <div class="meals-section">
                <div class="meal-tabs">
                    <div class="meal-tab active" onclick="filterMeals('all')">All</div>
                    <div class="meal-tab" onclick="filterMeals('breakfast')">Breakfast</div>
                    <div class="meal-tab" onclick="filterMeals('lunch')">Lunch</div>
                    <div class="meal-tab" onclick="filterMeals('dinner')">Dinner</div>
                    <div class="meal-tab" onclick="filterMeals('snacks')">Snacks</div>
                </div>
                
                <div id="mealsList">
                    <div class="loading">Loading meals...</div>
                </div>
            </div>
            
            <div class="nutrition-insights">
                <h3>AI Nutrition Insights</h3>
                <div id="aiInsights" class="insights-container">
                    <div class="loading">Generating insights...</div>
                </div>
            </div>
            
            <!-- Weekly Nutrition Heatmap -->
            <div class="nutrition-heatmap">
                <h3>📊 Weekly Nutrition Quality</h3>
                <div class="heatmap-calendar" id="heatmapCalendar">
                    <div class="heatmap-day poor" data-day="Mon">M<div class="day-score">0</div></div>
                    <div class="heatmap-day poor" data-day="Tue">T<div class="day-score">0</div></div>
                    <div class="heatmap-day poor" data-day="Wed">W<div class="day-score">0</div></div>
                    <div class="heatmap-day poor" data-day="Thu">T<div class="day-score">0</div></div>
                    <div class="heatmap-day poor" data-day="Fri">F<div class="day-score">0</div></div>
                    <div class="heatmap-day poor" data-day="Sat">S<div class="day-score">0</div></div>
                    <div class="heatmap-day poor" data-day="Sun">S<div class="day-score">0</div></div>
                </div>
                <div class="heatmap-legend">
                    <span class="legend-item poor">Poor (0-60)</span>
                    <span class="legend-item average">Average (61-75)</span>
                    <span class="legend-item good">Good (76-85)</span>
                    <span class="legend-item excellent">Excellent (86-100)</span>
                </div>
            </div>
            
            <!-- Progress Photos -->
            <div class="progress-photos">
                <h3>📸 Progress Photos</h3>
                <div class="photo-comparison">
                    <div class="photo-slider">
                        <div class="photo-before">
                            <img src="https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=200&h=300&fit=crop" alt="Before">
                            <div class="photo-label">3 months ago</div>
                        </div>
                        <div class="photo-after">
                            <img src="https://images.unsplash.com/photo-1571019614242-c5c5dee9f50b?w=200&h=300&fit=crop" alt="After">
                            <div class="photo-label">Today</div>
                        </div>
                        <div class="slider-handle"></div>
                    </div>
                    <button class="btn btn-outline" onclick="addProgressPhoto()">📷 Add Photo</button>
                </div>
            </div>
            
            <button class="btn btn-outline" onclick="viewFullLog()" style="width: 100%;">View Full Nutrition Log</button>
        </div>
    </div>
    
    <!-- Log Food Modal -->
    <div id="logFoodModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Log Food</h3>
                <span class="close" onclick="closeModal('logFoodModal')">&times;</span>
            </div>
            <form id="logFoodForm">
                <div class="form-group">
                    <label>Search Food</label>
                    <input type="text" id="foodSearch" placeholder="Search for food..." oninput="searchFood()">
                    <div id="foodResults" class="search-results"></div>
                </div>
                <div class="form-group">
                    <label>Meal Type</label>
                    <select id="mealType">
                        <option value="breakfast">Breakfast</option>
                        <option value="lunch">Lunch</option>
                        <option value="dinner">Dinner</option>
                        <option value="snacks">Snacks</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Quantity</label>
                    <input type="number" id="quantity" value="1" min="0.1" step="0.1">
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-outline" onclick="closeModal('logFoodModal')">Cancel</button>
                    <button type="submit" class="btn btn-primary">Log Food</button>
                </div>
            </form>
        </div>
    </div>
    
    <script>
        let currentMealFilter = 'all';
        let nutritionData = null;
        
        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            initializeAnimations();
            loadNutritionData();
            loadTodaysMeals();
            loadAIInsights();
            initializeWaterTracker();
            initializePhotoSlider();
        });
        
        // Water tracking functions
        let currentWaterIntake = 1600; // ml
        const waterGoal = 2500; // ml
        
        // Initialize water tracker with real data
        async function initializeWaterTracker() {
            try {
                // Get today's nutrition data to initialize water intake
                const response = await fetch('/api/nutrition/progress');
                const data = await response.json();
                
                if (data.success && data.data.progress.water) {
                    currentWaterIntake = data.data.progress.water.current;
                    waterGoal = data.data.progress.water.goal;
                } else {
                    // Start fresh with zeros
                    currentWaterIntake = 0;
                    waterGoal = 2500;
                }
                
                updateWaterDisplay();
            } catch (error) {
                console.error('Error initializing water tracker:', error);
                // Start fresh with zeros
                currentWaterIntake = 0;
                waterGoal = 2500;
                updateWaterDisplay();
            }
        }
        
        async function addWater(amount) {
            try {
                // Log water to backend
                const response = await fetch('/api/nutrition/water', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ amount })
                });
                
                if (response.ok) {
                    currentWaterIntake = Math.min(currentWaterIntake + amount, waterGoal * 2); // Allow going over goal
                    updateWaterDisplay();
                    
                    // Show notification
                    showNotification(`✅ Added ${amount}ml water! 💧`, 'success');
                    
                    // Check if goal reached
                    if (currentWaterIntake >= waterGoal && (currentWaterIntake - amount) < waterGoal) {
                        celebrateQuickLog('Water goal achieved!');
                        showNotification('🎉 Daily water goal achieved!', 'success');
                    }
                    
                    // Refresh nutrition data
                    setTimeout(() => {
                        loadNutritionData();
                    }, 500);
                } else {
                    showNotification('❌ Failed to log water', 'error');
                }
            } catch (error) {
                console.error('Error logging water:', error);
                showNotification('❌ Network error', 'error');
            }
        }
        
        function updateWaterDisplay() {
            const percentage = (currentWaterIntake / waterGoal) * 100;
            document.querySelector('.water-fill').style.height = `${percentage}%`;
            document.querySelector('.water-level').textContent = `${(currentWaterIntake/1000).toFixed(1)}L / ${(waterGoal/1000).toFixed(1)}L`;
        }
        
        // Camera and barcode functions
        function openCamera() {
            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                navigator.mediaDevices.getUserMedia({ video: true })
                    .then(function(stream) {
                        showCameraModal(stream);
                    })
                    .catch(function(error) {
                        showNotification('Camera access denied', 'error');
                    });
            } else {
                showNotification('Camera not supported', 'error');
            }
        }
        
        function showCameraModal(stream) {
            // Create camera modal
            const modal = document.createElement('div');
            modal.className = 'modal';
            modal.style.display = 'block';
            modal.innerHTML = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>📸 Photo Food Log</h3>
                        <span class="close" onclick="closeCameraModal()">&times;</span>
                    </div>
                    <div style="padding: 20px; text-align: center;">
                        <video id="cameraVideo" width="400" height="300" autoplay style="border-radius: 8px;"></video>
                        <br><br>
                        <button class="btn btn-primary" onclick="capturePhoto()">📷 Capture</button>
                        <button class="btn btn-outline" onclick="closeCameraModal()">Cancel</button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
            
            const video = document.getElementById('cameraVideo');
            video.srcObject = stream;
            
            window.currentCameraStream = stream;
            window.cameraModal = modal;
        }
        
        function closeCameraModal() {
            if (window.currentCameraStream) {
                window.currentCameraStream.getTracks().forEach(track => track.stop());
            }
            if (window.cameraModal) {
                window.cameraModal.remove();
            }
        }
        
        function capturePhoto() {
            const video = document.getElementById('cameraVideo');
            const canvas = document.createElement('canvas');
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(video, 0, 0);
            
            // Convert to blob and analyze
            canvas.toBlob(function(blob) {
                analyzePhotoFood(blob);
            });
            
            closeCameraModal();
        }
        
        function analyzePhotoFood(photoBlob) {
            showNotification('🔍 Analyzing food photo...', 'info');
            
            // Simulate AI analysis
            setTimeout(() => {
                const mockResults = [
                    { name: 'Grilled Chicken Breast', calories: 165, confidence: 92 },
                    { name: 'Steamed Broccoli', calories: 25, confidence: 88 },
                    { name: 'Brown Rice', calories: 110, confidence: 85 }
                ];
                
                showPhotoAnalysisResults(mockResults);
            }, 2000);
        }
        
        function showPhotoAnalysisResults(results) {
            const modal = document.createElement('div');
            modal.className = 'modal';
            modal.style.display = 'block';
            modal.innerHTML = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>🎯 Food Recognition Results</h3>
                        <span class="close" onclick="this.closest('.modal').remove()">&times;</span>
                    </div>
                    <div style="padding: 20px;">
                        ${results.map(food => `
                            <div style="display: flex; justify-content: space-between; align-items: center; padding: 10px; border-bottom: 1px solid #eee;">
                                <div>
                                    <strong>${food.name}</strong><br>
                                    <small>${food.confidence}% confidence</small>
                                </div>
                                <div>
                                    <span>${food.calories} cal</span>
                                    <button class="btn btn-primary" style="margin-left: 10px;" onclick="quickLogPhoto('${food.name}', ${food.calories})">Add</button>
                                </div>
                            </div>
                        `).join('')}
                        <div style="margin-top: 20px; text-align: center;">
                            <button class="btn btn-primary" onclick="logAllPhotoFoods()">Add All Items</button>
                        </div>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
        }
        
        function quickLogPhoto(foodName, calories) {
            showNotification(`Added ${foodName} (${calories} cal)`, 'success');
            // Update nutrition data
            loadNutritionData();
        }
        
        function openBarcodeScanner() {
            showNotification('📱 Barcode scanner opening...', 'info');
            // Simulate barcode scanning
            setTimeout(() => {
                const mockProduct = {
                    name: 'Greek Yogurt - Chobani',
                    calories: 100,
                    protein: 15,
                    carbs: 6,
                    fat: 0
                };
                showBarcodeResult(mockProduct);
            }, 1500);
        }
        
        function showBarcodeResult(product) {
            const modal = document.createElement('div');
            modal.className = 'modal';
            modal.style.display = 'block';
            modal.innerHTML = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>📦 Product Found</h3>
                        <span class="close" onclick="this.closest('.modal').remove()">&times;</span>
                    </div>
                    <div style="padding: 20px;">
                        <h4>${product.name}</h4>
                        <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 10px; margin: 15px 0;">
                            <div>Calories: <strong>${product.calories}</strong></div>
                            <div>Protein: <strong>${product.protein}g</strong></div>
                            <div>Carbs: <strong>${product.carbs}g</strong></div>
                            <div>Fat: <strong>${product.fat}g</strong></div>
                        </div>
                        <div style="margin-top: 20px;">
                            <label>Quantity:</label>
                            <input type="number" id="barcodeQuantity" value="1" min="0.1" step="0.1" style="width: 80px; margin: 0 10px;">
                            <button class="btn btn-primary" onclick="logBarcodeProduct()">Add to Log</button>
                        </div>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
            window.currentBarcodeProduct = product;
        }
        
        function logBarcodeProduct() {
            const quantity = parseFloat(document.getElementById('barcodeQuantity').value);
            const product = window.currentBarcodeProduct;
            
            showNotification(`Added ${product.name} x${quantity}`, 'success');
            document.querySelector('.modal').remove();
            loadNutritionData();
        }
        
        function showRecipeSuggestions() {
            const modal = document.createElement('div');
            modal.className = 'modal';
            modal.style.display = 'block';
            modal.innerHTML = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>🍳 Recipe Suggestions</h3>
                        <span class="close" onclick="this.closest('.modal').remove()">&times;</span>
                    </div>
                    <div style="padding: 20px;">
                        <p>Based on your remaining macros:</p>
                        <div style="display: grid; gap: 15px;">
                            <div class="recipe-card" style="border: 1px solid #ddd; padding: 15px; border-radius: 8px;">
                                <h4>🥗 Protein Power Bowl</h4>
                                <p>Perfect for your remaining 25g protein</p>
                                <div>Calories: 380 | Protein: 28g | Carbs: 15g | Fat: 12g</div>
                                <button class="btn btn-primary" style="margin-top: 10px;" onclick="addRecipeToMealPlan('Protein Power Bowl')">Add to Meal Plan</button>
                            </div>
                            <div class="recipe-card" style="border: 1px solid #ddd; padding: 15px; border-radius: 8px;">
                                <h4>🍌 Post-Workout Smoothie</h4>
                                <p>Great for post-workout recovery</p>
                                <div>Calories: 250 | Protein: 20g | Carbs: 30g | Fat: 5g</div>
                                <button class="btn btn-primary" style="margin-top: 10px;" onclick="addRecipeToMealPlan('Post-Workout Smoothie')">Add to Meal Plan</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
        }
        
        function addRecipeToMealPlan(recipeName) {
            showNotification(`${recipeName} added to meal plan! 📅`, 'success');
            document.querySelector('.modal').remove();
        }
        
        function addProgressPhoto() {
            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                navigator.mediaDevices.getUserMedia({ video: true })
                    .then(function(stream) {
                        showProgressPhotoModal(stream);
                    })
                    .catch(function(error) {
                        showNotification('Camera access denied', 'error');
                    });
            } else {
                // Fallback to file input
                const input = document.createElement('input');
                input.type = 'file';
                input.accept = 'image/*';
                input.onchange = function(e) {
                    const file = e.target.files[0];
                    if (file) {
                        showNotification('Progress photo added! 📸', 'success');
                    }
                };
                input.click();
            }
        }
        
        function showProgressPhotoModal(stream) {
            const modal = document.createElement('div');
            modal.className = 'modal';
            modal.style.display = 'block';
            modal.innerHTML = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>📸 Progress Photo</h3>
                        <span class="close" onclick="closeProgressPhotoModal()">&times;</span>
                    </div>
                    <div style="padding: 20px; text-align: center;">
                        <video id="progressVideo" width="300" height="400" autoplay style="border-radius: 8px;"></video>
                        <br><br>
                        <button class="btn btn-primary" onclick="captureProgressPhoto()">📷 Capture</button>
                        <button class="btn btn-outline" onclick="closeProgressPhotoModal()">Cancel</button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
            
            const video = document.getElementById('progressVideo');
            video.srcObject = stream;
            
            window.currentProgressStream = stream;
            window.progressModal = modal;
        }
        
        function closeProgressPhotoModal() {
            if (window.currentProgressStream) {
                window.currentProgressStream.getTracks().forEach(track => track.stop());
            }
            if (window.progressModal) {
                window.progressModal.remove();
            }
        }
        
        function captureProgressPhoto() {
            showNotification('Progress photo saved! 📸', 'success');
            closeProgressPhotoModal();
        }
        
        function initializePhotoSlider() {
            // Simple photo comparison slider
            const slider = document.querySelector('.photo-slider');
            if (slider) {
                slider.addEventListener('mousemove', function(e) {
                    const rect = slider.getBoundingClientRect();
                    const x = e.clientX - rect.left;
                    const percentage = (x / rect.width) * 100;
                    
                    const afterPhoto = slider.querySelector('.photo-after');
                    afterPhoto.style.clipPath = `inset(0 ${100 - percentage}% 0 0)`;
                });
            }
        }
        
        // Initialize GSAP animations
        function initializeAnimations() {
            gsap.registerPlugin(ScrollTrigger);
            
            // Animate nutrition cards
            gsap.fromTo('.nutrition-card', 
                { y: 50, opacity: 0, scale: 0.9 },
                { 
                    y: 0, 
                    opacity: 1, 
                    scale: 1,
                    duration: 0.8,
                    stagger: 0.1,
                    delay: 0.3,
                    ease: "back.out(1.7)"
                }
            );
            
            // Animate sections
            gsap.fromTo('.macros-section, .meals-section, .nutrition-insights', 
                { x: -50, opacity: 0 },
                { 
                    x: 0, 
                    opacity: 1,
                    duration: 0.8,
                    stagger: 0.2,
                    delay: 0.5,
                    ease: "power2.out"
                }
            );
            
            // Animate quick actions
            gsap.fromTo('.action-btn', 
                { y: 30, opacity: 0 },
                { 
                    y: 0, 
                    opacity: 1,
                    duration: 0.6,
                    stagger: 0.1,
                    delay: 0.7,
                    ease: "power2.out"
                }
            );
        }
        
        // Load dynamic nutrition data
        async function loadNutritionData() {
            try {
                const response = await fetch('/api/nutrition/progress');
                const data = await response.json();
                
                if (data.success) {
                    nutritionData = data.data;
                    displayNutritionSummary(data.data.progress);
                    displayAdjustmentReason(data.data.adjustmentReason);
                    displayStreak(data.data.streak);
                } else {
                    console.error('Failed to load nutrition data');
                }
            } catch (error) {
                console.error('Error loading nutrition data:', error);
            }
        }
        
        // Display dynamic nutrition summary
        function displayNutritionSummary(progress) {
            const container = document.getElementById('nutritionSummary');
            
            container.innerHTML = `
                <div class="nutrition-card ${progress.calories.percentage >= 100 ? 'goal-reached' : ''}">
                    <div class="progress-ring">
                        <svg width="100" height="100" viewBox="0 0 100 100">
                            <circle cx="50" cy="50" r="45" class="progress-ring-circle" 
                                stroke-dashoffset="${283 - (283 * Math.min(progress.calories.percentage, 100) / 100)}" />
                        </svg>
                        <div class="progress-ring-text">${progress.calories.current}</div>
                    </div>
                    <div class="nutrition-label">Calories</div>
                    <div class="nutrition-value">${progress.calories.current}</div>
                    <div class="nutrition-label">of ${progress.calories.goal} goal (${progress.calories.percentage}%)</div>
                </div>
                
                <div class="nutrition-card ${progress.protein.percentage >= 100 ? 'goal-reached' : ''}">
                    <div class="progress-ring">
                        <svg width="100" height="100" viewBox="0 0 100 100">
                            <circle cx="50" cy="50" r="45" class="progress-ring-circle" 
                                stroke-dashoffset="${283 - (283 * Math.min(progress.protein.percentage, 100) / 100)}" style="stroke: #4D44DB;" />
                        </svg>
                        <div class="progress-ring-text">${progress.protein.current}g</div>
                    </div>
                    <div class="nutrition-label">Protein</div>
                    <div class="nutrition-value">${progress.protein.current}g</div>
                    <div class="nutrition-label">of ${progress.protein.goal}g goal (${progress.protein.percentage}%)</div>
                </div>
                
                <div class="nutrition-card ${progress.carbs.percentage >= 100 ? 'goal-reached' : ''}">
                    <div class="progress-ring">
                        <svg width="100" height="100" viewBox="0 0 100 100">
                            <circle cx="50" cy="50" r="45" class="progress-ring-circle" 
                                stroke-dashoffset="${283 - (283 * Math.min(progress.carbs.percentage, 100) / 100)}" style="stroke: #FF6584;" />
                        </svg>
                        <div class="progress-ring-text">${progress.carbs.current}g</div>
                    </div>
                    <div class="nutrition-label">Carbs</div>
                    <div class="nutrition-value">${progress.carbs.current}g</div>
                    <div class="nutrition-label">of ${progress.carbs.goal}g goal (${progress.carbs.percentage}%)</div>
                </div>
                
                <div class="nutrition-card ${progress.water.percentage >= 100 ? 'goal-reached' : ''}">
                    <div class="progress-ring">
                        <svg width="100" height="100" viewBox="0 0 100 100">
                            <circle cx="50" cy="50" r="45" class="progress-ring-circle" 
                                stroke-dashoffset="${283 - (283 * Math.min(progress.water.percentage, 100) / 100)}" style="stroke: #28A745;" />
                        </svg>
                        <div class="progress-ring-text">${progress.water.current}ml</div>
                    </div>
                    <div class="nutrition-label">Water</div>
                    <div class="nutrition-value">${progress.water.current}ml</div>
                    <div class="nutrition-label">of ${progress.water.goal}ml goal (${progress.water.percentage}%)</div>
                </div>
            `;
            
            // Update macro wheel and values
            updateMacroWheel(progress);
            updateNutritionScore(progress);
        }
        
        // Display goal adjustment reason
        function displayAdjustmentReason(reason) {
            if (reason) {
                const container = document.getElementById('nutritionSummary');
                const alert = document.createElement('div');
                alert.className = 'goal-adjustment-alert';
                alert.innerHTML = `<i class="fas fa-info-circle"></i> ${reason}`;
                container.parentNode.insertBefore(alert, container);
            }
        }
        
        // Display nutrition streak
        function displayStreak(streak) {
            const streakDisplay = document.getElementById('streakDisplay');
            const achievementBadges = document.getElementById('achievementBadges');
            
            if (streak > 0) {
                streakDisplay.style.display = 'block';
                streakDisplay.innerHTML = `🔥 ${streak} day streak!`;
                
                // Update achievement badges based on streak
                let badges = [];
                if (streak >= 3) badges.push('🏆 Consistent');
                if (streak >= 7) badges.push('🔥 Week Warrior');
                if (streak >= 14) badges.push('⭐ Streak Master');
                
                if (badges.length > 0) {
                    achievementBadges.innerHTML = badges.map(badge => `<span class="badge">${badge}</span>`).join('');
                } else {
                    achievementBadges.innerHTML = '<span class="badge">🌱 Getting Started</span>';
                }
            } else {
                streakDisplay.style.display = 'none';
                achievementBadges.innerHTML = '<span class="badge" style="opacity: 0.3;">🏆 Start logging to unlock</span>';
            }
        }
        
        // Update macro wheel
        function updateMacroWheel(progress) {
            const remainingCalories = document.getElementById('remainingCalories');
            const calorieZone = document.getElementById('calorieZone');
            const proteinValue = document.getElementById('proteinValue');
            const carbsValue = document.getElementById('carbsValue');
            const fatValue = document.getElementById('fatValue');
            
            remainingCalories.textContent = progress.calories.current;
            
            // Update macro values
            proteinValue.textContent = `${progress.protein.current}g (${Math.round((progress.protein.current * 4 / Math.max(progress.calories.current, 1)) * 100)}%)`;
            carbsValue.textContent = `${progress.carbs.current}g (${Math.round((progress.carbs.current * 4 / Math.max(progress.calories.current, 1)) * 100)}%)`;
            fatValue.textContent = `${progress.fat.current}g (${Math.round((progress.fat.current * 9 / Math.max(progress.calories.current, 1)) * 100)}%)`;
            
            // Update calorie zone
            if (progress.calories.current === 0) {
                calorieZone.textContent = 'Start Logging';
                calorieZone.className = 'zone deficit active';
            } else if (progress.calories.percentage < 80) {
                calorieZone.textContent = 'Under Goal';
                calorieZone.className = 'zone deficit active';
            } else if (progress.calories.percentage <= 110) {
                calorieZone.textContent = 'Optimal';
                calorieZone.className = 'zone optimal active';
            } else {
                calorieZone.textContent = 'Over Goal';
                calorieZone.className = 'zone excess active';
            }
        }
        
        // Update nutrition score
        function updateNutritionScore(progress) {
            const scoreElement = document.getElementById('nutritionScore');
            const scoreCircle = document.getElementById('scoreCircle');
            
            // Calculate score based on how close to goals
            let score = 0;
            const weights = { calories: 0.3, protein: 0.3, carbs: 0.2, fat: 0.2 };
            
            Object.keys(weights).forEach(key => {
                if (progress[key]) {
                    const percentage = Math.min(progress[key].percentage, 100);
                    score += (percentage / 100) * weights[key] * 100;
                }
            });
            
            score = Math.round(score);
            scoreElement.textContent = score;
            
            // Update circle progress
            const circumference = 220;
            const offset = circumference - (circumference * score / 100);
            scoreCircle.style.strokeDashoffset = offset;
        }
        
        // Load today's meals
        async function loadTodaysMeals() {
            // This would typically fetch from your nutrition API
            const mockMeals = [
                { name: 'Scrambled Eggs with Avocado', time: '8:30 AM', type: 'breakfast', calories: 420, icon: 'egg' },
                { name: 'Greek Yogurt with Berries', time: '11:00 AM', type: 'snacks', calories: 210, icon: 'apple-alt' },
                { name: 'Grilled Salmon with Quinoa', time: '1:15 PM', type: 'lunch', calories: 580, icon: 'fish' },
                { name: 'Protein Shake', time: '4:30 PM', type: 'snacks', calories: 240, icon: 'seedling' },
                { name: 'Chicken & Vegetable Stir Fry', time: '7:45 PM', type: 'dinner', calories: 490, icon: 'drumstick-bite' }
            ];
            
            displayMeals(mockMeals);
        }
        
        // Display meals
        function displayMeals(meals) {
            const container = document.getElementById('mealsList');
            const filteredMeals = currentMealFilter === 'all' ? meals : meals.filter(meal => meal.type === currentMealFilter);
            
            if (filteredMeals.length === 0) {
                container.innerHTML = '<p>No meals logged for this category yet.</p>';
                return;
            }
            
            container.innerHTML = filteredMeals.map(meal => `
                <div class="meal-item">
                    <div class="meal-info">
                        <div class="meal-icon">
                            <i class="fas fa-${meal.icon}"></i>
                        </div>
                        <div>
                            <div class="meal-name">${meal.name}</div>
                            <div class="meal-time">${meal.time} • ${meal.type.charAt(0).toUpperCase() + meal.type.slice(1)}</div>
                        </div>
                    </div>
                    <div class="meal-calories">${meal.calories} kcal</div>
                </div>
            `).join('');
        }
        
        // Filter meals
        function filterMeals(type) {
            currentMealFilter = type;
            document.querySelectorAll('.meal-tab').forEach(tab => tab.classList.remove('active'));
            event.target.classList.add('active');
            loadTodaysMeals();
        }
        
        // Load smart nutrition insights
        async function loadAIInsights() {
            try {
                const [insightsResponse, suggestionsResponse] = await Promise.all([
                    fetch('/api/nutrition/insights'),
                    fetch('/api/nutrition/suggestions')
                ]);
                
                const insightsData = await insightsResponse.json();
                const suggestionsData = await suggestionsResponse.json();
                
                let content = '';
                
                if (insightsData.success && insightsData.insights.length > 0) {
                    content += insightsData.insights.map(insight => `
                        <div class="insight-item">
                            <i class="fas fa-lightbulb"></i>
                            <p>${insight}</p>
                        </div>
                    `).join('');
                }
                
                if (suggestionsData.success && suggestionsData.suggestions.length > 0) {
                    content += '<h4>Smart Suggestions</h4>';
                    content += suggestionsData.suggestions.map(suggestion => `
                        <div class="suggestion-item">
                            <i class="fas fa-${suggestion.type === 'protein' ? 'drumstick-bite' : suggestion.type === 'hydration' ? 'tint' : 'utensils'}"></i>
                            <div>
                                <p><strong>${suggestion.message}</strong></p>
                                <div class="suggested-foods">
                                    ${suggestion.foods.map(food => `<span class="food-tag" onclick="quickLog('${food}')">${food}</span>`).join('')}
                                </div>
                            </div>
                        </div>
                    `).join('');
                }
                
                document.getElementById('aiInsights').innerHTML = content || `
                    <div class="insight-item">
                        <i class="fas fa-info-circle"></i>
                        <p>Start logging meals to get personalized insights!</p>
                    </div>
                `;
            } catch (error) {
                console.error('Error loading insights:', error);
            }
        }
        
        // Modal functions
        function showLogFoodModal() {
            document.getElementById('logFoodModal').style.display = 'block';
        }
        
        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }
        
        // Food search
        async function searchFood() {
            const query = document.getElementById('foodSearch').value;
            if (query.length < 2) return;
            
            try {
                const response = await fetch(`/api/nutriscan/search?q=${encodeURIComponent(query)}`);
                const data = await response.json();
                
                if (data.success) {
                    displayFoodResults(data.products);
                }
            } catch (error) {
                console.error('Error searching food:', error);
            }
        }
        
        function displayFoodResults(products) {
            const container = document.getElementById('foodResults');
            container.innerHTML = products.slice(0, 5).map(product => `
                <div class="food-result" onclick="selectFood('${product.name}', ${product.calories})">
                    <strong>${product.name}</strong>
                    <span>${product.calories} cal per ${product.serving}</span>
                </div>
            `).join('');
        }
        
        function selectFood(name, calories) {
            document.getElementById('foodSearch').value = name;
            document.getElementById('foodResults').innerHTML = '';
        }
        
        // Log food form
        document.getElementById('logFoodForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = {
                meals: [{
                    name: document.getElementById('foodSearch').value,
                    type: document.getElementById('mealType').value,
                    quantity: parseFloat(document.getElementById('quantity').value),
                    time: new Date().toLocaleTimeString()
                }],
                totalCalories: 300 // This would be calculated
            };
            
            try {
                const response = await fetch('/api/nutrition', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showNotification('Food logged successfully!', 'success');
                    closeModal('logFoodModal');
                    loadNutritionData();
                    loadTodaysMeals();
                } else {
                    showNotification(data.error, 'error');
                }
            } catch (error) {
                console.error('Error logging food:', error);
                showNotification('Failed to log food', 'error');
            }
        });
        
        // Utility functions
        function openNutriScan() {
            window.location.href = '/nutriscan?token=<%= navToken %>';
        }
        
        function openMealPlanner() {
            window.location.href = '/meal-planner?token=<%= navToken %>';
        }
        
        function shareProgress() {
            if (navigator.share) {
                navigator.share({
                    title: 'My Nutrition Progress',
                    text: `I've consumed ${nutritionData?.stats?.todayCalories || 0} calories today!`,
                    url: window.location.href
                });
            } else {
                // Fallback - copy to clipboard or show share modal
                showNotification('Share feature coming soon!', 'info');
            }
        }
        
        function viewFullLog() {
            // Navigate to detailed nutrition log page
            showNotification('Full nutrition log coming soon!', 'info');
        }
        
        // Quick log food from suggestions
        async function quickLog(foodName) {
            try {
                // Show loading notification
                showNotification(`Adding ${foodName}...`, 'info');
                
                const response = await fetch('/api/nutrition/quick-log', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ foodName: foodName, quantity: 1 })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showNotification(`✅ ${foodName} logged successfully!`, 'success');
                    
                    // Refresh data with animation
                    setTimeout(() => {
                        loadNutritionData();
                        loadAIInsights();
                        loadTodaysMeals();
                    }, 500);
                    
                    // Add celebration animation
                    celebrateQuickLog(foodName);
                } else {
                    showNotification(`❌ ${data.error || 'Failed to log food'}`, 'error');
                }
            } catch (error) {
                console.error('Quick log error:', error);
                showNotification('❌ Network error - please try again', 'error');
            }
        }
        
        // Celebration animation for quick log
        function celebrateQuickLog(foodName) {
            // Create floating success message
            const celebration = document.createElement('div');
            celebration.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: linear-gradient(135deg, #28A745, #20C997);
                color: white;
                padding: 20px 30px;
                border-radius: 15px;
                font-weight: 600;
                font-size: 1.1rem;
                z-index: 10001;
                box-shadow: 0 10px 30px rgba(40, 167, 69, 0.3);
                animation: celebrationBounce 0.6s ease-out;
            `;
            celebration.innerHTML = `🎉 ${foodName} added!`;
            
            // Add CSS animation
            const style = document.createElement('style');
            style.textContent = `
                @keyframes celebrationBounce {
                    0% { transform: translate(-50%, -50%) scale(0.5); opacity: 0; }
                    50% { transform: translate(-50%, -50%) scale(1.1); opacity: 1; }
                    100% { transform: translate(-50%, -50%) scale(1); opacity: 1; }
                }
            `;
            document.head.appendChild(style);
            
            document.body.appendChild(celebration);
            
            // Remove after animation
            setTimeout(() => {
                celebration.remove();
                style.remove();
            }, 2000);
        }
        
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.innerHTML = message;
            notification.style.cssText = `
                position: fixed; top: 20px; right: 20px; padding: 15px 20px;
                border-radius: 12px; color: white; z-index: 10000; font-weight: 500;
                background: ${type === 'success' ? 'linear-gradient(135deg, #28A745, #20C997)' : 
                            type === 'error' ? 'linear-gradient(135deg, #DC3545, #C82333)' : 
                            'linear-gradient(135deg, #17A2B8, #138496)'};
                box-shadow: 0 4px 15px rgba(0,0,0,0.2);
                animation: slideInRight 0.3s ease-out;
                border: 1px solid rgba(255,255,255,0.2);
            `;
            
            // Add slide animation
            const style = document.createElement('style');
            style.textContent = `
                @keyframes slideInRight {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
            `;
            document.head.appendChild(style);
            
            document.body.appendChild(notification);
            setTimeout(() => {
                notification.remove();
                style.remove();
            }, 4000);
        }
        
        function confirmLogout() {
            return confirm('Are you sure you want to logout?');
        }
        
        // Close modals when clicking outside
        window.onclick = function(event) {
            const modals = document.querySelectorAll('.modal');
            modals.forEach(modal => {
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });
        }
    </script>
    
    <!-- Enhanced Fit-With-AI Voice Assistant -->
    <script src="/js/voice-assistant-enhanced-fitwithai.js"></script>
</body>
</html>