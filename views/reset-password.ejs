<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reset Password - Fit-With-AI</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <style>
        :root {
            --primary: #6C63FF;
            --secondary: #4D44DB;
            --accent: #FF6584;
            --light: #F8F9FA;
            --dark: #343A40;
            --success: #28A745;
            --warning: #FFC107;
            --danger: #DC3545;
            --gray: #6C757D;
            --light-gray: #E9ECEF;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: radial-gradient(ellipse at top, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
            color: #ffffff;
            overflow-x: hidden;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 40% 40%, rgba(120, 219, 255, 0.2) 0%, transparent 50%);
            pointer-events: none;
            z-index: -1;
        }

        .container {
            background: linear-gradient(135deg, rgba(108, 99, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 50%, rgba(108, 99, 255, 0.08) 100%);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 20px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
            overflow: hidden;
            width: 100%;
            max-width: 450px;
            position: relative;
        }

        .header {
            background: linear-gradient(135deg, rgba(108, 99, 255, 0.2) 0%, rgba(255, 255, 255, 0.1) 100%);
            color: white;
            padding: 40px 30px;
            text-align: center;
            position: relative;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .header-icon {
            font-size: 3rem;
            margin-bottom: 20px;
            opacity: 0.9;
        }

        .header h1 {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 10px;
        }

        .header p {
            opacity: 0.9;
            font-size: 1rem;
            line-height: 1.5;
        }

        .content {
            padding: 40px 30px 30px;
        }

        .step-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: white;
            margin-bottom: 10px;
            text-align: center;
        }

        .step-description {
            color: rgba(255, 255, 255, 0.8);
            text-align: center;
            margin-bottom: 30px;
            line-height: 1.6;
        }

        .email-display {
            background: rgba(108, 99, 255, 0.2);
            padding: 15px;
            border-radius: 12px;
            text-align: center;
            margin-bottom: 30px;
            font-weight: 500;
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .form-group {
            margin-bottom: 25px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            color: white;
            font-weight: 500;
            font-size: 0.95rem;
        }

        .form-input {
            width: 100%;
            padding: 15px 20px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 12px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            position: relative;
        }
        
        .form-input::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }

        .form-input:focus {
            outline: none;
            border-color: var(--primary);
            background: white;
            box-shadow: 0 0 0 3px rgba(108, 99, 255, 0.1);
        }

        .password-input-container {
            position: relative;
        }

        .password-toggle {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: var(--gray);
            cursor: pointer;
            font-size: 1.1rem;
            transition: color 0.3s ease;
        }

        .password-toggle:hover {
            color: var(--primary);
        }

        .form-btn {
            width: 100%;
            padding: 15px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            border: none;
            border-radius: 12px;
            color: white;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .form-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(108, 99, 255, 0.3);
        }

        .form-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .form-btn .spinner {
            display: none;
            width: 20px;
            height: 20px;
            border: 2px solid transparent;
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 10px;
        }

        .form-btn.loading .spinner {
            display: inline-block;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .alert {
            padding: 15px 20px;
            border-radius: 12px;
            margin-bottom: 20px;
            font-weight: 500;
            display: none;
        }

        .alert.success {
            background: rgba(40, 167, 69, 0.1);
            color: var(--success);
            border: 1px solid rgba(40, 167, 69, 0.2);
        }

        .alert.error {
            background: rgba(220, 53, 69, 0.1);
            color: var(--danger);
            border: 1px solid rgba(220, 53, 69, 0.2);
        }

        .password-strength {
            margin-top: 10px;
            font-size: 0.85rem;
        }

        .strength-bar {
            height: 4px;
            background: var(--light-gray);
            border-radius: 2px;
            margin: 8px 0;
            overflow: hidden;
        }

        .strength-fill {
            height: 100%;
            transition: all 0.3s ease;
            border-radius: 2px;
        }

        .strength-weak .strength-fill {
            width: 33%;
            background: var(--danger);
        }

        .strength-medium .strength-fill {
            width: 66%;
            background: var(--warning);
        }

        .strength-strong .strength-fill {
            width: 100%;
            background: var(--success);
        }

        .password-requirements {
            margin-top: 15px;
            font-size: 0.85rem;
            color: rgba(255, 255, 255, 0.7);
        }

        .requirement {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
            transition: color 0.3s ease;
        }

        .requirement i {
            margin-right: 8px;
            font-size: 0.8rem;
        }

        .requirement.met {
            color: var(--success);
        }

        .requirement.unmet {
            color: rgba(255, 255, 255, 0.5);
        }

        .footer-links {
            text-align: center;
            margin-top: 25px;
            padding-top: 25px;
            border-top: 1px solid var(--light-gray);
        }

        .footer-links a {
            color: var(--primary);
            text-decoration: none;
            font-weight: 500;
            transition: color 0.3s ease;
        }

        .footer-links a:hover {
            color: var(--secondary);
        }

        .success-container {
            text-align: center;
            padding: 20px 0;
        }

        .success-icon {
            font-size: 4rem;
            color: var(--success);
            margin-bottom: 20px;
        }

        @media (max-width: 480px) {
            .container {
                margin: 10px;
            }
            
            .content {
                padding: 30px 20px 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="header-icon">
                <i class="fas fa-key"></i>
            </div>
            <h1>Create New Password</h1>
            <p>Choose a strong password to secure your account</p>
        </div>

        <div class="content">
            <div id="passwordStep">
                <h2 class="step-title">Set Your New Password</h2>
                <p class="step-description">Create a secure password for your Fit-With-AI account</p>
                
                <div class="email-display">
                    <i class="fas fa-envelope"></i> <%= email %>
                </div>
                
                <div class="alert" id="alert"></div>
                
                <form id="passwordForm">
                    <div class="form-group">
                        <label for="newPassword" class="form-label">New Password</label>
                        <div class="password-input-container">
                            <input type="password" id="newPassword" class="form-input" placeholder="Enter your new password" required>
                            <button type="button" class="password-toggle" onclick="togglePassword('newPassword')">
                                <i class="fas fa-eye" id="newPasswordToggleIcon"></i>
                            </button>
                        </div>
                        <div class="password-strength" id="passwordStrength">
                            <div class="strength-bar">
                                <div class="strength-fill"></div>
                            </div>
                            <span class="strength-text">Password strength</span>
                        </div>
                        <div class="password-requirements">
                            <div class="requirement unmet" id="lengthReq">
                                <i class="fas fa-times"></i>
                                At least 8 characters
                            </div>
                            <div class="requirement unmet" id="lowercaseReq">
                                <i class="fas fa-times"></i>
                                One lowercase letter
                            </div>
                            <div class="requirement unmet" id="uppercaseReq">
                                <i class="fas fa-times"></i>
                                One uppercase letter
                            </div>
                            <div class="requirement unmet" id="numberReq">
                                <i class="fas fa-times"></i>
                                One number
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="confirmPassword" class="form-label">Confirm New Password</label>
                        <div class="password-input-container">
                            <input type="password" id="confirmPassword" class="form-input" placeholder="Confirm your new password" required>
                            <button type="button" class="password-toggle" onclick="togglePassword('confirmPassword')">
                                <i class="fas fa-eye" id="confirmPasswordToggleIcon"></i>
                            </button>
                        </div>
                    </div>
                    
                    <button type="submit" class="form-btn" id="resetPasswordBtn">
                        <span class="spinner"></span>
                        Reset Password
                    </button>
                </form>
                
                <div class="footer-links">
                    <a href="/forgot-password">← Back to Reset Options</a>
                </div>
            </div>

            <div id="successStep" style="display: none;">
                <div class="success-container">
                    <div class="success-icon">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <h2 class="step-title">Password Reset Successful!</h2>
                    <p class="step-description">Your password has been successfully updated. You can now sign in with your new password.</p>
                    
                    <button class="form-btn" onclick="window.location.href='/'">
                        <i class="fas fa-sign-in-alt"></i> Sign In Now
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Show alert
        function showAlert(message, type = 'error') {
            const alert = document.getElementById('alert');
            alert.className = `alert ${type}`;
            alert.textContent = message;
            alert.style.display = 'block';
            
            // Auto hide success messages
            if (type === 'success') {
                setTimeout(() => {
                    alert.style.display = 'none';
                }, 3000);
            }
        }

        // Hide alert
        function hideAlert() {
            const alert = document.getElementById('alert');
            alert.style.display = 'none';
        }

        // Set button loading state
        function setButtonLoading(loading) {
            const button = document.getElementById('resetPasswordBtn');
            if (loading) {
                button.classList.add('loading');
                button.disabled = true;
            } else {
                button.classList.remove('loading');
                button.disabled = false;
            }
        }

        // Toggle password visibility
        function togglePassword(inputId) {
            const input = document.getElementById(inputId);
            const icon = document.getElementById(inputId + 'ToggleIcon');
            
            if (input.type === 'password') {
                input.type = 'text';
                icon.className = 'fas fa-eye-slash';
            } else {
                input.type = 'password';
                icon.className = 'fas fa-eye';
            }
        }

        // Password strength checker
        function checkPasswordStrength(password) {
            const strengthElement = document.getElementById('passwordStrength');
            const strengthText = strengthElement.querySelector('.strength-text');
            
            // Check requirements
            const requirements = {
                length: password.length >= 8,
                lowercase: /[a-z]/.test(password),
                uppercase: /[A-Z]/.test(password),
                number: /[0-9]/.test(password)
            };

            // Update requirement indicators
            updateRequirement('lengthReq', requirements.length);
            updateRequirement('lowercaseReq', requirements.lowercase);
            updateRequirement('uppercaseReq', requirements.uppercase);
            updateRequirement('numberReq', requirements.number);

            // Calculate strength score
            let score = Object.values(requirements).filter(Boolean).length;
            
            strengthElement.className = 'password-strength';
            
            if (score < 2) {
                strengthElement.classList.add('strength-weak');
                strengthText.textContent = 'Weak password';
            } else if (score < 4) {
                strengthElement.classList.add('strength-medium');
                strengthText.textContent = 'Medium strength';
            } else {
                strengthElement.classList.add('strength-strong');
                strengthText.textContent = 'Strong password';
            }

            return score >= 3; // Return true if password is acceptable
        }

        function updateRequirement(reqId, met) {
            const req = document.getElementById(reqId);
            const icon = req.querySelector('i');
            
            if (met) {
                req.className = 'requirement met';
                icon.className = 'fas fa-check';
            } else {
                req.className = 'requirement unmet';
                icon.className = 'fas fa-times';
            }
        }

        // Real-time password validation
        document.getElementById('newPassword').addEventListener('input', function(e) {
            checkPasswordStrength(e.target.value);
        });

        // Form submission
        document.getElementById('passwordForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            // Validate password strength
            if (!checkPasswordStrength(newPassword)) {
                showAlert('Please choose a stronger password that meets all requirements');
                return;
            }
            
            if (newPassword.length < 6) {
                showAlert('Password must be at least 6 characters long');
                return;
            }
            
            if (newPassword !== confirmPassword) {
                showAlert('Passwords do not match');
                return;
            }

            setButtonLoading(true);
            hideAlert();

            try {
                const response = await fetch('/reset-password', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        newPassword, 
                        confirmPassword,
                        email: '<%= email %>'
                    })
                });

                const data = await response.json();

                if (data.success) {
                    // Show success step
                    document.getElementById('passwordStep').style.display = 'none';
                    document.getElementById('successStep').style.display = 'block';
                } else {
                    showAlert(data.error || 'Failed to reset password');
                }
            } catch (error) {
                console.error('Error:', error);
                showAlert('Network error. Please try again.');
            } finally {
                setButtonLoading(false);
            }
        });

        // Auto-focus first input on page load
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('newPassword').focus();
        });

        // Real-time password match validation
        document.getElementById('confirmPassword').addEventListener('input', function(e) {
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = e.target.value;
            
            if (confirmPassword && newPassword !== confirmPassword) {
                e.target.style.borderColor = 'var(--danger)';
            } else {
                e.target.style.borderColor = 'var(--light-gray)';
            }
        });
    </script>
</body>
</html>