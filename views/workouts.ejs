<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Workouts - Fit-With-AI</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #6C63FF;
            --secondary: #4D44DB;
            --accent: #FF6584;
            --light: #F8F9FA;
            --dark: #343A40;
            --success: #28A745;
            --warning: #FFC107;
            --danger: #DC3545;
            --gray: #6C757D;
            --light-gray: #E9ECEF;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            background: radial-gradient(ellipse at top, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
            color: #ffffff;
            overflow-x: hidden;
            min-height: 100vh;
        }
        
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 40% 40%, rgba(120, 219, 255, 0.2) 0%, transparent 50%);
            pointer-events: none;
            z-index: -1;
        }
        
        .dashboard-container {
            display: grid;
            grid-template-columns: 280px 1fr;
            min-height: 100vh;
            gap: 20px;
            padding: 20px;
        }
        
        .sidebar {
            background: transparent;
            border: none;
            padding: 30px 20px;
            position: sticky;
            top: 20px;
            height: fit-content;
        }
        
        .sidebar-header {
            display: flex;
            align-items: center;
            margin-bottom: 2rem;
            padding: 0 1rem;
        }
        
        .sidebar-header img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }
        
        .user-name {
            font-weight: 600;
            margin: 0;
        }
        
        .user-plan {
            font-size: 0.8rem;
            color: var(--primary);
            background: rgba(108, 99, 255, 0.1);
            padding: 2px 8px;
            border-radius: 20px;
            margin-top: 5px;
        }
        
        .nav-menu {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .nav-item {
            margin-bottom: 5px;
        }
        
        .nav-link {
            display: flex;
            align-items: center;
            padding: 12px 15px;
            color: rgba(255, 255, 255, 0.7);
            text-decoration: none;
            border-radius: 15px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .nav-link::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
            transition: left 0.5s;
        }
        
        .nav-link:hover::before {
            left: 100%;
        }
        
        .nav-link:hover, .nav-link.active {
            background: rgba(108, 99, 255, 0.2);
            color: #ffffff;
            transform: translateX(5px);
        }
        
        .nav-link i {
            margin-right: 10px;
            font-size: 1.2rem;
        }
        
        .main-content {
            display: flex;
            flex-direction: column;
            gap: 25px;
        }
        
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .page-title {
            font-size: 2rem;
            font-weight: 600;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .header-actions {
            display: flex;
            gap: 15px;
            align-items: center;
        }
        
        .search-container {
            position: relative;
        }
        
        .search-input {
            width: 300px;
            padding: 12px 16px 12px 45px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 12px;
            color: white;
            font-size: 0.95rem;
            font-family: 'Poppins', sans-serif;
            transition: all 0.3s ease;
        }
        
        .search-input::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }
        
        .search-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(108, 99, 255, 0.1);
        }
        
        .search-icon {
            position: absolute;
            left: 16px;
            top: 50%;
            transform: translateY(-50%);
            color: rgba(255, 255, 255, 0.6);
        }
        
        .btn {
            padding: 12px 20px;
            border-radius: 12px;
            font-family: 'Poppins', sans-serif;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            border: none;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .btn-outline {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
        }
        
        .btn-outline:hover {
            background: rgba(255, 255, 255, 0.2);
        }
        
        .btn-primary {
            background: var(--primary);
            color: white;
        }
        
        .btn-primary:hover {
            background: var(--secondary);
        }
        
        /* Gamification Stats */
        .gamification-bar {
            background: transparent;
            border: none;
            padding: 30px;
            margin-bottom: 25px;
            color: white;
            position: relative;
            overflow: hidden;
        }
        
        .gamification-bar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(108, 99, 255, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(108, 99, 255, 0.08) 100%);
            z-index: -1;
        }

        .gamification-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .stat-item {
            display: flex;
            align-items: center;
            gap: 12px;
            background: transparent;
            padding: 15px;
            transition: all 0.3s ease;
        }

        .stat-item:hover {
            background: rgba(255, 255, 255, 0.1);
            transform: translateY(-2px);
        }

        .stat-icon {
            font-size: 1.8rem;
            line-height: 1;
        }

        .stat-info {
            flex: 1;
        }

        .stat-label {
            font-size: 0.8rem;
            opacity: 0.8;
            margin-bottom: 2px;
        }

        .stat-value {
            font-size: 1.2rem;
            font-weight: 600;
            line-height: 1;
        }

        .xp-progress {
            position: relative;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            height: 12px;
            overflow: hidden;
        }

        .xp-progress-bar {
            background: rgba(255, 255, 255, 0.8);
            height: 100%;
            border-radius: 10px;
            width: 0%;
            transition: width 0.5s ease;
            position: relative;
        }

        .xp-progress-bar::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
            animation: shimmer 2s infinite;
        }

        @keyframes shimmer {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }

        .xp-progress-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 0.8rem;
            font-weight: 500;
            text-shadow: 0 1px 2px rgba(0,0,0,0.3);
        }
        
        /* Category Tabs */
        .category-tabs {
            display: flex;
            gap: 8px;
            margin-bottom: 25px;
            overflow-x: auto;
            padding-bottom: 8px;
        }
        
        .category-tab {
            padding: 12px 24px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 25px;
            color: rgba(255, 255, 255, 0.8);
            cursor: pointer;
            transition: all 0.3s ease;
            white-space: nowrap;
            font-weight: 500;
            font-family: 'Poppins', sans-serif;
        }
        
        .category-tab.active {
            background: var(--primary);
            border-color: var(--primary);
            color: white;
            box-shadow: 0 4px 12px rgba(108, 99, 255, 0.3);
        }
        
        .category-tab:hover:not(.active) {
            background: rgba(255, 255, 255, 0.2);
            color: white;
        }
        
        /* Workout Grid */
        .workout-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
            gap: 25px;
        }
        
        .workout-card {
            background: transparent;
            border: none;
            overflow: hidden;
            transition: all 0.4s ease;
            position: relative;
        }
        
        .workout-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(108, 99, 255, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(108, 99, 255, 0.08) 100%);
            z-index: -1;
        }
        
        .workout-card:hover {
            transform: translateY(-10px) scale(1.02);
            box-shadow: 0 25px 50px rgba(108, 99, 255, 0.3);
        }
        
        .workout-image {
            height: 200px;
            background-size: cover;
            background-position: center;
            position: relative;
            overflow: hidden;
        }
        
        .workout-image::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 50%;
            background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));
        }
        
        .xp-reward {
            position: absolute;
            top: 15px;
            right: 15px;
            background: linear-gradient(135deg, #FFD700, #FFA500);
            color: #333;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            box-shadow: 0 4px 12px rgba(255, 215, 0, 0.4);
            z-index: 2;
        }
        
        .play-overlay {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 60px;
            height: 60px;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: all 0.3s ease;
            z-index: 2;
        }
        
        .workout-card:hover .play-overlay {
            opacity: 1;
        }
        
        .play-overlay i {
            color: var(--primary);
            font-size: 1.5rem;
            margin-left: 4px;
        }
        
        .workout-content {
            padding: 25px;
        }
        
        .workout-title {
            font-size: 1.3rem;
            font-weight: 600;
            color: white;
            margin-bottom: 8px;
            line-height: 1.3;
        }
        
        .workout-meta {
            display: flex;
            gap: 20px;
            margin-bottom: 12px;
            font-size: 0.9rem;
            color: rgba(255, 255, 255, 0.7);
        }
        
        .workout-meta span {
            display: flex;
            align-items: center;
            gap: 6px;
        }
        
        .workout-description {
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.95rem;
            line-height: 1.5;
            margin-bottom: 20px;
        }
        
        .workout-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .difficulty-badge {
            padding: 6px 16px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .difficulty-beginner {
            background: rgba(40, 167, 69, 0.2);
            color: var(--success);
            border: 1px solid rgba(40, 167, 69, 0.3);
        }
        
        .difficulty-intermediate {
            background: rgba(255, 193, 7, 0.2);
            color: var(--warning);
            border: 1px solid rgba(255, 193, 7, 0.3);
        }
        
        .difficulty-advanced {
            background: rgba(220, 53, 69, 0.2);
            color: var(--danger);
            border: 1px solid rgba(220, 53, 69, 0.3);
        }
        
        .start-btn {
            padding: 12px 24px;
            background: var(--primary);
            color: white;
            border: none;
            border-radius: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            font-family: 'Poppins', sans-serif;
        }
        
        .start-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }
        
        .start-btn:hover::before {
            left: 100%;
        }
        
        .start-btn:hover {
            background: var(--secondary);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(108, 99, 255, 0.4);
        }
        
        /* Video Modal */
        .video-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            z-index: 1000;
            backdrop-filter: blur(10px);
        }
        
        .video-modal.active {
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .video-container {
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
            border-radius: 20px;
            padding: 30px;
            max-width: 90vw;
            max-height: 90vh;
            position: relative;
            border: 1px solid rgba(255,255,255,0.1);
            box-shadow: 0 20px 60px rgba(0,0,0,0.5);
        }
        
        .video-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .video-title {
            color: white;
            font-size: 1.5rem;
            font-weight: 600;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .close-btn {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }
        
        .close-btn:hover {
            background: rgba(255, 255, 255, 0.2);
        }
        
        .video-player {
            width: 800px;
            height: 450px;
            border-radius: 12px;
            overflow: hidden;
        }
        
        .video-controls {
            display: flex;
            justify-content: center;
            gap: 16px;
            margin-top: 20px;
        }
        
        .control-btn {
            padding: 12px 20px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 12px;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
            font-family: 'Poppins', sans-serif;
            font-weight: 500;
        }
        
        .control-btn:hover {
            background: rgba(255, 255, 255, 0.2);
        }
        
        .control-btn.primary {
            background: var(--success);
            border-color: var(--success);
        }
        
        .control-btn.primary:hover {
            background: #218838;
        }
        
        /* Loading States */
        .loading-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
            gap: 25px;
        }
        
        .loading-card {
            background: transparent;
            border: none;
            overflow: hidden;
            animation: pulse 2s infinite;
            position: relative;
        }
        
        .loading-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(108, 99, 255, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(108, 99, 255, 0.08) 100%);
            z-index: -1;
        }
        
        .loading-image {
            height: 200px;
            background: rgba(255, 255, 255, 0.1);
        }
        
        .loading-content {
            padding: 25px;
        }
        
        .loading-line {
            height: 16px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            margin-bottom: 12px;
        }
        
        .loading-line.short {
            width: 60%;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        
        /* Responsive Design */
        @media (max-width: 768px) {
            .dashboard-container {
                grid-template-columns: 1fr;
                padding: 10px;
            }
            
            .sidebar {
                display: none;
            }
            
            .main-content {
                padding: 1rem;
            }
            
            .page-header {
                flex-direction: column;
                gap: 20px;
                align-items: stretch;
            }
            
            .header-actions {
                flex-direction: column;
                gap: 12px;
            }
            
            .search-input {
                width: 100%;
            }
            
            .workout-grid {
                grid-template-columns: 1fr;
            }
            
            .video-player {
                width: 90vw;
                height: 50vw;
                max-width: 800px;
                max-height: 450px;
            }
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="/css/voice-assistant.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"></script>
</head>
<body>
    <div class="dashboard-container">
        <!-- Sidebar Navigation -->
        <%- include('partials/sidebar', { currentPage: 'workouts' }) %>
        
        <!-- Main Content -->
        <div class="main-content">
            <div class="page-header">
                <h1 class="page-title">Workouts</h1>
                <div class="header-actions">
                    <div class="search-container">
                        <i class="fas fa-search search-icon"></i>
                        <input type="text" class="search-input" placeholder="Search workouts..." id="searchInput">
                    </div>
                    <button class="btn btn-outline" id="filterBtn">
                        <i class="fas fa-sliders-h"></i>
                        <span>Filters</span>
                    </button>
                </div>
            </div>
            
            <!-- Gamification Stats Bar -->
            <div class="gamification-bar">
                <div class="gamification-stats">
                    <div class="stat-item">
                        <div class="stat-icon">🏆</div>
                        <div class="stat-info">
                            <div class="stat-label">Level</div>
                            <div class="stat-value" id="userLevel">1</div>
                        </div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-icon">⚡</div>
                        <div class="stat-info">
                            <div class="stat-label">XP</div>
                            <div class="stat-value" id="userXP">0</div>
                        </div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-icon">🔥</div>
                        <div class="stat-info">
                            <div class="stat-label">Streak</div>
                            <div class="stat-value" id="workoutStreak">0</div>
                        </div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-icon">🎯</div>
                        <div class="stat-info">
                            <div class="stat-label">Today's Goal</div>
                            <div class="stat-value" id="todayGoal">0/1</div>
                        </div>
                    </div>
                </div>
                <div class="xp-progress">
                    <div class="xp-progress-bar" id="xpProgressBar"></div>
                    <div class="xp-progress-text" id="xpProgressText">0 XP to next level</div>
                </div>
            </div>
            
            <!-- Category Tabs -->
            <div class="category-tabs">
                <button class="category-tab active" data-category="all">All Workouts</button>
                <button class="category-tab" data-category="strength">Strength</button>
                <button class="category-tab" data-category="cardio">Cardio</button>
                <button class="category-tab" data-category="hiit">HIIT</button>
                <button class="category-tab" data-category="yoga">Yoga</button>
                <button class="category-tab" data-category="pilates">Pilates</button>
                <button class="category-tab" data-category="dance">Dance</button>
            </div>
            
            <!-- Quick Actions -->
            <div class="quick-actions" style="display: flex; gap: 15px; margin-bottom: 25px; flex-wrap: wrap;">
                <button class="btn btn-primary" id="createWorkoutBtn">
                    <i class="fas fa-plus"></i>
                    <span>Create Custom Workout</span>
                </button>
                <button class="btn btn-outline" id="workoutTimerBtn">
                    <i class="fas fa-stopwatch"></i>
                    <span>Workout Timer</span>
                </button>
                <button class="btn btn-outline" id="muscleMapBtn">
                    <i class="fas fa-user"></i>
                    <span>Muscle Map</span>
                </button>
                <button class="btn btn-outline" id="workoutPlannerBtn">
                    <i class="fas fa-calendar-week"></i>
                    <span>Weekly Planner</span>
                </button>
            </div>
            
            <!-- Workout Grid -->
            <div class="workout-grid" id="workoutGrid">
                <!-- Workouts will be loaded here -->
            </div>
        </div>
    </div>
    
    <!-- Workout Timer Modal -->
    <div class="video-modal" id="timerModal">
        <div class="video-container">
            <div class="video-header">
                <h2 class="video-title" id="timerTitle">Workout Timer</h2>
                <button class="close-btn" id="closeTimerModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="timer-content" style="text-align: center; padding: 40px;">
                <div class="timer-display" style="font-size: 4rem; font-weight: 800; color: white; margin-bottom: 30px;" id="timerDisplay">00:00</div>
                <div class="timer-controls" style="display: flex; gap: 15px; justify-content: center; margin-bottom: 30px;">
                    <button class="control-btn" id="startTimer">
                        <i class="fas fa-play"></i>
                        <span>Start</span>
                    </button>
                    <button class="control-btn" id="pauseTimer">
                        <i class="fas fa-pause"></i>
                        <span>Pause</span>
                    </button>
                    <button class="control-btn" id="resetTimer">
                        <i class="fas fa-redo"></i>
                        <span>Reset</span>
                    </button>
                </div>
                <div class="timer-presets" style="display: flex; gap: 10px; justify-content: center; flex-wrap: wrap;">
                    <button class="preset-btn" data-time="300">5 min</button>
                    <button class="preset-btn" data-time="900">15 min</button>
                    <button class="preset-btn" data-time="1800">30 min</button>
                    <button class="preset-btn" data-time="2700">45 min</button>
                    <button class="preset-btn" data-time="3600">60 min</button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Custom Workout Modal -->
    <div class="video-modal" id="customWorkoutModal">
        <div class="video-container" style="max-width: 600px;">
            <div class="video-header">
                <h2 class="video-title">Create Custom Workout</h2>
                <button class="close-btn" id="closeCustomModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="custom-workout-form" style="padding: 30px;">
                <div style="margin-bottom: 20px;">
                    <label style="color: white; margin-bottom: 8px; display: block;">Workout Name:</label>
                    <input type="text" id="customWorkoutName" placeholder="My Custom Workout" style="width: 100%; padding: 12px; border: 1px solid rgba(255,255,255,0.2); border-radius: 8px; background: rgba(255,255,255,0.1); color: white;">
                </div>
                <div style="display: flex; gap: 15px; margin-bottom: 20px;">
                    <div style="flex: 1;">
                        <label style="color: white; margin-bottom: 8px; display: block;">Duration (min):</label>
                        <input type="number" id="customDuration" placeholder="30" style="width: 100%; padding: 12px; border: 1px solid rgba(255,255,255,0.2); border-radius: 8px; background: rgba(255,255,255,0.1); color: white;">
                    </div>
                    <div style="flex: 1;">
                        <label style="color: white; margin-bottom: 8px; display: block;">Difficulty:</label>
                        <select id="customDifficulty" style="width: 100%; padding: 12px; border: 1px solid rgba(255,255,255,0.2); border-radius: 8px; background: rgba(255,255,255,0.1); color: white;">
                            <option value="beginner">Beginner</option>
                            <option value="intermediate">Intermediate</option>
                            <option value="advanced">Advanced</option>
                        </select>
                    </div>
                </div>
                <div style="margin-bottom: 20px;">
                    <label style="color: white; margin-bottom: 8px; display: block;">Exercises:</label>
                    <div id="exerciseList" style="max-height: 200px; overflow-y: auto; border: 1px solid rgba(255,255,255,0.2); border-radius: 8px; padding: 15px; background: rgba(255,255,255,0.05);">
                        <!-- Exercises will be added here -->
                    </div>
                    <button type="button" id="addExerciseBtn" style="margin-top: 10px; padding: 8px 16px; background: var(--primary); color: white; border: none; border-radius: 8px; cursor: pointer;">
                        <i class="fas fa-plus"></i> Add Exercise
                    </button>
                </div>
                <div class="control-btn-group" style="display: flex; gap: 15px; justify-content: center;">
                    <button class="control-btn" id="saveCustomWorkout">
                        <i class="fas fa-save"></i>
                        <span>Save Workout</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Muscle Map Modal -->
    <div class="video-modal" id="muscleMapModal">
        <div class="video-container" style="max-width: 800px;">
            <div class="video-header">
                <h2 class="video-title">Muscle Map</h2>
                <button class="close-btn" id="closeMuscleModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="muscle-map-content" style="padding: 30px; text-align: center;">
                <div class="muscle-groups" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 20px; margin-bottom: 30px;">
                    <div class="muscle-group" data-muscle="chest" style="padding: 20px; background: rgba(255,255,255,0.1); border-radius: 12px; cursor: pointer; transition: all 0.3s ease;">
                        <div style="font-size: 2rem; margin-bottom: 10px;">💪</div>
                        <div style="color: white; font-weight: 600;">Chest</div>
                        <div style="color: rgba(255,255,255,0.7); font-size: 0.8rem;">0 workouts</div>
                    </div>
                    <div class="muscle-group" data-muscle="back" style="padding: 20px; background: rgba(255,255,255,0.1); border-radius: 12px; cursor: pointer; transition: all 0.3s ease;">
                        <div style="font-size: 2rem; margin-bottom: 10px;">🏋️</div>
                        <div style="color: white; font-weight: 600;">Back</div>
                        <div style="color: rgba(255,255,255,0.7); font-size: 0.8rem;">0 workouts</div>
                    </div>
                    <div class="muscle-group" data-muscle="legs" style="padding: 20px; background: rgba(255,255,255,0.1); border-radius: 12px; cursor: pointer; transition: all 0.3s ease;">
                        <div style="font-size: 2rem; margin-bottom: 10px;">🦵</div>
                        <div style="color: white; font-weight: 600;">Legs</div>
                        <div style="color: rgba(255,255,255,0.7); font-size: 0.8rem;">0 workouts</div>
                    </div>
                    <div class="muscle-group" data-muscle="arms" style="padding: 20px; background: rgba(255,255,255,0.1); border-radius: 12px; cursor: pointer; transition: all 0.3s ease;">
                        <div style="font-size: 2rem; margin-bottom: 10px;">💪</div>
                        <div style="color: white; font-weight: 600;">Arms</div>
                        <div style="color: rgba(255,255,255,0.7); font-size: 0.8rem;">0 workouts</div>
                    </div>
                    <div class="muscle-group" data-muscle="core" style="padding: 20px; background: rgba(255,255,255,0.1); border-radius: 12px; cursor: pointer; transition: all 0.3s ease;">
                        <div style="font-size: 2rem; margin-bottom: 10px;">🎯</div>
                        <div style="color: white; font-weight: 600;">Core</div>
                        <div style="color: rgba(255,255,255,0.7); font-size: 0.8rem;">0 workouts</div>
                    </div>
                    <div class="muscle-group" data-muscle="shoulders" style="padding: 20px; background: rgba(255,255,255,0.1); border-radius: 12px; cursor: pointer; transition: all 0.3s ease;">
                        <div style="font-size: 2rem; margin-bottom: 10px;">🤸</div>
                        <div style="color: white; font-weight: 600;">Shoulders</div>
                        <div style="color: rgba(255,255,255,0.7); font-size: 0.8rem;">0 workouts</div>
                    </div>
                </div>
                <div id="muscleExercises" style="display: none; background: rgba(255,255,255,0.05); border-radius: 12px; padding: 20px;">
                    <h3 style="color: white; margin-bottom: 15px;">Recommended Exercises</h3>
                    <div id="exerciseRecommendations"></div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Weekly Planner Modal -->
    <div class="video-modal" id="plannerModal">
        <div class="video-container" style="max-width: 900px;">
            <div class="video-header">
                <h2 class="video-title">Weekly Workout Planner</h2>
                <button class="close-btn" id="closePlannerModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="planner-content" style="padding: 30px;">
                <div class="week-view" style="display: grid; grid-template-columns: repeat(7, 1fr); gap: 15px;">
                    <div class="day-column" data-day="monday">
                        <div class="day-header" style="background: var(--primary); color: white; padding: 10px; border-radius: 8px 8px 0 0; text-align: center; font-weight: 600;">Monday</div>
                        <div class="day-workouts" style="background: rgba(255,255,255,0.05); min-height: 200px; padding: 15px; border-radius: 0 0 8px 8px;">
                            <div class="add-workout-btn" style="width: 100%; padding: 10px; background: rgba(255,255,255,0.1); border: 1px dashed rgba(255,255,255,0.3); border-radius: 8px; color: rgba(255,255,255,0.7); text-align: center; cursor: pointer; transition: all 0.3s ease;">
                                <i class="fas fa-plus"></i> Add Workout
                            </div>
                        </div>
                    </div>
                    <div class="day-column" data-day="tuesday">
                        <div class="day-header" style="background: var(--primary); color: white; padding: 10px; border-radius: 8px 8px 0 0; text-align: center; font-weight: 600;">Tuesday</div>
                        <div class="day-workouts" style="background: rgba(255,255,255,0.05); min-height: 200px; padding: 15px; border-radius: 0 0 8px 8px;">
                            <div class="add-workout-btn" style="width: 100%; padding: 10px; background: rgba(255,255,255,0.1); border: 1px dashed rgba(255,255,255,0.3); border-radius: 8px; color: rgba(255,255,255,0.7); text-align: center; cursor: pointer; transition: all 0.3s ease;">
                                <i class="fas fa-plus"></i> Add Workout
                            </div>
                        </div>
                    </div>
                    <div class="day-column" data-day="wednesday">
                        <div class="day-header" style="background: var(--primary); color: white; padding: 10px; border-radius: 8px 8px 0 0; text-align: center; font-weight: 600;">Wednesday</div>
                        <div class="day-workouts" style="background: rgba(255,255,255,0.05); min-height: 200px; padding: 15px; border-radius: 0 0 8px 8px;">
                            <div class="add-workout-btn" style="width: 100%; padding: 10px; background: rgba(255,255,255,0.1); border: 1px dashed rgba(255,255,255,0.3); border-radius: 8px; color: rgba(255,255,255,0.7); text-align: center; cursor: pointer; transition: all 0.3s ease;">
                                <i class="fas fa-plus"></i> Add Workout
                            </div>
                        </div>
                    </div>
                    <div class="day-column" data-day="thursday">
                        <div class="day-header" style="background: var(--primary); color: white; padding: 10px; border-radius: 8px 8px 0 0; text-align: center; font-weight: 600;">Thursday</div>
                        <div class="day-workouts" style="background: rgba(255,255,255,0.05); min-height: 200px; padding: 15px; border-radius: 0 0 8px 8px;">
                            <div class="add-workout-btn" style="width: 100%; padding: 10px; background: rgba(255,255,255,0.1); border: 1px dashed rgba(255,255,255,0.3); border-radius: 8px; color: rgba(255,255,255,0.7); text-align: center; cursor: pointer; transition: all 0.3s ease;">
                                <i class="fas fa-plus"></i> Add Workout
                            </div>
                        </div>
                    </div>
                    <div class="day-column" data-day="friday">
                        <div class="day-header" style="background: var(--primary); color: white; padding: 10px; border-radius: 8px 8px 0 0; text-align: center; font-weight: 600;">Friday</div>
                        <div class="day-workouts" style="background: rgba(255,255,255,0.05); min-height: 200px; padding: 15px; border-radius: 0 0 8px 8px;">
                            <div class="add-workout-btn" style="width: 100%; padding: 10px; background: rgba(255,255,255,0.1); border: 1px dashed rgba(255,255,255,0.3); border-radius: 8px; color: rgba(255,255,255,0.7); text-align: center; cursor: pointer; transition: all 0.3s ease;">
                                <i class="fas fa-plus"></i> Add Workout
                            </div>
                        </div>
                    </div>
                    <div class="day-column" data-day="saturday">
                        <div class="day-header" style="background: var(--accent); color: white; padding: 10px; border-radius: 8px 8px 0 0; text-align: center; font-weight: 600;">Saturday</div>
                        <div class="day-workouts" style="background: rgba(255,255,255,0.05); min-height: 200px; padding: 15px; border-radius: 0 0 8px 8px;">
                            <div class="add-workout-btn" style="width: 100%; padding: 10px; background: rgba(255,255,255,0.1); border: 1px dashed rgba(255,255,255,0.3); border-radius: 8px; color: rgba(255,255,255,0.7); text-align: center; cursor: pointer; transition: all 0.3s ease;">
                                <i class="fas fa-plus"></i> Add Workout
                            </div>
                        </div>
                    </div>
                    <div class="day-column" data-day="sunday">
                        <div class="day-header" style="background: var(--accent); color: white; padding: 10px; border-radius: 8px 8px 0 0; text-align: center; font-weight: 600;">Sunday</div>
                        <div class="day-workouts" style="background: rgba(255,255,255,0.05); min-height: 200px; padding: 15px; border-radius: 0 0 8px 8px;">
                            <div class="add-workout-btn" style="width: 100%; padding: 10px; background: rgba(255,255,255,0.1); border: 1px dashed rgba(255,255,255,0.3); border-radius: 8px; color: rgba(255,255,255,0.7); text-align: center; cursor: pointer; transition: all 0.3s ease;">
                                <i class="fas fa-plus"></i> Add Workout
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let currentWorkout = null;
        let workouts = [];
        let filteredWorkouts = [];
        
        // Initialize app
        document.addEventListener('DOMContentLoaded', function() {
            loadGamificationData();
            loadWorkouts();
            initializeEventListeners();
            initializeAnimations();
        });
        
        // Initialize GSAP animations
        function initializeAnimations() {
            gsap.registerPlugin(ScrollTrigger);
            
            // Animate gamification bar
            gsap.fromTo('.gamification-bar', 
                { y: -50, opacity: 0 },
                { 
                    y: 0, 
                    opacity: 1,
                    duration: 0.8,
                    ease: "power2.out"
                }
            );
            
            // Animate category tabs
            gsap.fromTo('.category-tab', 
                { x: -30, opacity: 0 },
                { 
                    x: 0, 
                    opacity: 1,
                    duration: 0.6,
                    stagger: 0.1,
                    delay: 0.3,
                    ease: "power2.out"
                }
            );
        }
        
        // Load gamification data
        async function loadGamificationData() {
            try {
                const response = await fetch('/api/gamification-data');
                const result = await response.json();
                
                if (result.success) {
                    updateGamificationDisplay(result.data);
                }
            } catch (error) {
                console.error('Error loading gamification data:', error);
                updateGamificationDisplay({
                    level: 1,
                    totalXP: 0,
                    progressToNextLevel: 0,
                    streaks: { workout: { current: 0 } }
                });
            }
        }
        
        // Update gamification display
        function updateGamificationDisplay(data) {
            document.getElementById('userLevel').textContent = data.level || 1;
            document.getElementById('userXP').textContent = (data.totalXP || 0).toLocaleString();
            document.getElementById('workoutStreak').textContent = data.streaks?.workout?.current || 0;
            document.getElementById('todayGoal').textContent = '0/1';
            
            const progressPercent = data.progressToNextLevel || 0;
            document.getElementById('xpProgressBar').style.width = `${progressPercent}%`;
            document.getElementById('xpProgressText').textContent = `${data.xpToNextLevel || 0} XP to next level`;
        }
        
        // Load workouts
        async function loadWorkouts() {
            showLoadingState();
            
            try {
                workouts = getDefaultWorkouts();
                filteredWorkouts = [...workouts];
                displayWorkouts(filteredWorkouts);
            } catch (error) {
                console.error('Error loading workouts:', error);
                showError('Failed to load workouts');
            }
        }
        
        // Dynamic workout generation
        function getDefaultWorkouts() {
            const templates = [
                { name: "HIIT Blast", category: "hiit", baseCalories: 400, baseDuration: 30 },
                { name: "Strength Builder", category: "strength", baseCalories: 320, baseDuration: 45 },
                { name: "Yoga Flow", category: "yoga", baseCalories: 150, baseDuration: 25 },
                { name: "Dance Party", category: "dance", baseCalories: 450, baseDuration: 35 },
                { name: "Core Crusher", category: "strength", baseCalories: 200, baseDuration: 20 },
                { name: "Pilates Power", category: "pilates", baseCalories: 280, baseDuration: 60 },
                { name: "Cardio Burn", category: "cardio", baseCalories: 380, baseDuration: 40 },
                { name: "Flexibility Focus", category: "yoga", baseCalories: 120, baseDuration: 30 }
            ];
            
            const difficulties = ['beginner', 'intermediate', 'advanced'];
            const bodyParts = ['Full Body', 'Upper Body', 'Lower Body', 'Core'];
            const timeVars = ['Morning', 'Evening', 'Quick', 'Power', 'Intense'];
            
            return templates.map((template, index) => {
                const difficulty = difficulties[Math.floor(Math.random() * difficulties.length)];
                const bodyPart = bodyParts[Math.floor(Math.random() * bodyParts.length)];
                const timeVar = timeVars[Math.floor(Math.random() * timeVars.length)];
                
                const multiplier = difficulty === 'beginner' ? 0.8 : difficulty === 'advanced' ? 1.3 : 1.1;
                const duration = Math.round(template.baseDuration * multiplier);
                const calories = Math.round(template.baseCalories * multiplier);
                
                return {
                    id: index + 1,
                    title: `${timeVar} ${bodyPart} ${template.name}`,
                    duration: `${duration} min`,
                    calories: `${calories} cal`,
                    difficulty: difficulty,
                    category: template.category,
                    description: `Dynamic ${template.category} workout targeting ${bodyPart.toLowerCase()} for ${difficulty} level fitness enthusiasts.`,
                    image: `https://images.unsplash.com/photo-${['1571019613454-1cb2f99b2d8b', '1571019614242-c5c5dee9f50b', '1545205597-3d9d02c29597', '1594736797933-d0401ba2fe65'][Math.floor(Math.random() * 4)]}?w=400`,
                    xpReward: Math.round(duration * 2 + (difficulty === 'advanced' ? 20 : 10)),
                    exercises: generateExercises(template.category, difficulty),
                    targetMuscles: getTargetMuscles(template.category)
                };
            });
        }
        
        function generateExercises(category, difficulty) {
            const exerciseBank = {
                hiit: ['Burpees', 'Mountain Climbers', 'Jump Squats', 'High Knees', 'Plank Jacks'],
                strength: ['Push-ups', 'Squats', 'Deadlifts', 'Pull-ups', 'Bench Press'],
                yoga: ['Downward Dog', 'Warrior Pose', 'Tree Pose', 'Sun Salutation'],
                cardio: ['Running', 'Cycling', 'Jumping Jacks', 'Step-ups'],
                dance: ['Hip Hop', 'Salsa', 'Zumba', 'Jazz Moves'],
                pilates: ['Hundred', 'Roll Up', 'Teaser', 'Plank']
            };
            
            const exercises = exerciseBank[category] || exerciseBank.hiit;
            const count = difficulty === 'beginner' ? 4 : difficulty === 'advanced' ? 7 : 5;
            return exercises.slice(0, count);
        }
        
        function getTargetMuscles(category) {
            const muscles = {
                hiit: ['Full Body', 'Core', 'Legs'],
                strength: ['Chest', 'Back', 'Arms'],
                yoga: ['Flexibility', 'Balance', 'Core'],
                cardio: ['Heart', 'Legs', 'Endurance'],
                dance: ['Coordination', 'Legs', 'Core'],
                pilates: ['Core', 'Posture', 'Stability']
            };
            return muscles[category] || muscles.hiit;
        }
        
        // Display workouts
        function displayWorkouts(workoutsToShow) {
            const grid = document.getElementById('workoutGrid');
            
            if (workoutsToShow.length === 0) {
                grid.innerHTML = `
                    <div style="grid-column: 1 / -1; text-align: center; padding: 60px 20px;">
                        <div style="font-size: 4rem; margin-bottom: 20px; opacity: 0.5;">🔍</div>
                        <h3 style="color: white; margin-bottom: 10px;">No workouts found</h3>
                        <p style="color: rgba(255, 255, 255, 0.7);">Try adjusting your search or filters</p>
                    </div>
                `;
                return;
            }
            
            grid.innerHTML = workoutsToShow.map((workout, index) => `
                <div class="workout-card" data-workout-id="${workout.id}" style="animation-delay: ${index * 0.1}s;">
                    <div class="workout-image" style="background-image: url('${workout.image}')">
                        <div class="xp-reward">⚡ +${workout.xpReward} XP</div>
                        <div style="position: absolute; top: 15px; left: 15px;">
                            <span style="background: rgba(0,0,0,0.7); color: white; padding: 4px 8px; border-radius: 12px; font-size: 0.7rem;">${workout.targetMuscles[0]}</span>
                        </div>
                        <div class="play-overlay">
                            <i class="fas fa-dumbbell"></i>
                        </div>
                    </div>
                    <div class="workout-content">
                        <h3 class="workout-title">${workout.title}</h3>
                        <div class="workout-meta">
                            <span><i class="far fa-clock"></i> ${workout.duration}</span>
                            <span><i class="fas fa-fire"></i> ${workout.calories}</span>
                            <span><i class="fas fa-list"></i> ${workout.exercises.length} exercises</span>
                        </div>
                        <p class="workout-description">${workout.description}</p>
                        <div style="display: flex; gap: 5px; margin: 10px 0; flex-wrap: wrap;">
                            ${workout.targetMuscles.slice(0, 2).map(muscle => 
                                `<span style="background: rgba(108, 99, 255, 0.2); color: var(--primary); padding: 2px 8px; border-radius: 10px; font-size: 0.7rem;">${muscle}</span>`
                            ).join('')}
                        </div>
                        <div class="workout-footer">
                            <span class="difficulty-badge difficulty-${workout.difficulty}">
                                ${workout.difficulty}
                            </span>
                            <button class="start-btn" onclick="startWorkout(${workout.id})" onmouseover="this.innerHTML='Let\'s Go! 💪'" onmouseout="this.innerHTML='Start Workout'">
                                Start Workout
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
            
            // Animate workout cards
            gsap.fromTo('.workout-card', 
                { y: 50, opacity: 0, scale: 0.9 },
                { 
                    y: 0, 
                    opacity: 1, 
                    scale: 1,
                    duration: 0.8,
                    stagger: 0.1,
                    ease: "back.out(1.7)"
                }
            );
        }
        
        // Show loading state
        function showLoadingState() {
            const grid = document.getElementById('workoutGrid');
            grid.innerHTML = Array(6).fill().map(() => `
                <div class="loading-card">
                    <div class="loading-image"></div>
                    <div class="loading-content">
                        <div class="loading-line"></div>
                        <div class="loading-line short"></div>
                        <div class="loading-line"></div>
                    </div>
                </div>
            `).join('');
        }
        
        // Initialize event listeners
        function initializeEventListeners() {
            // Search functionality
            const searchInput = document.getElementById('searchInput');
            let searchTimeout;
            
            searchInput.addEventListener('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    const query = this.value.toLowerCase().trim();
                    if (query === '') {
                        filteredWorkouts = [...workouts];
                    } else {
                        filteredWorkouts = workouts.filter(workout => 
                            workout.title.toLowerCase().includes(query) ||
                            workout.description.toLowerCase().includes(query) ||
                            workout.category.toLowerCase().includes(query)
                        );
                    }
                    displayWorkouts(filteredWorkouts);
                }, 300);
            });
            
            // Category tabs
            const categoryTabs = document.querySelectorAll('.category-tab');
            categoryTabs.forEach(tab => {
                tab.addEventListener('click', function() {
                    categoryTabs.forEach(t => t.classList.remove('active'));
                    this.classList.add('active');
                    
                    const category = this.dataset.category;
                    if (category === 'all') {
                        filteredWorkouts = [...workouts];
                    } else {
                        filteredWorkouts = workouts.filter(workout => workout.category === category);
                    }
                    displayWorkouts(filteredWorkouts);
                });
            });
            
            // Feature buttons
            document.getElementById('createWorkoutBtn').addEventListener('click', () => {
                document.getElementById('customWorkoutModal').classList.add('active');
                document.body.style.overflow = 'hidden';
            });
            
            document.getElementById('workoutTimerBtn').addEventListener('click', () => {
                document.getElementById('timerModal').classList.add('active');
                document.body.style.overflow = 'hidden';
            });
            
            document.getElementById('muscleMapBtn').addEventListener('click', () => {
                document.getElementById('muscleMapModal').classList.add('active');
                document.body.style.overflow = 'hidden';
            });
            
            document.getElementById('workoutPlannerBtn').addEventListener('click', () => {
                document.getElementById('plannerModal').classList.add('active');
                document.body.style.overflow = 'hidden';
            });
            
            // Timer functionality
            let timerInterval, timerSeconds = 0, isRunning = false;
            
            document.getElementById('startTimer').addEventListener('click', () => {
                if (!isRunning) {
                    timerInterval = setInterval(() => {
                        timerSeconds++;
                        updateTimer();
                    }, 1000);
                    isRunning = true;
                }
            });
            
            document.getElementById('pauseTimer').addEventListener('click', () => {
                clearInterval(timerInterval);
                isRunning = false;
            });
            
            document.getElementById('resetTimer').addEventListener('click', () => {
                clearInterval(timerInterval);
                timerSeconds = 0;
                isRunning = false;
                updateTimer();
            });
            
            document.querySelectorAll('.preset-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    timerSeconds = parseInt(btn.dataset.time);
                    updateTimer();
                });
            });
            
            // Close modals
            ['closeTimerModal', 'closeCustomModal', 'closeMuscleModal', 'closePlannerModal'].forEach(id => {
                document.getElementById(id).addEventListener('click', () => {
                    document.querySelectorAll('.video-modal').forEach(modal => modal.classList.remove('active'));
                    document.body.style.overflow = 'auto';
                });
            });
            
            function updateTimer() {
                const mins = Math.floor(timerSeconds / 60);
                const secs = timerSeconds % 60;
                document.getElementById('timerDisplay').textContent = 
                    `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
            }
            
            // Close modal on outside click
            document.getElementById('videoModal').addEventListener('click', function(e) {
                if (e.target === this) {
                    closeModal();
                }
            });
            
            // Escape key to close modal
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    closeModal();
                }
            });
        }
        
        // Dynamic workout session
        function startWorkout(workoutId) {
            const workout = workouts.find(w => w.id === workoutId);
            if (!workout) return;
            
            currentWorkout = workout;
            
            const modal = document.createElement('div');
            modal.className = 'video-modal active';
            modal.innerHTML = `
                <div class="video-container" style="max-width: 700px;">
                    <div class="video-header">
                        <h2 class="video-title">${workout.title}</h2>
                        <button class="close-btn" onclick="this.closest('.video-modal').remove(); document.body.style.overflow='auto';">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div style="padding: 30px;">
                        <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 15px; margin-bottom: 20px; text-align: center;">
                            <div style="background: rgba(108, 99, 255, 0.2); padding: 15px; border-radius: 12px;">
                                <div style="color: var(--primary); font-size: 1.5rem; font-weight: 600;">${workout.duration}</div>
                                <div style="color: rgba(255,255,255,0.7); font-size: 0.8rem;">Duration</div>
                            </div>
                            <div style="background: rgba(255, 101, 132, 0.2); padding: 15px; border-radius: 12px;">
                                <div style="color: var(--accent); font-size: 1.5rem; font-weight: 600;">${workout.calories}</div>
                                <div style="color: rgba(255,255,255,0.7); font-size: 0.8rem;">Calories</div>
                            </div>
                            <div style="background: rgba(40, 167, 69, 0.2); padding: 15px; border-radius: 12px;">
                                <div style="color: var(--success); font-size: 1.5rem; font-weight: 600;">${workout.exercises.length}</div>
                                <div style="color: rgba(255,255,255,0.7); font-size: 0.8rem;">Exercises</div>
                            </div>
                        </div>
                        
                        <div style="max-height: 250px; overflow-y: auto; margin-bottom: 20px;">
                            <h3 style="color: white; margin-bottom: 15px;">Exercise List:</h3>
                            ${workout.exercises.map((exercise, index) => `
                                <div style="background: rgba(255,255,255,0.05); padding: 12px; border-radius: 8px; margin-bottom: 8px; display: flex; align-items: center; gap: 12px;">
                                    <div style="background: var(--primary); color: white; width: 25px; height: 25px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 0.8rem; font-weight: 600;">${index + 1}</div>
                                    <div style="flex: 1; color: white;">${exercise}</div>
                                    <div style="color: rgba(255,255,255,0.6); font-size: 0.8rem;">3 sets</div>
                                </div>
                            `).join('')}
                        </div>
                        
                        <div style="display: flex; gap: 15px; justify-content: center;">
                            <button class="control-btn" onclick="document.getElementById('timerModal').classList.add('active');">
                                <i class="fas fa-stopwatch"></i>
                                <span>Start Timer</span>
                            </button>
                            <button class="control-btn primary" onclick="completeWorkout(); this.closest('.video-modal').remove(); document.body.style.overflow='auto';">
                                <i class="fas fa-check"></i>
                                <span>Complete</span>
                            </button>
                        </div>
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
            document.body.style.overflow = 'hidden';
        }
        
        // Close modal
        function closeModal() {
            document.getElementById('videoModal').classList.remove('active');
            document.getElementById('videoFrame').src = '';
            document.body.style.overflow = 'auto';
            currentWorkout = null;
        }
        
        // Complete workout
        async function completeWorkout() {
            if (!currentWorkout) return;
            
            try {
                const workoutData = {
                    type: currentWorkout.title,
                    duration: parseInt(currentWorkout.duration),
                    calories: parseInt(currentWorkout.calories),
                    notes: `Completed ${currentWorkout.title}`,
                    source: 'youtube',
                    videoId: currentWorkout.videoId
                };
                
                const response = await fetch('/api/workouts', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(workoutData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showNotification(`Workout completed! +${currentWorkout.xpReward} XP earned! 🎉`, 'success');
                    
                    if (result.gamification) {
                        showGamificationNotifications(result.gamification);
                    }
                    
                    await loadGamificationData();
                    closeModal();
                } else {
                    showNotification('Failed to log workout: ' + result.error, 'error');
                }
            } catch (error) {
                console.error('Error completing workout:', error);
                showNotification('Error completing workout. Please try again.', 'error');
            }
        }
        
        // Show notification
        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 15px 20px;
                border-radius: 12px;
                color: white;
                font-weight: 500;
                z-index: 2000;
                background: ${type === 'success' ? 'linear-gradient(135deg, #28A745, #20C997)' : 
                            type === 'error' ? 'linear-gradient(135deg, #DC3545, #C82333)' : 
                            'linear-gradient(135deg, #17A2B8, #138496)'};
                box-shadow: 0 4px 15px rgba(0,0,0,0.2);
                animation: slideInRight 0.3s ease-out;
                border: 1px solid rgba(255,255,255,0.2);
            `;
            notification.innerHTML = message;
            
            // Add slide animation
            const style = document.createElement('style');
            style.textContent = `
                @keyframes slideInRight {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
            `;
            document.head.appendChild(style);
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
                style.remove();
            }, 4000);
        }
        
        // Show gamification notifications
        function showGamificationNotifications(data) {
            let delay = 1000;
            
            if (data.xp > 0) {
                setTimeout(() => showXPPopup(data.xp), delay);
                delay += 2000;
            }
            
            if (data.levelUp) {
                setTimeout(() => showLevelUpPopup(), delay);
                delay += 2000;
            }
            
            if (data.achievements && data.achievements.length > 0) {
                data.achievements.forEach((achievement, index) => {
                    setTimeout(() => showAchievementPopup(achievement), delay + (index * 2000));
                });
            }
        }
        
        // Show XP popup
        function showXPPopup(xp) {
            const popup = document.createElement('div');
            popup.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%) scale(0);
                background: linear-gradient(135deg, var(--primary), var(--secondary));
                color: white;
                padding: 30px;
                border-radius: 20px;
                text-align: center;
                z-index: 3000;
                box-shadow: 0 20px 40px rgba(0,0,0,0.3);
                transition: all 0.3s ease;
            `;
            
            popup.innerHTML = `
                <div style="font-size: 3rem; margin-bottom: 15px;">⚡</div>
                <div style="font-size: 1.5rem; font-weight: 700; margin-bottom: 10px;">+${xp} XP</div>
                <div style="font-size: 1rem; opacity: 0.9;">Experience Gained!</div>
            `;
            
            document.body.appendChild(popup);
            
            setTimeout(() => popup.style.transform = 'translate(-50%, -50%) scale(1)', 100);
            setTimeout(() => {
                popup.style.transform = 'translate(-50%, -50%) scale(0)';
                setTimeout(() => popup.remove(), 300);
            }, 2500);
        }
        
        // Show level up popup
        function showLevelUpPopup() {
            const popup = document.createElement('div');
            popup.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%) scale(0);
                background: linear-gradient(135deg, #fbbf24, #f59e0b);
                color: white;
                padding: 40px;
                border-radius: 20px;
                text-align: center;
                z-index: 3000;
                box-shadow: 0 20px 40px rgba(0,0,0,0.3);
                transition: all 0.3s ease;
            `;
            
            popup.innerHTML = `
                <div style="font-size: 4rem; margin-bottom: 20px;">🎉</div>
                <div style="font-size: 2rem; font-weight: 800; margin-bottom: 10px;">LEVEL UP!</div>
                <div style="font-size: 1.2rem; opacity: 0.9;">Congratulations!</div>
            `;
            
            document.body.appendChild(popup);
            
            setTimeout(() => popup.style.transform = 'translate(-50%, -50%) scale(1)', 100);
            setTimeout(() => {
                popup.style.transform = 'translate(-50%, -50%) scale(0)';
                setTimeout(() => popup.remove(), 300);
            }, 3000);
        }
        
        // Show achievement popup
        function showAchievementPopup(achievement) {
            const popup = document.createElement('div');
            popup.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%) scale(0);
                background: white;
                color: var(--dark);
                padding: 30px;
                border-radius: 20px;
                text-align: center;
                z-index: 3000;
                box-shadow: 0 20px 40px rgba(0,0,0,0.3);
                transition: all 0.3s ease;
                max-width: 400px;
            `;
            
            popup.innerHTML = `
                <div style="font-size: 3rem; margin-bottom: 15px;">${achievement.icon}</div>
                <div style="font-size: 1.3rem; font-weight: 700; margin-bottom: 8px; color: var(--primary);">Achievement Unlocked!</div>
                <div style="font-size: 1.1rem; font-weight: 600; margin-bottom: 8px;">${achievement.name}</div>
                <div style="font-size: 0.9rem; color: var(--gray); margin-bottom: 15px;">${achievement.description}</div>
                <div style="font-size: 1rem; color: var(--success); font-weight: 600;">+${achievement.xpReward} XP</div>
            `;
            
            document.body.appendChild(popup);
            
            setTimeout(() => popup.style.transform = 'translate(-50%, -50%) scale(1)', 100);
            setTimeout(() => {
                popup.style.transform = 'translate(-50%, -50%) scale(0)';
                setTimeout(() => popup.remove(), 300);
            }, 4000);
        }
        
        // Show error
        function showError(message) {
            const grid = document.getElementById('workoutGrid');
            grid.innerHTML = `
                <div style="grid-column: 1 / -1; text-align: center; padding: 60px 20px;">
                    <div style="font-size: 4rem; margin-bottom: 20px; opacity: 0.5;">😔</div>
                    <h3 style="color: white; margin-bottom: 10px;">Oops! Something went wrong</h3>
                    <p style="color: rgba(255, 255, 255, 0.7); margin-bottom: 20px;">${message}</p>
                    <button onclick="loadWorkouts()" style="padding: 12px 24px; background: var(--primary); color: white; border: none; border-radius: 12px; cursor: pointer;">
                        Try Again
                    </button>
                </div>
            `;
        }
    </script>
    
    <!-- Enhanced Fit-With-AI Voice Assistant -->
    <script src="/js/voice-assistant-enhanced-fitwithai.js"></script>
    <script src="/js/smart-voice-assistant.js"></script>
</body>
</html>