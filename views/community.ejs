<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Community - Fit-With-AI</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #6C63FF;
            --secondary: #4D44DB;
            --accent: #FF6584;
            --light: #F8F9FA;
            --dark: #343A40;
            --success: #28A745;
            --warning: #FFC107;
            --danger: #DC3545;
            --gray: #6C757D;
            --light-gray: #E9ECEF;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            background: radial-gradient(ellipse at top, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
            color: #ffffff;
            overflow-x: hidden;
            min-height: 100vh;
        }
        
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 40% 40%, rgba(120, 219, 255, 0.2) 0%, transparent 50%);
            pointer-events: none;
            z-index: -1;
        }
        
        .dashboard-container {
            display: grid;
            grid-template-columns: 280px 1fr;
            min-height: 100vh;
            gap: 20px;
            padding: 20px;
        }
        
        .sidebar {
            background: transparent;
            border: none;
            padding: 30px 20px;
            position: sticky;
            top: 20px;
            height: fit-content;
        }
        
        .sidebar-header {
            display: flex;
            align-items: center;
            margin-bottom: 2rem;
            padding: 0 1rem;
        }
        

        
        .user-name {
            font-weight: 600;
            margin: 0;
            color: white;
        }
        
        .user-plan {
            font-size: 0.8rem;
            color: var(--primary);
            background: rgba(108, 99, 255, 0.1);
            padding: 2px 8px;
            border-radius: 20px;
            margin-top: 5px;
        }
        
        .nav-menu {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .nav-item {
            margin-bottom: 5px;
        }
        
        .nav-link {
            display: flex;
            align-items: center;
            padding: 12px 15px;
            color: rgba(255, 255, 255, 0.7);
            text-decoration: none;
            border-radius: 15px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            margin: 5px 0;
        }
        
        .nav-link::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
            transition: left 0.5s;
        }
        
        .nav-link:hover::before {
            left: 100%;
        }
        
        .nav-link:hover, .nav-link.active {
            background: rgba(108, 99, 255, 0.2);
            color: #ffffff;
            transform: translateX(5px);
        }
        
        .nav-link i {
            margin-right: 10px;
            font-size: 1.2rem;
        }        
        .logout-section {
            margin-top: 2rem;
            padding-top: 1rem;
            border-top: 1px solid var(--light-gray);
        }
        
        .logout-link {
            display: flex;
            align-items: center;
            padding: 12px 1rem;
            color: var(--danger);
            text-decoration: none;
            border-radius: 8px;
            transition: all 0.3s ease;
            font-weight: 500;
        }
        
        .logout-link:hover {
            background: rgba(220, 53, 69, 0.1);
            color: var(--danger);
        }
        
        .logout-link i {
            margin-right: 10px;
            font-size: 1.2rem;
        }
        
        .main-content {
            display: flex;
            flex-direction: column;
            gap: 25px;
        }
        
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }
        
        .page-title {
            font-size: 2rem;
            font-weight: 600;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .search-bar {
            display: flex;
            margin-bottom: 3rem;
            gap: 10px;
        }
        
        .search-bar input {
            flex: 1;
            padding: 12px 20px;
            background: rgba(255,255,255,0.05);
            border: 1px solid rgba(255,255,255,0.2);
            border-radius: 25px;
            font-family: 'Poppins', sans-serif;
            color: white;
            transition: all 0.3s ease;
        }
        
        .search-bar input::placeholder {
            color: rgba(255,255,255,0.5);
        }
        
        .search-bar input:focus {
            outline: none;
            border-color: var(--primary);
            background: rgba(255,255,255,0.1);
        }
        
        .search-bar button {
            padding: 12px 24px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
        }
        
        .search-bar button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(108, 99, 255, 0.4);
        }
        
        .community-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
            gap: 2rem;
            margin-bottom: 3rem;
            padding: 0 1rem;
        }
        
        .community-card {
            background: transparent;
            border: none;
            overflow: hidden;
            position: relative;
            transition: all 0.3s ease;
            border-radius: 16px;
        }
        
        .community-card:hover {
            transform: translateY(-8px);
        }
        
        .community-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(108, 99, 255, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(108, 99, 255, 0.08) 100%);
            border-radius: 12px;
            z-index: -1;
        }
        
        .community-banner {
            height: 120px;
            background: var(--primary);
            position: relative;
        }
        

        
        .community-content {
            padding: 24px;
        }
        
        .community-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin: 0 0 5px;
            color: white;
        }
        
        .community-meta {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
            margin-bottom: 15px;
        }
        
        .community-description {
            font-size: 0.9rem;
            margin-bottom: 15px;
            line-height: 1.5;
            color: rgba(255, 255, 255, 0.8);
        }
        
        .community-stats {
            display: flex;
            justify-content: space-between;
            font-size: 0.8rem;
            color: rgba(255, 255, 255, 0.7);
        }
        
        .btn {
            padding: 12px 24px;
            border-radius: 25px;
            font-family: 'Poppins', sans-serif;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
            border: none;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            box-shadow: 0 4px 15px rgba(108, 99, 255, 0.3);
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(108, 99, 255, 0.4);
        }
        
        .btn-outline {
            background: rgba(255,255,255,0.1);
            color: white;
            border: 1px solid rgba(255,255,255,0.3);
        }
        
        .btn-outline:hover {
            background: rgba(255,255,255,0.2);
            border-color: rgba(255,255,255,0.5);
        }
        
        .discussion-list {
            background: transparent;
            border: none;
            padding: 2.5rem;
            margin-bottom: 3rem;
            position: relative;
        }
        
        .discussion-list::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(108, 99, 255, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(108, 99, 255, 0.08) 100%);
            border-radius: 12px;
            z-index: -1;
        }
        
        .discussion-item {
            padding: 20px 0;
            border-bottom: 1px solid rgba(255,255,255,0.1);
            transition: all 0.3s ease;
        }
        
        .discussion-item:hover {
            background: rgba(255,255,255,0.02);
            border-radius: 12px;
            padding: 20px 16px;
            margin: 0 -16px;
        }
        
        .discussion-item:last-child {
            border-bottom: none;
        }
        
        .discussion-header {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }
        

        
        .discussion-author {
            font-weight: 600;
            margin-right: 10px;
            color: white;
        }
        
        .discussion-time {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.8rem;
        }
        
        .discussion-title {
            font-weight: 500;
            margin-bottom: 5px;
            color: white;
        }
        
        .discussion-excerpt {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
            margin-bottom: 10px;
        }
        
        .discussion-stats {
            display: flex;
            font-size: 0.8rem;
            color: rgba(255, 255, 255, 0.7);
        }
        
        .discussion-stats span {
            margin-right: 15px;
            display: flex;
            align-items: center
        }
        
        .discussion-stats i {
            margin-right: 5px;
        }
        
        @media (max-width: 768px) {
            .dashboard-container {
                grid-template-columns: 1fr;
                padding: 10px;
            }
            
            .sidebar {
                display: none;
            }
            
            .main-content {
                padding: 1rem;
            }
            
            .community-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="/css/voice-assistant.css">
</head>
<body>
    <div class="dashboard-container">
        <!-- Sidebar Navigation -->
        <div class="sidebar">
            <div class="sidebar-header">
                <div>
                    <h3 class="user-name"><%= user.fullName %></h3>
                    <span class="user-plan">Premium Plan</span>
                </div>
            </div>
            
              <ul class="nav-menu">
                <li class="nav-item"><a href="/dashboard?token=<%= navToken %>" class="nav-link"><i class="fas fa-home"></i> Dashboard</a></li>
                <li class="nav-item"><a href="/workouts?token=<%= navToken %>" class="nav-link"><i class="fas fa-dumbbell"></i> Workouts</a></li>
                <li class="nav-item"><a href="/progress?token=<%= navToken %>" class="nav-link"><i class="fas fa-chart-line"></i> Progress</a></li>
                <li class="nav-item"><a href="/nutrition?token=<%= navToken %>" class="nav-link"><i class="fas fa-utensils"></i> Nutrition</a></li>
                <li class="nav-item"><a href="/nutriscan?token=<%= navToken %>" class="nav-link"><i class="fas fa-qrcode"></i> NutriScan</a></li>
                <li class="nav-item"><a href="/meal-planner?token=<%= navToken %>" class="nav-link"><i class="fas fa-calendar-check"></i> Meal Planner</a></li>
                <li class="nav-item"><a href="/challenges?token=<%= navToken %>" class="nav-link"><i class="fas fa-trophy"></i> Challenges</a></li>
                <li class="nav-item"><a href="/health?token=<%= navToken %>" class="nav-link"><i class="fas fa-heartbeat"></i> Health Metrics</a></li>
                <li class="nav-item"><a href="/biometrics?token=<%= navToken %>" class="nav-link" data-premium="analytics"><i class="fas fa-chart-bar"></i> Biometrics</a></li>
                <li class="nav-item"><a href="/schedule?token=<%= navToken %>" class="nav-link"><i class="fas fa-calendar-alt"></i> Schedule</a></li>
                <li class="nav-item"><a href="/community?token=<%= navToken %>" class="nav-link active"><i class="fas fa-users"></i> Community</a></li>
                <li class="nav-item"><a href="/chat?token=<%= navToken %>" class="nav-link"><i class="fas fa-comments"></i> Chat</a></li>
                <li class="nav-item"><a href="/ai-coach?token=<%= navToken %>" class="nav-link" data-premium="ai-coach"><i class="fas fa-robot"></i> AI Coach</a></li>
                <li class="nav-item"><a href="/settings?token=<%= navToken %>" class="nav-link"><i class="fas fa-cog"></i> Settings</a></li>
                <li class="nav-item"><a href="/subscription?token=<%= navToken %>" class="nav-link"><i class="fas fa-crown"></i> Subscription</a></li>            
            </ul>
            
            <!-- Logout Section -->
            <div class="logout-section">
                <a href="/logout" class="logout-link" onclick="return confirmLogout()">
                    <i class="fas fa-sign-out-alt"></i> Logout
                </a>
            </div>
        </div>
        
        <!-- Main Content -->
        <div class="main-content">
            <div class="page-header">
                <h1 class="page-title">Community</h1>
                <div>
                    <button class="btn btn-primary" onclick="showCreatePostModal()"><i class="fas fa-plus"></i> New Post</button>
                    <button class="btn btn-outline" onclick="showCreateGroupModal()" style="margin-left: 10px;"><i class="fas fa-users"></i> Create Group</button>
                </div>
            </div>
            
            <div class="search-bar">
                <input type="text" id="searchInput" placeholder="Search discussions, groups, or members...">
                <button onclick="performSearch()"><i class="fas fa-search"></i></button>
            </div>
            
            <!-- Tab Navigation -->
            <div class="tab-navigation">
                <button class="tab-btn active" onclick="showTab('feed')">My Feed</button>
                <button class="tab-btn" onclick="showTab('groups')">My Groups</button>
                <button class="tab-btn" onclick="showTab('discover')">Discover</button>
            </div>
            
            <!-- My Feed Tab -->
            <div id="feedTab" class="tab-content active">
                <div id="feedPosts" class="discussion-list">
                    <div class="loading">Loading your feed...</div>
                </div>
                <button class="btn btn-outline" id="loadMoreFeed" style="width: 100%; display: none;" onclick="loadMoreFeed()">Load More Posts</button>
            </div>
            
            <!-- My Groups Tab -->
            <div id="groupsTab" class="tab-content">
                <h3>Your Groups</h3>
                <div id="userGroups" class="community-grid">
                    <div class="loading">Loading your groups...</div>
                </div>
            </div>
            
            <!-- Discover Tab -->
            <div id="discoverTab" class="tab-content">
                <h3>Discover New Groups</h3>
                <div class="filter-bar">
                    <select id="categoryFilter" onchange="filterGroups()">
                        <option value="">All Categories</option>
                        <option value="fitness">Fitness</option>
                        <option value="nutrition">Nutrition</option>
                        <option value="weight-loss">Weight Loss</option>
                        <option value="bodybuilding">Bodybuilding</option>
                        <option value="yoga">Yoga</option>
                        <option value="running">Running</option>
                    </select>
                </div>
                <div id="publicGroups" class="community-grid">
                    <div class="loading">Loading public groups...</div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Create Post Modal -->
    <div id="createPostModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Create New Post</h3>
                <span class="close" onclick="closeModal('createPostModal')">&times;</span>
            </div>
            <form id="createPostForm">
                <div class="form-group">
                    <label>Select Group</label>
                    <select id="postGroupSelect" required>
                        <option value="">Choose a group...</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Post Type</label>
                    <select id="postTypeSelect" onchange="togglePostFields()">
                        <option value="text">Text Post</option>
                        <option value="question">Question</option>
                        <option value="achievement">Achievement</option>
                        <option value="progress">Progress Update</option>
                        <option value="workout">Workout Share</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Title</label>
                    <input type="text" id="postTitle" maxlength="200" required>
                </div>
                <div class="form-group">
                    <label>Content</label>
                    <textarea id="postContent" rows="6" maxlength="5000" required></textarea>
                </div>
                <div class="form-group" id="tagsGroup">
                    <label>Tags (comma separated)</label>
                    <input type="text" id="postTags" placeholder="fitness, motivation, tips">
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-outline" onclick="closeModal('createPostModal')">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create Post</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Create Group Modal -->
    <div id="createGroupModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Create New Group</h3>
                <span class="close" onclick="closeModal('createGroupModal')">&times;</span>
            </div>
            <form id="createGroupForm">
                <div class="form-group">
                    <label>Group Name</label>
                    <input type="text" id="groupName" maxlength="100" required>
                </div>
                <div class="form-group">
                    <label>Description</label>
                    <textarea id="groupDescription" rows="4" maxlength="500" required></textarea>
                </div>
                <div class="form-group">
                    <label>Category</label>
                    <select id="groupCategory" required>
                        <option value="general">General</option>
                        <option value="fitness">Fitness</option>
                        <option value="nutrition">Nutrition</option>
                        <option value="weight-loss">Weight Loss</option>
                        <option value="bodybuilding">Bodybuilding</option>
                        <option value="yoga">Yoga</option>
                        <option value="running">Running</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Privacy</label>
                    <select id="groupPrivacy">
                        <option value="public">Public - Anyone can join</option>
                        <option value="private">Private - Invite only</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Tags (comma separated)</label>
                    <input type="text" id="groupTags" placeholder="fitness, support, beginners">
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-outline" onclick="closeModal('createGroupModal')">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create Group</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Members Modal -->
    <div id="membersModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="membersModalTitle">Group Members</h3>
                <span class="close" onclick="closeModal('membersModal')">&times;</span>
            </div>
            <div class="modal-body">
                <div id="membersList">
                    <div class="loading">Loading members...</div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Edit Group Modal -->
    <div id="editGroupModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Edit Group</h3>
                <span class="close" onclick="closeModal('editGroupModal')">&times;</span>
            </div>
            <form id="editGroupForm">
                <input type="hidden" id="editGroupId">
                <div class="form-group">
                    <label>Group Name</label>
                    <input type="text" id="editGroupName" maxlength="100" required>
                </div>
                <div class="form-group">
                    <label>Description</label>
                    <textarea id="editGroupDescription" rows="4" maxlength="500" required></textarea>
                </div>
                <div class="form-group">
                    <label>Category</label>
                    <select id="editGroupCategory" required>
                        <option value="general">General</option>
                        <option value="fitness">Fitness</option>
                        <option value="nutrition">Nutrition</option>
                        <option value="weight-loss">Weight Loss</option>
                        <option value="bodybuilding">Bodybuilding</option>
                        <option value="yoga">Yoga</option>
                        <option value="running">Running</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Privacy</label>
                    <select id="editGroupPrivacy">
                        <option value="public">Public - Anyone can join</option>
                        <option value="private">Private - Invite only</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Tags (comma separated)</label>
                    <input type="text" id="editGroupTags" placeholder="fitness, support, beginners">
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-outline" onclick="closeModal('editGroupModal')">Cancel</button>
                    <button type="submit" class="btn btn-primary">Update Group</button>
                </div>
            </form>
        </div>
    </div>
    
    <script>
        let currentTab = 'feed';
        let feedSkip = 0;
        let userGroups = [];
        
        // Initialize page
        document.addEventListener('DOMContentLoaded', async function() {
            console.log('🚀 Initializing community page...');
            
            try {
                // Show loading states
                document.getElementById('userGroups').innerHTML = '<div class="loading">Loading your groups...</div>';
                document.getElementById('publicGroups').innerHTML = '<div class="loading">Loading public groups...</div>';
                document.getElementById('feedPosts').innerHTML = '<div class="loading">Loading your feed...</div>';
                
                // Load data in sequence to ensure proper state
                console.log('📥 Loading user groups...');
                await loadUserGroups();
                
                console.log('📰 Loading feed...');
                await loadFeed();
                
                console.log('🌍 Loading public groups...');
                await loadPublicGroups();
                
                console.log('✅ Community page initialized successfully');
                
                // Debug current state
                console.log('📊 Current state:', {
                    userGroups: userGroups.length,
                    currentTab: currentTab
                });
                
            } catch (error) {
                console.error('❌ Error initializing community page:', error);
                showNotification('Failed to load community data. Please refresh the page.', 'error');
            }
            
            // Add keyboard support for search
            const searchInput = document.getElementById('searchInput');
            if (searchInput) {
                searchInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        performSearch();
                    }
                });
            }
        });
        
        // Tab Management
        function showTab(tabName) {
            // Hide all tabs
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Remove active class from all buttons
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Show selected tab
            document.getElementById(tabName + 'Tab').classList.add('active');
            if (event && event.target) {
                event.target.classList.add('active');
            } else {
                // Fallback for programmatic calls
                document.querySelector(`[onclick="showTab('${tabName}')"]`).classList.add('active');
            }
            
            currentTab = tabName;
            
            // Refresh data when switching to groups tab
            if (tabName === 'groups') {
                loadUserGroups();
            } else if (tabName === 'discover') {
                loadPublicGroups();
            }
        }
        
        // Load user's groups
        async function loadUserGroups() {
            try {
                console.log('Loading user groups...');
                
                const response = await fetch('/api/community/groups/my');
                const data = await response.json();
                
                console.log('User groups response:', data);
                
                if (data.success) {
                    userGroups = data.groups || [];
                    displayUserGroups(data.groups || []);
                    populateGroupSelect(data.groups || []);
                    console.log('✅ Loaded user groups:', userGroups.length);
                } else {
                    console.error('❌ Failed to load groups:', data.error);
                    userGroups = [];
                    displayUserGroups([]);
                    populateGroupSelect([]);
                }
            } catch (error) {
                console.error('❌ Error loading groups:', error);
                userGroups = [];
                displayUserGroups([]);
                populateGroupSelect([]);
            }
        }
        
        // Display user groups
        function displayUserGroups(groups) {
            const container = document.getElementById('userGroups');
            
            if (!groups || groups.length === 0) {
                container.innerHTML = `
                    <div style="text-align: center; padding: 40px; color: rgba(255,255,255,0.7);">
                        <i class="fas fa-users" style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.5;"></i>
                        <h3>No Groups Yet</h3>
                        <p>You haven't joined any groups yet.</p>
                        <button class="btn btn-primary" onclick="showTab('discover')">Discover Groups</button>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = groups.map(group => `
                <div class="community-card">
                    <div class="community-banner" style="background: ${getGroupColor(group.category)};"></div>
                    <div class="community-content">
                        <h3 class="community-title">${group.name}</h3>
                        <div class="community-meta">${group.stats.totalMembers} members • ${group.privacy} group</div>
                        <p class="community-description">${group.description}</p>
                        <div class="community-stats">
                            <span>${group.stats.totalPosts} posts</span>
                            <span>${group.category}</span>
                        </div>
                        <div class="group-actions" style="margin-top: 15px; display: flex; gap: 10px; flex-wrap: wrap;">
                            <button class="btn btn-primary btn-sm" onclick="viewGroupMembers('${group._id}', '${group.name}')">
                                <i class="fas fa-users"></i> Members
                            </button>
                            <button class="btn btn-outline btn-sm" onclick="openGroupChat('${group._id}')">
                                <i class="fas fa-comments"></i> Chat
                            </button>
                            <div class="dropdown">
                                <button class="btn btn-outline btn-sm" onclick="toggleGroupActions(event, '${group._id}')" type="button">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                                <div class="dropdown-menu" id="actions-${group._id}">
                                    <a href="#" onclick="event.preventDefault(); showCreatePostModal('${group._id}'); closeDropdown('${group._id}');">
                                        <i class="fas fa-plus"></i> Create Post
                                    </a>
                                    <a href="#" onclick="event.preventDefault(); editGroup('${group._id}'); closeDropdown('${group._id}');">
                                        <i class="fas fa-edit"></i> Edit Group
                                    </a>
                                    <a href="#" onclick="event.preventDefault(); viewGroupMembers('${group._id}', '${group.name}'); closeDropdown('${group._id}');">
                                        <i class="fas fa-users"></i> View Members
                                    </a>
                                    ${group.creator === '<%= user._id %>' ? `<a href="#" onclick="event.preventDefault(); deleteGroup('${group._id}'); closeDropdown('${group._id}');" style="color: #ff6b6b;">
                                        <i class="fas fa-trash"></i> Delete Group
                                    </a>` : ''}
                                    <a href="#" onclick="event.preventDefault(); leaveGroup('${group._id}'); closeDropdown('${group._id}');" style="color: #ffa726;">
                                        <i class="fas fa-sign-out-alt"></i> Leave Group
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
        }
        
        // Load public groups
        async function loadPublicGroups() {
            try {
                const response = await fetch('/api/community/groups/public');
                const data = await response.json();
                
                if (data.success) {
                    displayPublicGroups(data.groups);
                } else {
                    console.error('Failed to load public groups:', data.error);
                }
            } catch (error) {
                console.error('Error loading public groups:', error);
            }
        }
        
        // Display public groups
        function displayPublicGroups(groups) {
            const container = document.getElementById('publicGroups');
            
            if (!groups || groups.length === 0) {
                container.innerHTML = `
                    <div style="text-align: center; padding: 40px; color: rgba(255,255,255,0.7);">
                        <i class="fas fa-users" style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.5;"></i>
                        <h3>No Groups Found</h3>
                        <p>Be the first to create a group!</p>
                        <button class="btn btn-primary" onclick="showCreateGroupModal()">Create Group</button>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = groups.map(group => {
                // Check membership using both API response and local state
                const isMember = group.isMember || userGroups.some(ug => ug._id === group._id);
                
                return `
                    <div class="community-card" data-group-id="${group._id}">
                        <div class="community-banner" style="background: ${getGroupColor(group.category)};"></div>
                        <div class="community-content">
                            <h3 class="community-title">${group.name}</h3>
                            <div class="community-meta">${group.stats?.totalMembers || 0} members • ${group.privacy} group</div>
                            <p class="community-description">${group.description}</p>
                            <div class="community-stats">
                                <span>${group.stats?.totalPosts || 0} posts</span>
                                <span>${group.category}</span>
                            </div>
                            <div style="margin-top: 15px;">
                                ${isMember ? 
                                    '<button class="btn btn-outline" disabled>Already Joined</button>' :
                                    `<button class="btn btn-primary" onclick="joinGroup('${group._id}')">Join Group</button>`
                                }
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }
        
        // Load user feed
        async function loadFeed() {
            try {
                const response = await fetch(`/api/community/feed?limit=10&skip=${feedSkip}`);
                const data = await response.json();
                
                if (data.success) {
                    displayFeedPosts(data.posts, feedSkip === 0);
                    feedSkip += data.posts.length;
                    
                    if (data.posts.length === 10) {
                        document.getElementById('loadMoreFeed').style.display = 'block';
                    }
                } else {
                    console.error('Failed to load feed:', data.error);
                }
            } catch (error) {
                console.error('Error loading feed:', error);
            }
        }
        
        // Display feed posts
        function displayFeedPosts(posts, replace = false) {
            const container = document.getElementById('feedPosts');
            
            if (!posts || (posts.length === 0 && replace)) {
                container.innerHTML = `
                    <div style="text-align: center; padding: 40px; color: rgba(255,255,255,0.7);">
                        <i class="fas fa-newspaper" style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.5;"></i>
                        <h3>No Posts Yet</h3>
                        <p>Join some groups to see posts in your feed!</p>
                        <button class="btn btn-primary" onclick="showTab('discover')">Discover Groups</button>
                    </div>
                `;
                return;
            }
            
            const postsHtml = posts.map(post => `
                <div class="discussion-item" data-post-id="${post._id}">
                    <div class="discussion-header">
                        <span class="discussion-author">${post.author.fullName}</span>
                        <span class="discussion-group">in ${post.group.name}</span>
                        <span class="discussion-time">${formatTimeAgo(post.createdAt)}</span>
                    </div>
                    <h4 class="discussion-title">${post.title}</h4>
                    <p class="discussion-excerpt">${post.content.substring(0, 200)}${post.content.length > 200 ? '...' : ''}</p>
                    <div class="discussion-stats">
                        <span onclick="likePost('${post._id}')" class="like-btn">
                            <i class="fas fa-heart"></i> <span class="like-count">${post.stats.totalLikes}</span> likes
                        </span>
                        <span><i class="fas fa-comment"></i> ${post.stats.totalComments} comments</span>
                        <span><i class="fas fa-eye"></i> ${post.views} views</span>
                        ${post.tags && post.tags.length > 0 ? `<span class="post-tags">${post.tags.map(tag => `#${tag}`).join(' ')}</span>` : ''}
                    </div>
                </div>
            `).join('');
            
            if (replace) {
                container.innerHTML = postsHtml;
            } else {
                container.innerHTML += postsHtml;
            }
        }
        
        // Join group
        async function joinGroup(groupId) {
            const button = event.target;
            const originalText = button.innerHTML;
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Joining...';
            button.disabled = true;
            
            try {
                console.log('Attempting to join group:', groupId);
                
                const response = await fetch(`/api/community/groups/${groupId}/join`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const data = await response.json();
                console.log('Join group response:', data);
                
                if (data.success) {
                    showNotification('Successfully joined the group!', 'success');
                    
                    // Update button immediately
                    button.innerHTML = 'Already Joined';
                    button.classList.remove('btn-primary');
                    button.classList.add('btn-outline');
                    button.disabled = true;
                    
                    // Add to userGroups array immediately for instant UI update
                    if (data.group) {
                        userGroups.push(data.group);
                    }
                    
                    // Refresh all data
                    setTimeout(async () => {
                        await loadUserGroups();
                        await loadPublicGroups();
                        feedSkip = 0;
                        await loadFeed();
                    }, 500);
                    
                } else {
                    console.error('Join group failed:', data.error);
                    button.innerHTML = originalText;
                    button.disabled = false;
                    showNotification(data.error || 'Failed to join group', 'error');
                }
            } catch (error) {
                console.error('Error joining group:', error);
                button.innerHTML = originalText;
                button.disabled = false;
                showNotification('Network error. Please try again.', 'error');
            }
        }
        
        // Like post
        async function likePost(postId) {
            try {
                const response = await fetch(`/api/community/posts/${postId}/like`, {
                    method: 'POST'
                });
                const data = await response.json();
                
                if (data.success) {
                    const likeCountElement = document.querySelector(`[data-post-id="${postId}"] .like-count`);
                    if (likeCountElement) {
                        likeCountElement.textContent = data.likes;
                    }
                } else {
                    console.error('Failed to like post:', data.error);
                }
            } catch (error) {
                console.error('Error liking post:', error);
            }
        }
        
        // Create post
        document.getElementById('createPostForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = {
                group: document.getElementById('postGroupSelect').value,
                type: document.getElementById('postTypeSelect').value,
                title: document.getElementById('postTitle').value.trim(),
                content: document.getElementById('postContent').value.trim(),
                tags: document.getElementById('postTags').value.split(',').map(tag => tag.trim()).filter(tag => tag)
            };
            
            console.log('Creating post with data:', formData);
            
            try {
                const response = await fetch('/api/community/posts', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });
                
                const data = await response.json();
                console.log('Create post response:', data);
                
                if (data.success) {
                    showNotification('Post created successfully!', 'success');
                    closeModal('createPostModal');
                    document.getElementById('createPostForm').reset();
                    
                    // Refresh feed
                    feedSkip = 0;
                    await loadFeed();
                } else {
                    showNotification(data.error || 'Failed to create post', 'error');
                }
            } catch (error) {
                console.error('Error creating post:', error);
                showNotification('Network error. Please try again.', 'error');
            }
        });
        
        // Create group
        document.getElementById('createGroupForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = {
                name: document.getElementById('groupName').value.trim(),
                description: document.getElementById('groupDescription').value.trim(),
                category: document.getElementById('groupCategory').value,
                privacy: document.getElementById('groupPrivacy').value,
                tags: document.getElementById('groupTags').value.split(',').map(tag => tag.trim()).filter(tag => tag)
            };
            
            console.log('Creating group with data:', formData);
            
            try {
                const response = await fetch('/api/community/groups', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });
                
                const data = await response.json();
                console.log('Create group response:', data);
                
                if (data.success) {
                    showNotification('Group created successfully!', 'success');
                    closeModal('createGroupModal');
                    document.getElementById('createGroupForm').reset();
                    
                    // Add to userGroups immediately
                    if (data.group) {
                        userGroups.push(data.group);
                    }
                    
                    // Refresh data
                    await loadUserGroups();
                    await loadPublicGroups();
                } else {
                    showNotification(data.error || 'Failed to create group', 'error');
                }
            } catch (error) {
                console.error('Error creating group:', error);
                showNotification('Network error. Please try again.', 'error');
            }
        });
        
        // Utility functions
        function getGroupColor(category) {
            const colors = {
                fitness: '#6C63FF',
                nutrition: '#28A745',
                'weight-loss': '#FF6584',
                bodybuilding: '#FFC107',
                yoga: '#17A2B8',
                running: '#DC3545',
                general: '#6C757D'
            };
            return colors[category] || colors.general;
        }
        
        function formatTimeAgo(dateString) {
            const date = new Date(dateString);
            const now = new Date();
            const diffInSeconds = Math.floor((now - date) / 1000);
            
            if (diffInSeconds < 60) return 'Just now';
            if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;
            if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;
            return `${Math.floor(diffInSeconds / 86400)}d ago`;
        }
        
        function populateGroupSelect(groups) {
            const select = document.getElementById('postGroupSelect');
            if (!select) return;
            
            if (!groups || groups.length === 0) {
                select.innerHTML = '<option value="">No groups available - Join a group first</option>';
                return;
            }
            
            select.innerHTML = '<option value="">Choose a group...</option>' + 
                groups.map(group => `<option value="${group._id}">${group.name}</option>`).join('');
        }
        
        function showCreatePostModal(groupId = null) {
            if (userGroups.length === 0) {
                showNotification('You need to join a group first to create posts', 'warning');
                return;
            }
            
            if (groupId) {
                document.getElementById('postGroupSelect').value = groupId;
            }
            
            document.getElementById('createPostModal').style.display = 'block';
        }
        
        function showCreateGroupModal() {
            document.getElementById('createGroupModal').style.display = 'block';
        }
        
        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }
        
        function loadMoreFeed() {
            loadFeed();
        }
        
        async function performSearch() {
            const query = document.getElementById('searchInput').value.trim();
            if (query.length < 2) {
                showNotification('Search query must be at least 2 characters', 'warning');
                return;
            }
            
            try {
                const response = await fetch(`/api/community/search?q=${encodeURIComponent(query)}`);
                const data = await response.json();
                
                if (data.success) {
                    displaySearchResults(data.results);
                } else {
                    showNotification('Search failed', 'error');
                }
            } catch (error) {
                console.error('Search error:', error);
                showNotification('Search error occurred', 'error');
            }
        }
        
        function displaySearchResults(results) {
            // Switch to a search results tab or display in current tab
            const container = document.getElementById('feedPosts');
            
            if (results.posts && results.posts.length > 0) {
                displayFeedPosts(results.posts, true);
            } else {
                container.innerHTML = '<p>No search results found</p>';
            }
        }
        
        function showNotification(message, type = 'info') {
            // Simple notification system
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 15px 20px;
                border-radius: 8px;
                color: white;
                z-index: 10000;
                font-weight: 500;
            `;
            
            const colors = {
                success: '#28A745',
                error: '#DC3545',
                warning: '#FFC107',
                info: '#17A2B8'
            };
            
            notification.style.backgroundColor = colors[type] || colors.info;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }
        
        function confirmLogout() {
            return confirm('Are you sure you want to logout?');
        }

        function toggleGroupActions(event, groupId) {
            event.stopPropagation();
            event.preventDefault();
            
            const dropdown = document.getElementById(`actions-${groupId}`);
            if (!dropdown) {
                console.error('Dropdown not found for group:', groupId);
                return;
            }
            
            // Close all other dropdowns first
            document.querySelectorAll('.dropdown-menu').forEach(menu => {
                if (menu.id !== `actions-${groupId}`) {
                    menu.style.display = 'none';
                }
            });
            
            // Toggle current dropdown
            if (dropdown.style.display === 'block') {
                dropdown.style.display = 'none';
            } else {
                dropdown.style.display = 'block';
            }
        }
        
        function viewGroupMembers(groupId, groupName) {
            showMembersModal(groupId, groupName);
        }
        
        function openGroupChat(groupId) {
            window.location.href = `/chat?token=<%= navToken %>&groupId=${groupId}`;
        }
        
        async function editGroup(groupId) {
            try {
                const response = await fetch(`/api/community/groups/${groupId}`);
                const data = await response.json();
                
                if (data.success) {
                    populateEditGroupForm(data.group);
                    document.getElementById('editGroupModal').style.display = 'block';
                } else {
                    showNotification('Failed to load group details', 'error');
                }
            } catch (error) {
                console.error('Error loading group:', error);
                showNotification('Error loading group details', 'error');
            }
        }
        
        function populateEditGroupForm(group) {
            document.getElementById('editGroupId').value = group._id;
            document.getElementById('editGroupName').value = group.name;
            document.getElementById('editGroupDescription').value = group.description;
            document.getElementById('editGroupCategory').value = group.category;
            document.getElementById('editGroupPrivacy').value = group.privacy;
            document.getElementById('editGroupTags').value = group.tags ? group.tags.join(', ') : '';
        }
        
        // Edit group form submission
        document.getElementById('editGroupForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const groupId = document.getElementById('editGroupId').value;
            const formData = {
                name: document.getElementById('editGroupName').value.trim(),
                description: document.getElementById('editGroupDescription').value.trim(),
                category: document.getElementById('editGroupCategory').value,
                privacy: document.getElementById('editGroupPrivacy').value,
                tags: document.getElementById('editGroupTags').value.split(',').map(tag => tag.trim()).filter(tag => tag)
            };
            
            try {
                const response = await fetch(`/api/community/groups/${groupId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showNotification('Group updated successfully!', 'success');
                    closeModal('editGroupModal');
                    
                    // Refresh data
                    await loadUserGroups();
                    await loadPublicGroups();
                } else {
                    showNotification(data.error || 'Failed to update group', 'error');
                }
            } catch (error) {
                console.error('Error updating group:', error);
                showNotification('Network error. Please try again.', 'error');
            }
        });
        
        async function deleteGroup(groupId) {
            if (!confirm('Are you sure you want to delete this group? This action cannot be undone. All posts and members will be removed.')) {
                return;
            }
            
            try {
                const response = await fetch(`/api/community/groups/${groupId}`, {
                    method: 'DELETE'
                });
                const data = await response.json();
                
                if (data.success) {
                    showNotification('Group deleted successfully', 'success');
                    
                    // Remove from userGroups array immediately
                    userGroups = userGroups.filter(group => group._id !== groupId);
                    
                    // Refresh all data
                    await loadUserGroups();
                    await loadPublicGroups();
                    
                    // Refresh feed
                    feedSkip = 0;
                    await loadFeed();
                } else {
                    showNotification(data.error || 'Failed to delete group', 'error');
                }
            } catch (error) {
                console.error('Error deleting group:', error);
                showNotification('Failed to delete group', 'error');
            }
        }

        async function leaveGroup(groupId) {
            if (!confirm('Are you sure you want to leave this group?')) return;

            try {
                const response = await fetch(`/api/community/groups/${groupId}/leave`, {
                    method: 'POST'
                });
                const data = await response.json();

                if (data.success) {
                    showNotification('You have left the group.', 'success');
                    
                    // Remove from userGroups array immediately
                    userGroups = userGroups.filter(group => group._id !== groupId);
                    
                    // Refresh all data
                    await loadUserGroups();
                    await loadPublicGroups();
                    
                    // Refresh feed
                    feedSkip = 0;
                    await loadFeed();
                    
                    // Close any open dropdowns
                    document.querySelectorAll('.dropdown-menu').forEach(menu => {
                        menu.style.display = 'none';
                    });
                } else {
                    showNotification(data.error, 'error');
                }
            } catch (error) {
                console.error('Error leaving group:', error);
                showNotification('Failed to leave group', 'error');
            }
        }
        
        // Add keyboard support for search
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('searchInput');
            if (searchInput) {
                searchInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        performSearch();
                    }
                });
            }
        });
        
        // Show members modal
        function showMembersModal(groupId, groupName) {
            document.getElementById('membersModal').style.display = 'block';
            document.getElementById('membersModalTitle').textContent = `${groupName} Members`;
            loadGroupMembers(groupId);
        }
        
        // Load group members
        async function loadGroupMembers(groupId) {
            const container = document.getElementById('membersList');
            container.innerHTML = '<div class="loading">Loading members...</div>';
            
            try {
                const response = await fetch(`/api/community/groups/${groupId}/members`);
                const data = await response.json();
                
                if (data.success) {
                    displayGroupMembers(data.members);
                } else {
                    container.innerHTML = '<p>Failed to load members</p>';
                }
            } catch (error) {
                console.error('Error loading members:', error);
                container.innerHTML = '<p>Error loading members</p>';
            }
        }
        
        // Display group members
        function displayGroupMembers(members) {
            const container = document.getElementById('membersList');
            
            if (members.length === 0) {
                container.innerHTML = '<p>No members found</p>';
                return;
            }
            
            container.innerHTML = members.map(member => `
                <div class="member-item">
                    <div class="member-info">
                        <div class="member-name">${member.fullName}</div>
                        <div class="member-role">${member.role || 'Member'}</div>
                        <div class="member-joined">Joined ${formatTimeAgo(member.joinedAt)}</div>
                    </div>
                    <div class="member-actions">
                        <button class="btn btn-outline btn-sm" onclick="viewMemberProfile('${member._id}')">
                            <i class="fas fa-user"></i> Profile
                        </button>
                        <button class="btn btn-outline btn-sm" onclick="startDirectMessage('${member._id}')">
                            <i class="fas fa-message"></i> Message
                        </button>
                    </div>
                </div>
            `).join('');
        }
        
        function viewMemberProfile(memberId) {
            window.location.href = `/profile/${memberId}?token=<%= navToken %>`;
        }
        
        function startDirectMessage(memberId) {
            window.location.href = `/chat?token=<%= navToken %>&userId=${memberId}`;
        }
        
        // Filter groups
        function filterGroups() {
            const category = document.getElementById('categoryFilter').value;
            loadPublicGroups(category);
        }
        
        // Enhanced load public groups with filter
        async function loadPublicGroups(category = '') {
            try {
                console.log('Loading public groups, category:', category);
                
                const url = category ? `/api/community/groups/public?category=${category}` : '/api/community/groups/public';
                const response = await fetch(url);
                const data = await response.json();
                
                console.log('Public groups response:', data);
                
                if (data.success) {
                    displayPublicGroups(data.groups);
                    console.log('✅ Loaded public groups:', data.groups?.length || 0);
                } else {
                    console.error('❌ Failed to load public groups:', data.error);
                    displayPublicGroups([]);
                }
            } catch (error) {
                console.error('❌ Error loading public groups:', error);
                displayPublicGroups([]);
            }
        }
        
        function closeDropdown(groupId) {
            const dropdown = document.getElementById(`actions-${groupId}`);
            if (dropdown) {
                dropdown.style.display = 'none';
            }
        }
        
        // Close modals and dropdowns when clicking outside
        document.addEventListener('click', function(event) {
            // Close modals
            const modals = document.querySelectorAll('.modal');
            modals.forEach(modal => {
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });
            
            // Close dropdowns if clicking outside
            if (!event.target.closest('.dropdown')) {
                document.querySelectorAll('.dropdown-menu').forEach(dropdown => {
                    dropdown.style.display = 'none';
                });
            }
        });
    </script>
    
    <style>
        .tab-navigation {
            display: flex;
            margin-bottom: 3rem;
            border-bottom: 2px solid rgba(255,255,255,0.1);
            gap: 10px;
        }
        
        .tab-btn {
            padding: 12px 24px;
            background: rgba(255,255,255,0.05);
            border: 1px solid rgba(255,255,255,0.1);
            border-radius: 25px;
            font-family: 'Poppins', sans-serif;
            font-weight: 500;
            color: rgba(255,255,255,0.7);
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .tab-btn:hover {
            background: rgba(255,255,255,0.1);
            color: white;
        }
        
        .tab-btn.active {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            border-color: var(--primary);
            box-shadow: 0 4px 15px rgba(108, 99, 255, 0.3);
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        
        .modal-content {
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
            margin: 5% auto;
            padding: 0;
            border-radius: 16px;
            width: 90%;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
            border: 1px solid rgba(255,255,255,0.1);
            box-shadow: 0 20px 60px rgba(0,0,0,0.5);
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 25px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            border-radius: 16px 16px 0 0;
        }
        
        .modal-header h3 {
            margin: 0;
            color: white;
            font-size: 1.3rem;
        }
        
        .close {
            font-size: 24px;
            font-weight: bold;
            cursor: pointer;
            color: rgba(255,255,255,0.8);
            background: rgba(255,255,255,0.1);
            border: none;
            width: 35px;
            height: 35px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }
        
        .close:hover {
            background: rgba(255,255,255,0.2);
            color: white;
        }
        
        .form-group {
            margin-bottom: 25px;
            padding: 0 25px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: rgba(255,255,255,0.9);
        }
        
        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 12px 16px;
            background: rgba(255,255,255,0.05);
            border: 1px solid rgba(255,255,255,0.2);
            border-radius: 10px;
            font-family: 'Poppins', sans-serif;
            box-sizing: border-box;
            color: white;
            transition: all 0.3s ease;
        }
        
        .form-group input::placeholder,
        .form-group textarea::placeholder {
            color: rgba(255,255,255,0.5);
        }
        
        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: var(--primary);
            background: rgba(255,255,255,0.1);
        }
        
        .form-group select option {
            background: #1a1a2e;
            color: white;
        }
        
        .form-actions {
            display: flex;
            justify-content: flex-end;
            gap: 15px;
            padding: 25px;
            border-top: 1px solid rgba(255,255,255,0.1);
        }
        
        .filter-bar {
            margin-bottom: 2rem;
            display: flex;
            gap: 15px;
            align-items: center;
        }
        
        .filter-bar select {
            padding: 10px 16px;
            background: rgba(255,255,255,0.05);
            border: 1px solid rgba(255,255,255,0.2);
            border-radius: 20px;
            font-family: 'Poppins', sans-serif;
            color: white;
            min-width: 150px;
        }
        
        .filter-bar select option {
            background: #1a1a2e;
            color: white;
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: var(--gray);
        }
        
        .discussion-group {
            color: var(--primary);
            font-size: 0.9rem;
            margin: 0 10px;
        }
        
        .like-btn {
            cursor: pointer;
            transition: color 0.3s ease;
        }
        
        .like-btn:hover {
            color: var(--accent);
        }
        
        .post-tags {
            color: var(--primary);
            font-size: 0.8rem;
        }
        
        .community-card {
            cursor: pointer;
            transition: transform 0.3s ease;
        }
        
        .community-card:hover {
            transform: translateY(-2px);
        }
        
        .dropdown {
            position: relative;
            display: inline-block;
        }
        
        .dropdown-menu {
            position: absolute;
            top: 100%;
            right: 0;
            background: linear-gradient(135deg, rgba(26, 26, 46, 0.95) 0%, rgba(22, 33, 62, 0.95) 100%);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.1);
            border-radius: 16px;
            padding: 8px 0;
            min-width: 180px;
            z-index: 99999;
            box-shadow: 0 20px 60px rgba(0,0,0,0.5);
            display: none;
            margin-top: 5px;
        }
        
        .dropdown-menu a {
            display: block;
            padding: 12px 20px;
            color: rgba(255,255,255,0.9);
            text-decoration: none;
            transition: all 0.3s ease;
            font-size: 0.9rem;
            font-weight: 500;
            border-left: 3px solid transparent;
        }
        
        .dropdown-menu a:hover {
            background: linear-gradient(135deg, rgba(108, 99, 255, 0.2), rgba(255, 255, 255, 0.05));
            color: white;
            border-left-color: var(--primary);
            transform: translateX(3px);
        }
        
        .dropdown-menu a i {
            margin-right: 8px;
            width: 16px;
            text-align: center;
        }
        
        .btn-sm {
            padding: 6px 12px;
            font-size: 0.8rem;
        }
        
        .group-actions {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }
        
        .member-item {
            display: flex;
            align-items: center;
            padding: 15px 0;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }
        
        .member-item:last-child {
            border-bottom: none;
        }
        

        
        .member-info {
            flex: 1;
        }
        
        .member-name {
            font-weight: 600;
            color: white;
            margin-bottom: 4px;
        }
        
        .member-role {
            color: var(--primary);
            font-size: 0.85rem;
            margin-bottom: 2px;
        }
        
        .member-joined {
            color: rgba(255,255,255,0.6);
            font-size: 0.8rem;
        }
        
        .member-actions {
            display: flex;
            gap: 8px;
        }
    </style>
    
    <!-- Enhanced Fit-With-AI Voice Assistant -->
    <script src="/js/voice-assistant-enhanced-fitwithai.js"></script>
</body>
</html>