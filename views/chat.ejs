<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat - Fit-With-AI</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="/css/chat.css">
    <style>
        :root {
            --primary: #6C63FF;
            --secondary: #4D44DB;
            --accent: #FF6584;
            --light: #F8F9FA;
            --dark: #343A40;
            --success: #28A745;
            --warning: #FFC107;
            --danger: #DC3545;
            --gray: #6C757D;
            --light-gray: #E9ECEF;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #F5F7FA;
            color: var(--dark);
            margin: 0;
            padding: 0;
        }
        
        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }
        
        .sidebar {
            width: 250px;
            background: white;
            box-shadow: 2px 0 10px rgba(0,0,0,0.1);
            padding: 2rem 1rem;
        }
        
        .sidebar-header {
            display: flex;
            align-items: center;
            margin-bottom: 2rem;
            padding: 0 1rem;
        }
        
        .sidebar-header img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }
        
        .user-name {
            font-weight: 600;
            margin: 0;
        }
        
        .user-plan {
            font-size: 0.8rem;
            color: var(--primary);
            background: rgba(108, 99, 255, 0.1);
            padding: 2px 8px;
            border-radius: 20px;
            margin-top: 5px;
        }
        
        .nav-menu {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .nav-item {
            margin-bottom: 5px;
        }
        
        .nav-link {
            display: flex;
            align-items: center;
            padding: 12px 1rem;
            color: var(--gray);
            text-decoration: none;
            border-radius: 8px;
            transition: all 0.3s ease;
        }
        
        .nav-link:hover, .nav-link.active {
            background: rgba(108, 99, 255, 0.1);
            color: var(--primary);
        }
        
        .nav-link i {
            margin-right: 10px;
            font-size: 1.2rem;
        }
        
        .logout-section {
            margin-top: 2rem;
            padding-top: 1rem;
            border-top: 1px solid var(--light-gray);
        }
        
        .logout-link {
            display: flex;
            align-items: center;
            padding: 12px 1rem;
            color: var(--danger);
            text-decoration: none;
            border-radius: 8px;
            transition: all 0.3s ease;
            font-weight: 500;
        }
        
        .logout-link:hover {
            background: rgba(220, 53, 69, 0.1);
            color: var(--danger);
        }
        
        .logout-link i {
            margin-right: 10px;
            font-size: 1.2rem;
        }
        
        .main-content {
            flex: 1;
            padding: 2rem;
        }
        
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }
        
        .page-title {
            font-size: 1.8rem;
            font-weight: 600;
            color: var(--dark);
        }
        
        /* Chat specific styles */
        .chat-container {
            display: flex;
            height: calc(100vh - 180px);
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.05);
            overflow: hidden;
        }
        
        .conversations-sidebar {
            width: 350px;
            border-right: 1px solid var(--light-gray);
            overflow-y: auto;
        }
        
        .conversations-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--light-gray);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .conversations-title {
            font-weight: 600;
            margin: 0;
        }
        
        .new-chat-btn {
            background: var(--primary);
            color: white;
            border: none;
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }
        
        .conversation-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .conversation-item {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid var(--light-gray);
            cursor: pointer;
            transition: background 0.2s ease;
        }
        
        .conversation-item:hover {
            background: rgba(108, 99, 255, 0.05);
        }
        
        .conversation-item.active {
            background: rgba(108, 99, 255, 0.1);
        }
        
        .conversation-user {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
        }
        
        .conversation-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 12px;
            background-color: var(--light-gray);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--primary);
            font-weight: bold;
        }
        
        .conversation-name {
            font-weight: 500;
            flex: 1;
        }
        
        .conversation-time {
            font-size: 0.8rem;
            color: var(--gray);
        }
        
        .conversation-preview {
            display: flex;
            margin-left: 52px;
        }
        
        .conversation-message {
            font-size: 0.9rem;
            color: var(--gray);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            flex: 1;
        }
        
        .unread-count {
            background: var(--primary);
            color: white;
            font-size: 0.7rem;
            padding: 2px 6px;
            border-radius: 10px;
            margin-left: 8px;
        }
        
        .chat-area {
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        
        .chat-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--light-gray);
            display: flex;
            align-items: center;
        }
        
        .chat-user {
            display: flex;
            align-items: center;
            flex: 1;
        }
        
        .chat-avatar {
            width: 44px;
            height: 44px;
            border-radius: 50%;
            margin-right: 12px;
            background-color: var(--light-gray);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--primary);
            font-weight: bold;
        }
        
        .chat-name {
            font-weight: 600;
        }
        
        .chat-status {
            font-size: 0.8rem;
            color: var(--gray);
        }
        
        .chat-actions {
            display: flex;
        }
        
        .chat-action-btn {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            margin-left: 8px;
            color: var(--gray);
            transition: all 0.2s ease;
        }
        
        .chat-action-btn:hover {
            background: var(--light-gray);
            color: var(--primary);
        }
        
        .messages-container {
            flex: 1;
            padding: 1.5rem;
            overflow-y: auto;
            background-color: rgba(108, 99, 255, 0.03);
        }
        
        .message {
            display: flex;
            margin-bottom: 1rem;
            max-width: 70%;
        }
        
        .message.received {
            align-self: flex-start;
        }
        
        .message.sent {
            align-self: flex-end;
            flex-direction: row-reverse;
        }
        
        .message-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            margin-right: 12px;
            background-color: var(--light-gray);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--primary);
            font-weight: bold;
            font-size: 0.8rem;
        }
        
        .message.sent .message-avatar {
            margin-right: 0;
            margin-left: 12px;
        }
        
        .message-content {
            display: flex;
            flex-direction: column;
        }
        
        .message-bubble {
            padding: 12px 16px;
            border-radius: 18px;
            font-size: 0.95rem;
            line-height: 1.4;
        }
        
        .message.received .message-bubble {
            background: white;
            border: 1px solid var(--light-gray);
            border-bottom-left-radius: 4px;
        }
        
        .message.sent .message-bubble {
            background: var(--primary);
            color: white;
            border-bottom-right-radius: 4px;
        }
        
        .message-time {
            font-size: 0.7rem;
            color: var(--gray);
            margin-top: 4px;
            text-align: right;
        }
        
        .message.sent .message-time {
            color: var(--primary);
        }
        
        .message-input-container {
            padding: 1rem 1.5rem;
            border-top: 1px solid var(--light-gray);
            display: flex;
            align-items: center;
        }
        
        .message-input {
            flex: 1;
            padding: 12px 16px;
            border: 1px solid var(--light-gray);
            border-radius: 24px;
            font-family: 'Poppins', sans-serif;
            outline: none;
            transition: all 0.2s ease;
        }
        
        .message-input:focus {
            border-color: var(--primary);
        }
        
        .send-btn {
            width: 44px;
            height: 44px;
            border-radius: 50%;
            background: var(--primary);
            color: white;
            border: none;
            margin-left: 12px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .send-btn:hover {
            background: var(--secondary);
        }
        
        .attachment-btn {
            width: 44px;
            height: 44px;
            border-radius: 50%;
            background: transparent;
            color: var(--gray);
            border: none;
            margin-right: 12px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .attachment-btn:hover {
            background: var(--light-gray);
            color: var(--primary);
        }
        
        .no-conversation {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            padding: 2rem;
            text-align: center;
            color: var(--gray);
        }
        
        .no-conversation-icon {
            font-size: 3rem;
            color: var(--light-gray);
            margin-bottom: 1rem;
        }
        
        .no-conversation-title {
            font-size: 1.2rem;
            font-weight: 500;
            margin-bottom: 0.5rem;
            color: var(--dark);
        }
        
        .no-conversation-text {
            margin-bottom: 1.5rem;
            max-width: 300px;
        }
        
        .start-chat-btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 24px;
            font-family: 'Poppins', sans-serif;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .start-chat-btn:hover {
            background: var(--secondary);
        }
        
        /* Button styles */
        .btn {
            padding: 8px 16px;
            border-radius: 8px;
            font-family: 'Poppins', sans-serif;
            cursor: pointer;
            transition: all 0.3s ease;
            border: none;
            font-weight: 500;
        }
        
        .btn-primary {
            background: var(--primary);
            color: white;
        }
        
        .btn-primary:hover {
            background: var(--secondary);
        }
        
        .btn-secondary {
            background: var(--light-gray);
            color: var(--dark);
        }
        
        .btn-secondary:hover {
            background: var(--gray);
            color: white;
        }
        
        .btn-sm {
            padding: 6px 12px;
            font-size: 0.9rem;
        }
        
        /* Modal styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .modal-content {
            background: white;
            border-radius: 12px;
            width: 90%;
            max-width: 500px;
            max-height: 80vh;
            overflow-y: auto;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        }
        
        .modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--light-gray);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .modal-header h3 {
            margin: 0;
            font-size: 1.3rem;
            font-weight: 600;
        }
        
        .modal-close {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: var(--gray);
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .modal-close:hover {
            background: var(--light-gray);
        }
        
        .modal-body {
            padding: 1.5rem;
        }
        
        .modal-footer {
            padding: 1rem 1.5rem;
            border-top: 1px solid var(--light-gray);
            display: flex;
            gap: 10px;
            justify-content: flex-end;
        }
        
        .form-input {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid var(--light-gray);
            border-radius: 8px;
            font-family: 'Poppins', sans-serif;
            outline: none;
            transition: all 0.2s ease;
            margin-bottom: 1rem;
        }
        
        .form-input:focus {
            border-color: var(--primary);
        }
        
        /* Search results */
        #search-results {
            max-height: 300px;
            overflow-y: auto;
        }
        
        .search-result-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 12px;
            border: 1px solid var(--light-gray);
            border-radius: 8px;
            margin-bottom: 8px;
        }
        
        .user-info {
            display: flex;
            align-items: center;
            flex: 1;
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 12px;
            background-color: var(--light-gray);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--primary);
            font-weight: bold;
        }
        
        .user-details {
            flex: 1;
        }
        
        .user-name {
            font-weight: 500;
            margin-bottom: 2px;
        }
        
        .user-email {
            font-size: 0.8rem;
            color: var(--gray);
        }
        
        .no-results {
            text-align: center;
            color: var(--gray);
            padding: 2rem;
        }
        
        /* Friend Request System Styles */
        .friend-requests-section {
            border-bottom: 1px solid var(--light-gray);
            background: rgba(108, 99, 255, 0.05);
        }
        
        .friend-requests-header {
            padding: 1rem 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
            transition: background 0.2s ease;
        }
        
        .friend-requests-header:hover {
            background: rgba(108, 99, 255, 0.08);
        }
        
        .friend-requests-title {
            font-weight: 600;
            margin: 0;
            display: flex;
            align-items: center;
        }
        
        .friend-requests-count {
            background: var(--accent);
            color: white;
            font-size: 0.7rem;
            padding: 2px 6px;
            border-radius: 10px;
            margin-left: 8px;
            min-width: 16px;
            text-align: center;
        }
        
        .friend-requests-toggle {
            color: var(--gray);
            transition: transform 0.2s ease;
        }
        
        .friend-requests-toggle.expanded {
            transform: rotate(180deg);
        }
        
        .friend-requests-list {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease;
        }
        
        .friend-requests-list.expanded {
            max-height: 400px;
        }
        
        .friend-request-item {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid rgba(108, 99, 255, 0.1);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .friend-request-user {
            display: flex;
            align-items: center;
            flex: 1;
        }
        
        .friend-request-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 12px;
            background-color: var(--light-gray);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--primary);
            font-weight: bold;
            background-size: cover;
            background-position: center;
        }
        
        .friend-request-info {
            flex: 1;
        }
        
        .friend-request-name {
            font-weight: 500;
            margin-bottom: 2px;
        }
        
        .friend-request-time {
            font-size: 0.8rem;
            color: var(--gray);
        }
        
        .friend-request-actions {
            display: flex;
            gap: 8px;
        }
        
        .friend-request-btn {
            padding: 6px 12px;
            border-radius: 6px;
            border: none;
            font-size: 0.8rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .friend-request-accept {
            background: var(--success);
            color: white;
        }
        
        .friend-request-accept:hover {
            background: #218838;
        }
        
        .friend-request-decline {
            background: var(--light-gray);
            color: var(--dark);
        }
        
        .friend-request-decline:hover {
            background: var(--danger);
            color: white;
        }
        
        /* Add Friend Modal Styles */
        .add-friend-section {
            margin-bottom: 1.5rem;
        }
        
        .search-input-container {
            position: relative;
            margin-bottom: 1rem;
        }
        
        .search-input {
            width: 100%;
            padding: 12px 16px 12px 40px;
            border: 1px solid var(--light-gray);
            border-radius: 8px;
            font-family: 'Poppins', sans-serif;
            outline: none;
            transition: all 0.2s ease;
        }
        
        .search-input:focus {
            border-color: var(--primary);
        }
        
        .search-icon {
            position: absolute;
            left: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--gray);
        }
        
        .search-result-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 12px;
            border: 1px solid var(--light-gray);
            border-radius: 8px;
            margin-bottom: 8px;
            transition: all 0.2s ease;
        }
        
        .search-result-item:hover {
            border-color: var(--primary);
            background: rgba(108, 99, 255, 0.05);
        }
        
        .user-info {
            display: flex;
            align-items: center;
            flex: 1;
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 12px;
            background-color: var(--light-gray);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--primary);
            font-weight: bold;
            background-size: cover;
            background-position: center;
        }
        
        .user-details {
            flex: 1;
        }
        
        .user-name {
            font-weight: 500;
            margin-bottom: 2px;
        }
        
        .user-email {
            font-size: 0.8rem;
            color: var(--gray);
        }
        
        .user-status {
            font-size: 0.7rem;
            padding: 2px 6px;
            border-radius: 10px;
            margin-top: 4px;
            display: inline-block;
        }
        
        .status-friend {
            background: var(--success);
            color: white;
        }
        
        .status-pending {
            background: var(--warning);
            color: white;
        }
        
        .status-received {
            background: var(--accent);
            color: white;
        }
        
        .add-friend-btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 6px;
            font-size: 0.8rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .add-friend-btn:hover {
            background: var(--secondary);
        }
        
        .add-friend-btn:disabled {
            background: var(--light-gray);
            color: var(--gray);
            cursor: not-allowed;
        }
        
        /* Notification styles */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 2000;
            max-width: 300px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
            animation: slideIn 0.3s ease;
        }
        
        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
        
        .notification-success {
            background: var(--success);
        }
        
        .notification-error {
            background: var(--danger);
        }
        
        .notification-info {
            background: var(--primary);
        }
        
        .notification-warning {
            background: var(--warning);
        }
        
        /* Header notification badge */
        .notification-badge {
            position: relative;
        }
        
        .notification-badge::after {
            content: attr(data-count);
            position: absolute;
            top: -8px;
            right: -8px;
            background: var(--accent);
            color: white;
            font-size: 0.7rem;
            padding: 2px 6px;
            border-radius: 10px;
            min-width: 16px;
            text-align: center;
            display: none;
        }
        
        .notification-badge.has-notifications::after {
            display: block;
        }
        
        /* Loading states */
        .loading {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid var(--light-gray);
            border-radius: 50%;
            border-top-color: var(--primary);
            animation: spin 1s ease-in-out infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        .btn-loading {
            position: relative;
            color: transparent !important;
        }
        
        .btn-loading::after {
            content: '';
            position: absolute;
            width: 16px;
            height: 16px;
            top: 50%;
            left: 50%;
            margin-left: -8px;
            margin-top: -8px;
            border: 2px solid transparent;
            border-top-color: currentColor;
            border-radius: 50%;
            animation: spin 1s ease-in-out infinite;
        }
        
        @media (max-width: 768px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                padding: 1rem;
            }
            
            .main-content {
                padding: 1rem;
            }
            
            .chat-container {
                height: auto;
                flex-direction: column;
            }
            
            .conversations-sidebar {
                width: 100%;
                border-right: none;
                border-bottom: 1px solid var(--light-gray);
                max-height: 300px;
            }
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Sidebar Navigation -->
        <div class="sidebar">
            <div class="sidebar-header">
                <img src="https://ui-avatars.com/api/?name=<%= user.fullName %>&background=6C63FF&color=fff" alt="User Avatar">
                <div>
                    <h3 class="user-name"><%= user.fullName %></h3>
                    <span class="user-plan">
                        <% 
                        const planNames = {
                            'free': 'Free Plan',
                            'basic': 'Basic Plan', 
                            'premium': 'Premium Plan',
                            'pro': 'Pro Plan'
                        };
                        const currentPlan = user.subscription?.plan || 'free';
                        %>
                        <%= planNames[currentPlan] || 'Free Plan' %>
                    </span>
                </div>
            </div>
            
            <ul class="nav-menu">
                <li class="nav-item"><a href="/dashboard?token=<%= navToken %>" class="nav-link"><i class="fas fa-home"></i> Dashboard</a></li>
                <li class="nav-item"><a href="/workouts?token=<%= navToken %>" class="nav-link"><i class="fas fa-dumbbell"></i> Workouts</a></li>
                <li class="nav-item"><a href="/progress?token=<%= navToken %>" class="nav-link"><i class="fas fa-chart-line"></i> Progress</a></li>
                <li class="nav-item"><a href="/nutrition?token=<%= navToken %>" class="nav-link"><i class="fas fa-utensils"></i> Nutrition</a></li>
                <li class="nav-item"><a href="/nutriscan?token=<%= navToken %>" class="nav-link"><i class="fas fa-qrcode"></i> NutriScan</a></li>
                <li class="nav-item"><a href="/meal-planner?token=<%= navToken %>" class="nav-link"><i class="fas fa-calendar-check"></i> Meal Planner</a></li>
                <li class="nav-item"><a href="/challenges?token=<%= navToken %>" class="nav-link"><i class="fas fa-trophy"></i> Challenges</a></li>
                <li class="nav-item"><a href="/health?token=<%= navToken %>" class="nav-link"><i class="fas fa-heartbeat"></i> Health Metrics</a></li>
                <li class="nav-item"><a href="/biometrics?token=<%= navToken %>" class="nav-link"><i class="fas fa-chart-bar"></i> Biometrics</a></li>
                <li class="nav-item"><a href="/schedule?token=<%= navToken %>" class="nav-link"><i class="fas fa-calendar-alt"></i> Schedule</a></li>
                <li class="nav-item"><a href="/community?token=<%= navToken %>" class="nav-link"><i class="fas fa-users"></i> Community</a></li>
                <li class="nav-item"><a href="/ai-coach?token=<%= navToken %>" class="nav-link"><i class="fas fa-robot"></i> AI Coach</a></li>
                <li class="nav-item"><a href="/chat?token=<%= navToken %>" class="nav-link active"><i class="fas fa-comments"></i> Chat</a></li>
                <li class="nav-item"><a href="/settings?token=<%= navToken %>" class="nav-link"><i class="fas fa-cog"></i> Settings</a></li>
            </ul>
            
            <!-- Logout Section -->
            <div class="logout-section">
                <a href="/logout" class="logout-link" onclick="return confirmLogout()">
                    <i class="fas fa-sign-out-alt"></i> Logout
                </a>
            </div>
        </div>
        
        <!-- Main Content -->
        <div class="main-content">
            <div class="page-header">
                <h1 class="page-title">Messages</h1>
                <div>
                    <button class="btn btn-primary" onclick="openAddFriendModal()">
                        <i class="fas fa-user-plus"></i> Add Friend
                    </button>
                    <button class="btn btn-primary notification-badge" id="friend-requests-btn" onclick="toggleFriendRequests()" style="margin-left: 10px;">
                        <i class="fas fa-user-friends"></i> Friend Requests
                    </button>
                </div>
            </div>
            
            <div class="chat-container">
                <!-- Conversations Sidebar -->
                <div class="conversations-sidebar">
                    <!-- Friend Requests Section -->
                    <div class="friend-requests-section" id="friend-requests-section" style="display: none;">
                        <div class="friend-requests-header" onclick="toggleFriendRequestsList()">
                            <h3 class="friend-requests-title">
                                Friend Requests
                                <span class="friend-requests-count" id="friend-requests-count">0</span>
                            </h3>
                            <i class="fas fa-chevron-down friend-requests-toggle" id="friend-requests-toggle"></i>
                        </div>
                        <div class="friend-requests-list" id="friend-requests-list">
                            <!-- Friend requests will be loaded here -->
                        </div>
                    </div>
                    
                    <div class="conversations-header">
                        <h2 class="conversations-title">Conversations</h2>
                        <button class="new-chat-btn" onclick="openAddFriendModal()">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                    
                    <ul class="conversation-list">
                        <% if (conversations && conversations.length > 0) { %>
                            <% conversations.forEach(conv => { %>
                            <li class="conversation-item <%= currentConversationId === conv.conversationId ? 'active' : '' %>" 
                                onclick="loadConversation('<%= conv.conversationId %>', '<%= conv.friend._id %>')">
                                <div class="conversation-user">
                                    <div class="conversation-avatar" 
                                         style="background-image: url('<%= conv.friend.avatar %>'); background-size: cover;">
                                        <%= !conv.friend.avatar.includes('ui-avatars') ? '' : conv.friend.fullName.charAt(0) %>
                                    </div>
                                    <div class="conversation-name"><%= conv.friend.firstName %></div>
                                    <div class="conversation-time"><%= new Date(conv.lastMessage.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) %></div>
                                </div>
                                <div class="conversation-preview">
                                    <div class="conversation-message">
                                        <% if (conv.lastMessage.isFromCurrentUser) { %>
                                        You: 
                                        <% } %>
                                        <%= conv.lastMessage.content.length > 30 ? 
                                            conv.lastMessage.content.substring(0, 30) + '...' : 
                                            conv.lastMessage.content %>
                                    </div>
                                    <% if (conv.unreadCount > 0) { %>
                                    <div class="unread-count"><%= conv.unreadCount %></div>
                                    <% } %>
                                </div>
                            </li>
                            <% }); %>
                        <% } else { %>
                            <li style="padding: 2rem; text-align: center; color: var(--gray);">
                                <i class="fas fa-comments" style="font-size: 2rem; margin-bottom: 1rem; display: block;"></i>
                                <p>No conversations yet</p>
                                <p style="font-size: 0.9rem;">Add friends to start chatting!</p>
                            </li>
                        <% } %>
                    </ul>
                </div>
                
                <!-- Chat Area -->
                <div class="chat-area">
                    <% if (currentConversation) { %>
                    <div class="chat-header">
                        <div class="chat-user">
                            <div class="chat-avatar" 
                                 style="background-image: url('<%= currentFriend.avatar %>'); background-size: cover;">
                                <%= !currentFriend.avatar.includes('ui-avatars') ? '' : currentFriend.fullName.charAt(0) %>
                            </div>
                            <div>
                                <div class="chat-name"><%= currentFriend.fullName %></div>
                                <div class="chat-status">Online</div>
                            </div>
                        </div>
                        <div class="chat-actions">
                            <div class="chat-action-btn">
                                <i class="fas fa-phone"></i>
                            </div>
                            <div class="chat-action-btn">
                                <i class="fas fa-video"></i>
                            </div>
                            <div class="chat-action-btn">
                                <i class="fas fa-ellipsis-v"></i>
                            </div>
                        </div>
                    </div>
                    
                    <div class="messages-container" id="messages-container">
                        <% messages.forEach(msg => { %>
                        <% 
                            const isCurrentUser = msg.sender._id.toString() === user._id.toString();
                            const senderAvatar = isCurrentUser ? 
                                'https://ui-avatars.com/api/?name=' + encodeURIComponent(user.fullName) + '&background=6C63FF&color=fff' : 
                                currentFriend.avatar;
                            const senderInitial = isCurrentUser ? user.fullName.charAt(0) : currentFriend.fullName.charAt(0);
                        %>
                        <div class="message <%= isCurrentUser ? 'sent' : 'received' %>">
                            <div class="message-avatar" 
                                 style="background-image: url('<%= senderAvatar %>'); background-size: cover;">
                                <%= senderInitial %>
                            </div>
                            <div class="message-content">
                                <div class="message-bubble"><%= msg.content %></div>
                                <div class="message-time">
                                    <%= new Date(msg.createdAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) %>
                                    <% if (isCurrentUser) { %>
                                    <i class="fas fa-check" style="margin-left: 4px;"></i>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                        <% }); %>
                    </div>
                    
                    <div class="message-input-container">
                        <button class="attachment-btn">
                            <i class="fas fa-paperclip"></i>
                        </button>
                        <input type="text" class="message-input" placeholder="Type a message..." id="message-input">
                        <button class="send-btn" onclick="sendMessage()">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                    <% } else { %>
                    <div class="no-conversation">
                        <div class="no-conversation-icon">
                            <i class="far fa-comments"></i>
                        </div>
                        <h3 class="no-conversation-title">No conversation selected</h3>
                        <p class="no-conversation-text">Select a conversation from the list or start a new chat with a friend</p>
                        <button class="start-chat-btn">
                            <i class="fas fa-plus"></i> New Chat
                        </button>
                    </div>
                    <% } %>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Add Friend Modal -->
    <div class="modal-overlay" id="add-friend-modal" style="display: none;">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Add Friend</h3>
                <button class="modal-close" onclick="closeAddFriendModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="add-friend-section">
                    <div class="search-input-container">
                        <i class="fas fa-search search-icon"></i>
                        <input type="text" class="search-input" id="friend-search-input" 
                               placeholder="Search by name or email..." 
                               oninput="searchUsers(this.value)">
                    </div>
                    <div id="search-results">
                        <div class="no-results">
                            <i class="fas fa-search" style="font-size: 2rem; margin-bottom: 1rem; display: block;"></i>
                            <p>Search for friends by name or email</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Notification Container -->
    <div id="notification-container"></div>
    
    <script>
    // Set global user context for chat functionality
    window.currentUserId = '<%= user._id %>';
    window.currentUserName = '<%= user.fullName %>';
    window.currentUserEmail = '<%= user.email %>';
    
    // Friend Request System
    let searchTimeout;
    let friendRequestsVisible = false;
    let friendRequestsListExpanded = false;
    
    // Modal Functions
    function openAddFriendModal() {
        console.log('openAddFriendModal called');
        const modal = document.getElementById('add-friend-modal');
        const input = document.getElementById('friend-search-input');
        
        if (!modal || !input) {
            console.error('Modal elements not found');
            return;
        }
        
        modal.style.display = 'flex';
        setTimeout(() => input.focus(), 100);
    }
    
    function closeAddFriendModal() {
        console.log('closeAddFriendModal called');
        const modal = document.getElementById('add-friend-modal');
        const input = document.getElementById('friend-search-input');
        const results = document.getElementById('search-results');
        
        if (modal) modal.style.display = 'none';
        if (input) input.value = '';
        if (results) {
            results.innerHTML = `
                <div class="no-results">
                    <i class="fas fa-search" style="font-size: 2rem; margin-bottom: 1rem; display: block;"></i>
                    <p>Search for friends by name or email</p>
                </div>
            `;
        }
    }
    
    // Close modal when clicking outside
    document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('add-friend-modal').addEventListener('click', function(e) {
    if (e.target === this) {
    closeAddFriendModal();
    }
    });
    });
    
    // Friend Requests Toggle
    function toggleFriendRequests() {
    console.log('toggleFriendRequests called');
    friendRequestsVisible = !friendRequestsVisible;
    const section = document.getElementById('friend-requests-section');
    const btn = document.getElementById('friend-requests-btn');
    
    console.log('Section:', section, 'Button:', btn);
    
    if (!section || !btn) {
    console.error('Required elements not found');
    return;
    }
    
    if (friendRequestsVisible) {
    section.style.display = 'block';
    btn.style.background = 'var(--secondary)';
    loadFriendRequests();
    } else {
    section.style.display = 'none';
    btn.style.background = 'var(--primary)';
    }
    }
    
    function toggleFriendRequestsList() {
    friendRequestsListExpanded = !friendRequestsListExpanded;
    const list = document.getElementById('friend-requests-list');
    const toggle = document.getElementById('friend-requests-toggle');
    
    if (friendRequestsListExpanded) {
    list.classList.add('expanded');
    toggle.classList.add('expanded');
    } else {
    list.classList.remove('expanded');
    toggle.classList.remove('expanded');
    }
    }
    
    // Search Users
    function searchUsers(query) {
    clearTimeout(searchTimeout);
    
    if (!query.trim()) {
    document.getElementById('search-results').innerHTML = `
    <div class="no-results">
    <i class="fas fa-search" style="font-size: 2rem; margin-bottom: 1rem; display: block;"></i>
    <p>Search for friends by name or email</p>
    </div>
    `;
    return;
    }
    
    searchTimeout = setTimeout(async () => {
    try {
    const response = await fetch('/api/users/search', {
    method: 'POST',
    headers: {
    'Content-Type': 'application/json',
    },
    body: JSON.stringify({ query: query.trim() })
    });
    
    const data = await response.json();
    
    if (data.success) {
    displaySearchResults(data.users);
    } else {
    showNotification('Error searching users', 'error');
    }
    } catch (error) {
    console.error('Search error:', error);
    showNotification('Error searching users', 'error');
    }
    }, 300);
    }
    
    function displaySearchResults(users) {
    const resultsContainer = document.getElementById('search-results');
    
    if (users.length === 0) {
    resultsContainer.innerHTML = `
    <div class="no-results">
    <i class="fas fa-user-slash" style="font-size: 2rem; margin-bottom: 1rem; display: block;"></i>
    <p>No users found</p>
    </div>
    `;
    return;
    }
    
    resultsContainer.innerHTML = users.map(user => `
    <div class="search-result-item">
    <div class="user-info">
    <div class="user-avatar" style="background-image: url('${user.avatar}'); background-size: cover;">
    ${!user.avatar.includes('ui-avatars') ? '' : user.fullName.charAt(0)}
    </div>
    <div class="user-details">
    <div class="user-name">${user.fullName}</div>
    <div class="user-email">${user.email}</div>
    ${user.friendshipStatus ? `<div class="user-status status-${user.friendshipStatus}">${getFriendshipStatusText(user.friendshipStatus)}</div>` : ''}
    </div>
    </div>
    ${getActionButton(user)}
    </div>
    `).join('');
    }
    
    function getFriendshipStatusText(status) {
    switch (status) {
    case 'friend': return 'Friends';
    case 'pending': return 'Request Sent';
    case 'received': return 'Request Received';
    default: return '';
    }
    }
    
    function getActionButton(user) {
    switch (user.friendshipStatus) {
    case 'friend':
    return '<button class="add-friend-btn" disabled>Friends</button>';
    case 'pending':
    return '<button class="add-friend-btn" disabled>Request Sent</button>';
    case 'received':
    return `
    <div style="display: flex; gap: 8px;">
    <button class="friend-request-btn friend-request-accept" onclick="respondToFriendRequest('${user._id}', 'accept')">Accept</button>
    <button class="friend-request-btn friend-request-decline" onclick="respondToFriendRequest('${user._id}', 'decline')">Decline</button>
    </div>
    `;
    default:
    return `<button class="add-friend-btn" onclick="sendFriendRequest('${user._id}')">Add Friend</button>`;
    }
    }
    
    // Send Friend Request
    async function sendFriendRequest(userId) {
    const button = event.target;
    const originalText = button.innerHTML;
    
    button.classList.add('btn-loading');
    button.disabled = true;
    
    try {
    const response = await fetch('/api/friends/request', {
    method: 'POST',
    headers: {
    'Content-Type': 'application/json',
    },
    body: JSON.stringify({ userId })
    });
    
    const data = await response.json();
    
    if (data.success) {
    button.innerHTML = 'Request Sent';
    button.disabled = true;
    button.classList.remove('btn-loading');
    showNotification('Friend request sent!', 'success');
    } else {
    throw new Error(data.message || 'Failed to send friend request');
    }
    } catch (error) {
    console.error('Friend request error:', error);
    button.innerHTML = originalText;
    button.disabled = false;
    button.classList.remove('btn-loading');
    showNotification(error.message || 'Failed to send friend request', 'error');
    }
    }
    
    // Load Friend Requests
    async function loadFriendRequests() {
    try {
    const response = await fetch('/api/friends/requests');
    const data = await response.json();
    
    if (data.success) {
    updateFriendRequestsUI(data.requests);
    updateFriendRequestsBadge(data.requests.length);
    }
    } catch (error) {
    console.error('Error loading friend requests:', error);
    }
    }
    
    function updateFriendRequestsUI(requests) {
    const container = document.getElementById('friend-requests-list');
    const countElement = document.getElementById('friend-requests-count');
    
    countElement.textContent = requests.length;
    
    if (requests.length === 0) {
    container.innerHTML = `
    <div style="padding: 2rem; text-align: center; color: var(--gray);">
    <i class="fas fa-user-friends" style="font-size: 2rem; margin-bottom: 1rem; display: block;"></i>
    <p>No friend requests</p>
    </div>
    `;
    return;
    }
    
    container.innerHTML = requests.map(request => `
    <div class="friend-request-item">
    <div class="friend-request-user">
    <div class="friend-request-avatar" style="background-image: url('${request.from.avatar}'); background-size: cover;">
    ${!request.from.avatar.includes('ui-avatars') ? '' : request.from.fullName.charAt(0)}
    </div>
    <div class="friend-request-info">
    <div class="friend-request-name">${request.from.fullName}</div>
    <div class="friend-request-time">${formatTimeAgo(request.createdAt)}</div>
    </div>
    </div>
    <div class="friend-request-actions">
    <button class="friend-request-btn friend-request-accept" onclick="respondToFriendRequest('${request.from._id}', 'accept')">
    Accept
    </button>
    <button class="friend-request-btn friend-request-decline" onclick="respondToFriendRequest('${request.from._id}', 'decline')">
    Decline
    </button>
    </div>
    </div>
    `).join('');
    }
    
    function updateFriendRequestsBadge(count) {
    const badge = document.getElementById('friend-requests-btn');
    
    if (count > 0) {
    badge.classList.add('has-notifications');
    badge.setAttribute('data-count', count);
    } else {
    badge.classList.remove('has-notifications');
    badge.removeAttribute('data-count');
    }
    }
    
    // Respond to Friend Request
    async function respondToFriendRequest(userId, action) {
    const button = event.target;
    const originalText = button.innerHTML;
    
    button.classList.add('btn-loading');
    button.disabled = true;
    
    try {
    const response = await fetch('/api/friends/respond', {
    method: 'POST',
    headers: {
    'Content-Type': 'application/json',
    },
    body: JSON.stringify({ userId, action })
    });
    
    const data = await response.json();
    
    if (data.success) {
    showNotification(
    action === 'accept' ? 'Friend request accepted!' : 'Friend request declined',
    action === 'accept' ? 'success' : 'info'
    );
    
    // Reload friend requests and conversations
    loadFriendRequests();
    if (action === 'accept') {
    // Refresh the page to show new conversation
    setTimeout(() => window.location.reload(), 1000);
    }
    } else {
    throw new Error(data.message || 'Failed to respond to friend request');
    }
    } catch (error) {
    console.error('Friend request response error:', error);
    button.innerHTML = originalText;
    button.disabled = false;
    button.classList.remove('btn-loading');
    showNotification(error.message || 'Failed to respond to friend request', 'error');
    }
    }
    
    // Utility Functions
    function formatTimeAgo(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diffInSeconds = Math.floor((now - date) / 1000);
    
    if (diffInSeconds < 60) return 'Just now';
    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;
    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;
    if (diffInSeconds < 604800) return `${Math.floor(diffInSeconds / 86400)}d ago`;
    
    return date.toLocaleDateString();
    }
    
    function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    const container = document.getElementById('notification-container');
    container.appendChild(notification);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
    if (notification.parentNode) {
    notification.parentNode.removeChild(notification);
    }
    }, 5000);
    }
    
    // Backward compatibility functions
    function loadConversation(conversationId) {
    console.log('loadConversation called with:', conversationId);
    // This will be handled by ChatManager
    }
    
    function sendMessage() {
    if (window.chatManager) {
    window.chatManager.sendMessage();
    }
    }
    
    function confirmLogout() {
        return confirm('Are you sure you want to logout?');
    }
    
    // Make functions globally available
    window.toggleFriendRequests = toggleFriendRequests;
    window.openAddFriendModal = openAddFriendModal;
    window.closeAddFriendModal = closeAddFriendModal;
    
    // Initialize friend requests on page load
    document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM loaded, initializing friend requests');
        loadFriendRequests();
        // Check for friend requests every 30 seconds
        setInterval(loadFriendRequests, 30000);
    });
    </script>
    <script src="/js/chat.js"></script>
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        window.chatManager = new ChatManager();
        // Auto-select the first conversation if available
        const firstConversation = document.querySelector('.conversation-item');
        if (firstConversation) {
          firstConversation.click();
        }
      });
    </script>
</body>
</html>