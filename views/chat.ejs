<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat - Fit-With-AI</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        :root {
            --primary: #6C63FF;
            --secondary: #4D44DB;
            --light: #F8F9FA;
            --dark: #343A40;
            --gray: #6C757D;
            --light-gray: #E9ECEF;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light);
            margin: 0;
            overflow: hidden;
        }

        .chat-container {
            display: flex;
            height: 100vh;
        }

        .sidebar {
            width: 350px;
            background: white;
            border-right: 1px solid var(--light-gray);
            display: flex;
            flex-direction: column;
        }

        .sidebar-header {
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid var(--light-gray);
        }

        .sidebar-header h3 {
            margin: 0;
            font-weight: 600;
        }

        .new-chat-btn {
            background: var(--primary);
            color: white;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            cursor: pointer;
            font-size: 1.2rem;
        }

        .friends-list {
            flex: 1;
            overflow-y: auto;
            padding: 10px;
        }

        .friend-item {
            display: flex;
            align-items: center;
            padding: 15px;
            cursor: pointer;
            border-radius: 8px;
            margin-bottom: 5px;
        }

        .friend-item:hover, .friend-item.active {
            background: rgba(108, 99, 255, 0.1);
        }

        .friend-avatar {
            width: 45px;
            height: 45px;
            border-radius: 50%;
            margin-right: 15px;
        }

        .friend-info h4 {
            margin: 0;
            font-weight: 500;
        }

        .friend-info p {
            margin: 0;
            color: var(--gray);
            font-size: 0.9rem;
        }

        .chat-window {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .chat-header {
            padding: 20px;
            background: white;
            border-bottom: 1px solid var(--light-gray);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .chat-header h3 {
            margin: 0;
            font-weight: 600;
        }

        .chat-options {
            position: relative;
        }

        .options-btn {
            background: none;
            border: none;
            font-size: 1.2rem;
            color: var(--gray);
            cursor: pointer;
            padding: 8px;
            border-radius: 50%;
        }

        .options-btn:hover {
            background: var(--light-gray);
        }

        .options-menu {
            position: absolute;
            top: 100%;
            right: 0;
            background: white;
            border: 1px solid var(--light-gray);
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            min-width: 180px;
            z-index: 1000;
            display: none;
        }

        .options-menu.show {
            display: block;
        }

        .option-item {
            padding: 12px 16px;
            cursor: pointer;
            border-bottom: 1px solid var(--light-gray);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .option-item:last-child {
            border-bottom: none;
        }

        .option-item:hover {
            background: var(--light-gray);
        }

        .option-item.danger {
            color: #dc3545;
        }

        .option-item.danger:hover {
            background: rgba(220, 53, 69, 0.1);
        }

        .messages-area {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }

        .message {
            max-width: 70%;
            padding: 12px 16px;
            border-radius: 18px;
            margin-bottom: 10px;
            word-wrap: break-word;
        }

        .message.sent {
            background: var(--primary);
            color: white;
            align-self: flex-end;
            border-bottom-right-radius: 4px;
        }

        .message.received {
            background: white;
            color: var(--dark);
            align-self: flex-start;
            border-bottom-left-radius: 4px;
            border: 1px solid var(--light-gray);
        }

        .message-input-area {
            padding: 20px;
            background: white;
            border-top: 1px solid var(--light-gray);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .message-input {
            flex: 1;
            padding: 12px 16px;
            border: 1px solid var(--light-gray);
            border-radius: 25px;
            font-family: 'Poppins', sans-serif;
            outline: none;
        }

        .send-btn {
            background: var(--primary);
            color: white;
            border: none;
            border-radius: 50%;
            width: 45px;
            height: 45px;
            cursor: pointer;
            font-size: 1.2rem;
        }

        .no-friends {
            text-align: center;
            padding: 40px 20px;
            color: var(--gray);
        }

        .add-friend-btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            margin-top: 15px;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }

        .modal-content {
            background: white;
            border-radius: 12px;
            padding: 30px;
            max-width: 500px;
            margin: 10% auto;
            position: relative;
        }

        .close-btn {
            position: absolute;
            top: 15px;
            right: 20px;
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: var(--gray);
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }

        .form-group input {
            width: 100%;
            padding: 12px;
            border: 1px solid var(--light-gray);
            border-radius: 8px;
            font-family: 'Poppins', sans-serif;
            box-sizing: border-box;
        }

        .btn-primary {
            background: var(--primary);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-family: 'Poppins', sans-serif;
            width: 100%;
        }

        .friend-request {
            border: 1px solid var(--light-gray);
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .request-actions {
            display: flex;
            gap: 10px;
        }

        .btn-accept {
            background: #28a745;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
        }

        .btn-reject {
            background: #dc3545;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
        }

        .user-result {
            border: 1px solid var(--light-gray);
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .user-result:hover {
            border-color: var(--primary);
            background: rgba(108, 99, 255, 0.05);
        }

        .user-result.selected {
            border-color: var(--primary);
            background: rgba(108, 99, 255, 0.1);
        }

        .user-preview {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .user-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
        }

        .user-info h4 {
            margin: 0 0 5px 0;
            font-weight: 500;
        }

        .user-info p {
            margin: 0;
            color: var(--gray);
            font-size: 0.9rem;
        }

        .fitness-id {
            background: var(--primary);
            color: white;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
            margin-left: 10px;
        }

        .empty-chat {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
            color: var(--gray);
            font-style: italic;
        }

        /* Toast Notifications */
        .toast-notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 10000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
            min-width: 300px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }

        .toast-notification.show {
            transform: translateX(0);
        }

        .toast-success {
            background: linear-gradient(135deg, #28a745, #20c997);
        }

        .toast-error {
            background: linear-gradient(135deg, #dc3545, #fd7e14);
        }

        .toast-info {
            background: linear-gradient(135deg, #17a2b8, #6f42c1);
        }

        .toast-warning {
            background: linear-gradient(135deg, #ffc107, #fd7e14);
        }

        .toast-notification i {
            margin-right: 10px;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-header">
                <h3>Messages</h3>
                <button class="new-chat-btn" onclick="openAddFriendModal()">
                    <i class="fas fa-plus"></i>
                </button>
            </div>
            <div class="friends-list" id="friendsList">
                <div class="no-friends">
                    <i class="fas fa-users" style="font-size: 3rem; margin-bottom: 15px;"></i>
                    <p>No friends yet</p>
                    <button class="add-friend-btn" onclick="openAddFriendModal()">Add Friends</button>
                </div>
            </div>
        </div>

        <!-- Chat Window -->
        <div class="chat-window">
            <div class="chat-header">
                <h3 id="chatTitle">Select a friend to start chatting</h3>
                <div class="chat-options" id="chatOptions" style="display: none;">
                    <button class="options-btn" onclick="toggleOptionsMenu()">
                        <i class="fas fa-ellipsis-v"></i>
                    </button>
                    <div class="options-menu" id="optionsMenu">
                        <div class="option-item" onclick="viewFriendProfile()">
                            <i class="fas fa-user"></i>
                            <span>View Profile</span>
                        </div>
                        <div class="option-item" onclick="blockFriend()">
                            <i class="fas fa-ban"></i>
                            <span>Block Friend</span>
                        </div>
                        <div class="option-item" onclick="clearChat()">
                            <i class="fas fa-trash-alt"></i>
                            <span>Clear Chat</span>
                        </div>
                        <div class="option-item" onclick="exportChat()">
                            <i class="fas fa-download"></i>
                            <span>Export Chat</span>
                        </div>
                        <div class="option-item danger" onclick="removeFriend()">
                            <i class="fas fa-user-times"></i>
                            <span>Remove Friend</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="messages-area" id="messagesArea">
                <div class="empty-chat">
                    <p>Select a friend to start a conversation</p>
                </div>
            </div>
            <div class="message-input-area">
                <input type="text" class="message-input" id="messageInput" placeholder="Type a message..." disabled>
                <button class="send-btn" id="sendBtn" onclick="sendMessage()" disabled>
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Add Friend Modal -->
    <div id="addFriendModal" class="modal">
        <div class="modal-content">
            <button class="close-btn" onclick="closeModal()">&times;</button>
            <h3>Add Friend</h3>
            
            <div class="form-group">
                <label>Search by Email or Fitness ID:</label>
                <input type="text" id="friendSearch" placeholder="Enter email or fitness ID" oninput="searchUsers()">
            </div>
            
            <div id="userResults" style="margin-bottom: 20px;"></div>
            
            <button class="btn-primary" onclick="sendFriendRequestBySearch()" id="sendRequestBtn" disabled>Send Friend Request</button>
            
            <hr style="margin: 30px 0;">
            
            <h4>Pending Requests</h4>
            <div id="friendRequests">
                <p>Loading...</p>
            </div>
        </div>
    </div>

    <script>
        let currentFriend = null;
        let friends = [];

        // Load friends on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadFriends();
            
            // Enter key to send message
            document.getElementById('messageInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
        });

        // Load friends list
        async function loadFriends() {
            try {
                const response = await fetch('/api/chat/friends');
                const data = await response.json();
                
                if (data.success && data.friends.length > 0) {
                    friends = data.friends;
                    displayFriends(data.friends);
                } else {
                    document.getElementById('friendsList').innerHTML = `
                        <div class="no-friends">
                            <i class="fas fa-users" style="font-size: 3rem; margin-bottom: 15px;"></i>
                            <p>No friends yet</p>
                            <button class="add-friend-btn" onclick="openAddFriendModal()">Add Friends</button>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error loading friends:', error);
            }
        }

        // Display friends in sidebar
        function displayFriends(friendsList) {
            const friendsHtml = friendsList.map(friend => `
                <div class="friend-item" onclick="selectFriend('${friend._id}', '${friend.fullName}')">
                    <img src="${friend.avatar}" alt="${friend.fullName}" class="friend-avatar">
                    <div class="friend-info">
                        <h4>${friend.fullName}</h4>
                        <p>Click to chat</p>
                    </div>
                </div>
            `).join('');
            
            document.getElementById('friendsList').innerHTML = friendsHtml;
        }

        // Select friend to chat with
        function selectFriend(friendId, friendName) {
            currentFriend = friendId;
            document.getElementById('chatTitle').textContent = friendName;
            document.getElementById('messageInput').disabled = false;
            document.getElementById('sendBtn').disabled = false;
            document.getElementById('chatOptions').style.display = 'block';
            
            // Remove active class from all friends
            document.querySelectorAll('.friend-item').forEach(item => {
                item.classList.remove('active');
            });
            
            // Add active class to selected friend
            event.target.closest('.friend-item').classList.add('active');
            
            // Load messages
            loadMessages(friendId);
        }

        // Load messages for selected friend
        async function loadMessages(friendId) {
            try {
                const response = await fetch(`/api/chat/messages/${friendId}`);
                const data = await response.json();
                
                if (data.success) {
                    displayMessages(data.messages);
                } else {
                    document.getElementById('messagesArea').innerHTML = '<div class="empty-chat"><p>Start your conversation!</p></div>';
                }
            } catch (error) {
                console.error('Error loading messages:', error);
                document.getElementById('messagesArea').innerHTML = '<div class="empty-chat"><p>Failed to load messages</p></div>';
            }
        }

        // Display messages
        function displayMessages(messages) {
            const messagesHtml = messages.map(message => `
                <div class="message ${message.isSender ? 'sent' : 'received'}">
                    ${message.content}
                </div>
            `).join('');
            
            document.getElementById('messagesArea').innerHTML = messagesHtml;
            document.getElementById('messagesArea').scrollTop = document.getElementById('messagesArea').scrollHeight;
        }

        // Send message
        async function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const content = messageInput.value.trim();
            
            if (!content || !currentFriend) return;
            
            try {
                const response = await fetch('/api/chat/send', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        receiverId: currentFriend,
                        content: content
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    // Add message to UI immediately
                    const messagesArea = document.getElementById('messagesArea');
                    messagesArea.innerHTML += `<div class="message sent">${content}</div>`;
                    messagesArea.scrollTop = messagesArea.scrollHeight;
                    messageInput.value = '';
                } else {
                    showToast('Failed to send message: ' + data.error, 'error');
                }
            } catch (error) {
                console.error('Error sending message:', error);
                showToast('Failed to send message', 'error');
            }
        }

        // Open add friend modal
        function openAddFriendModal() {
            document.getElementById('addFriendModal').style.display = 'block';
            loadFriendRequests();
        }

        // Close modal
        function closeModal() {
            document.getElementById('addFriendModal').style.display = 'none';
            document.getElementById('friendSearch').value = '';
            document.getElementById('userResults').innerHTML = '';
            document.getElementById('sendRequestBtn').disabled = true;
            selectedUser = null;
        }

        let selectedUser = null;

        // Search users
        async function searchUsers() {
            const query = document.getElementById('friendSearch').value.trim();
            const resultsDiv = document.getElementById('userResults');
            const sendBtn = document.getElementById('sendRequestBtn');
            
            if (query.length < 2) {
                resultsDiv.innerHTML = '';
                sendBtn.disabled = true;
                selectedUser = null;
                return;
            }
            
            try {
                const response = await fetch(`/api/chat/search-users?q=${encodeURIComponent(query)}`);
                const data = await response.json();
                
                if (data.success && data.users.length > 0) {
                    const usersHtml = data.users.map(user => `
                        <div class="user-result" onclick="selectUser('${user._id}', '${user.fullName}', '${user.email}', '${user.fitnessId || 'N/A'}')">
                            <div class="user-preview">
                                <img src="${user.avatar}" alt="${user.fullName}" class="user-avatar">
                                <div class="user-info">
                                    <h4>${user.fullName} <span class="fitness-id">ID: ${user.fitnessId || 'N/A'}</span></h4>
                                    <p>${user.email}</p>
                                    <p><strong>Status:</strong> ${getFriendshipStatusText(user.friendshipStatus)}</p>
                                </div>
                            </div>
                        </div>
                    `).join('');
                    
                    resultsDiv.innerHTML = usersHtml;
                } else {
                    resultsDiv.innerHTML = '<p style="text-align: center; color: var(--gray);">No users found</p>';
                }
            } catch (error) {
                console.error('Error searching users:', error);
                resultsDiv.innerHTML = '<p style="text-align: center; color: var(--gray);">Search failed</p>';
            }
        }

        // Select user from search results
        function selectUser(userId, fullName, email, fitnessId) {
            selectedUser = { userId, fullName, email, fitnessId };
            
            // Remove selected class from all results
            document.querySelectorAll('.user-result').forEach(result => {
                result.classList.remove('selected');
            });
            
            // Add selected class to clicked result
            event.target.closest('.user-result').classList.add('selected');
            
            // Enable send button
            document.getElementById('sendRequestBtn').disabled = false;
        }

        // Send friend request by search
        async function sendFriendRequestBySearch() {
            if (!selectedUser) {
                showToast('Please select a user first', 'warning');
                return;
            }
            
            // Check if already sent
            const userResult = document.querySelector('.user-result.selected');
            const statusText = userResult?.querySelector('.user-info p:last-child')?.textContent;
            if (statusText && statusText.includes('Request Sent')) {
                showToast('Friend request already sent to this user', 'info');
                return;
            }
            
            try {
                const response = await fetch('/api/chat/send-friend-request', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        friendEmail: selectedUser.email,
                        message: 'Hi! I would like to connect with you.'
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showToast('Friend request sent successfully!', 'success');
                    document.getElementById('friendSearch').value = '';
                    document.getElementById('userResults').innerHTML = '';
                    document.getElementById('sendRequestBtn').disabled = true;
                    selectedUser = null;
                } else {
                    showToast('Failed to send friend request: ' + data.error, 'error');
                }
            } catch (error) {
                console.error('Error sending friend request:', error);
                showToast('Failed to send friend request', 'error');
            }
        }

        // Get friendship status text
        function getFriendshipStatusText(status) {
            switch(status) {
                case 'friends': return '✅ Already Friends';
                case 'request_sent': return '📤 Request Sent';
                case 'request_received': return '📥 Request Received';
                default: return '➕ Can Add';
            }
        }

        // Load friend requests
        async function loadFriendRequests() {
            try {
                const response = await fetch('/api/chat/friend-requests');
                const data = await response.json();
                
                const requestsDiv = document.getElementById('friendRequests');
                
                if (data.success && data.requests.length > 0) {
                    const requestsHtml = data.requests.map(request => `
                        <div class="friend-request">
                            <div>
                                <strong>${request.sender.fullName}</strong><br>
                                <small>${request.sender.email}</small>
                            </div>
                            <div class="request-actions">
                                <button class="btn-accept" onclick="respondToRequest('${request._id}', 'accept')">Accept</button>
                                <button class="btn-reject" onclick="respondToRequest('${request._id}', 'reject')">Reject</button>
                            </div>
                        </div>
                    `).join('');
                    
                    requestsDiv.innerHTML = requestsHtml;
                } else {
                    requestsDiv.innerHTML = '<p>No pending requests</p>';
                }
            } catch (error) {
                console.error('Error loading friend requests:', error);
                document.getElementById('friendRequests').innerHTML = '<p>Failed to load requests</p>';
            }
        }

        // Respond to friend request
        async function respondToRequest(requestId, action) {
            try {
                const response = await fetch(`/api/chat/friend-requests/${requestId}/${action}`, {
                    method: 'POST'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showToast(`Friend request ${action}ed successfully!`, 'success');
                    loadFriendRequests();
                    loadFriends(); // Refresh friends list
                } else {
                    showToast(`Failed to ${action} friend request: ` + data.error, 'error');
                }
            } catch (error) {
                console.error(`Error ${action}ing friend request:`, error);
                showToast(`Failed to ${action} friend request`, 'error');
            }
        }

        // Toggle options menu
        function toggleOptionsMenu() {
            const menu = document.getElementById('optionsMenu');
            menu.classList.toggle('show');
        }

        // View friend profile
        function viewFriendProfile() {
            if (!currentFriend) return;
            // Redirect to friend's profile or show profile modal
            window.open(`/profile/${currentFriend}`, '_blank');
            toggleOptionsMenu();
        }

        // Block friend
        async function blockFriend() {
            if (!currentFriend) return;
            
            if (!confirm('Are you sure you want to block this friend? You will no longer receive messages from them.')) {
                return;
            }
            
            try {
                const response = await fetch('/api/chat/block-friend', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ friendId: currentFriend })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showToast('Friend blocked successfully', 'success');
                    loadFriends();
                    // Clear chat area
                    document.getElementById('messagesArea').innerHTML = '<div class="empty-chat"><p>Select a friend to start a conversation</p></div>';
                    document.getElementById('chatTitle').textContent = 'Select a friend to start chatting';
                    document.getElementById('chatOptions').style.display = 'none';
                    currentFriend = null;
                } else {
                    showToast('Failed to block friend: ' + data.error, 'error');
                }
            } catch (error) {
                console.error('Error blocking friend:', error);
                showToast('Failed to block friend', 'error');
            }
            
            toggleOptionsMenu();
        }

        // Clear chat
        async function clearChat() {
            if (!currentFriend) return;
            
            if (!confirm('Are you sure you want to clear this chat? This action cannot be undone.')) {
                return;
            }
            
            try {
                const response = await fetch('/api/chat/clear-chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ friendId: currentFriend })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showToast('Chat cleared successfully', 'success');
                    document.getElementById('messagesArea').innerHTML = '<div class="empty-chat"><p>Start your conversation!</p></div>';
                } else {
                    showToast('Failed to clear chat: ' + data.error, 'error');
                }
            } catch (error) {
                console.error('Error clearing chat:', error);
                showToast('Failed to clear chat', 'error');
            }
            
            toggleOptionsMenu();
        }

        // Export chat
        async function exportChat() {
            if (!currentFriend) return;
            
            try {
                const response = await fetch(`/api/chat/export/${currentFriend}`);
                const data = await response.json();
                
                if (data.success) {
                    // Create and download file
                    const blob = new Blob([data.chatData], { type: 'text/plain' });
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `chat_${data.friendName}_${new Date().toISOString().split('T')[0]}.txt`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    window.URL.revokeObjectURL(url);
                } else {
                    showToast('Failed to export chat: ' + data.error, 'error');
                }
            } catch (error) {
                console.error('Error exporting chat:', error);
                showToast('Failed to export chat', 'error');
            }
            
            toggleOptionsMenu();
        }

        // Remove friend
        async function removeFriend() {
            if (!currentFriend) return;
            
            if (!confirm('Are you sure you want to remove this friend? You will need to send a new friend request to reconnect.')) {
                return;
            }
            
            try {
                const response = await fetch('/api/chat/remove-friend', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ friendId: currentFriend })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showToast('Friend removed successfully', 'success');
                    loadFriends();
                    // Clear chat area
                    document.getElementById('messagesArea').innerHTML = '<div class="empty-chat"><p>Select a friend to start a conversation</p></div>';
                    document.getElementById('chatTitle').textContent = 'Select a friend to start chatting';
                    document.getElementById('chatOptions').style.display = 'none';
                    currentFriend = null;
                } else {
                    showToast('Failed to remove friend: ' + data.error, 'error');
                }
            } catch (error) {
                console.error('Error removing friend:', error);
                showToast('Failed to remove friend', 'error');
            }
            
            toggleOptionsMenu();
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('addFriendModal');
            const optionsMenu = document.getElementById('optionsMenu');
            
            if (event.target == modal) {
                closeModal();
            }
            
            // Close options menu when clicking outside
            if (optionsMenu && !event.target.closest('.chat-options')) {
                optionsMenu.classList.remove('show');
            }
        }

        // Toast notification function
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast-notification toast-${type}`;
            
            const icon = type === 'success' ? 'check' : 
                        type === 'error' ? 'exclamation-triangle' : 
                        type === 'warning' ? 'exclamation-circle' : 'info-circle';
            
            toast.innerHTML = `<i class="fas fa-${icon}"></i>${message}`;
            
            document.body.appendChild(toast);
            
            // Trigger animation
            setTimeout(() => toast.classList.add('show'), 100);
            
            // Remove toast after 4 seconds
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.parentNode.removeChild(toast);
                    }
                }, 300);
            }, 4000);
        }
    </script>
</body>
</html>