<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Schedule - Fit With AI</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"></script>
    <style>
        :root {
            --primary-color: #667eea;
            --secondary-color: #764ba2;
            --accent-color: #f093fb;
            --success-color: #4facfe;
            --warning-color: #f6d365;
            --danger-color: #ff6b6b;
            --dark-color: #2c3e50;
            --light-color: #f8f9fa;
            --border-radius: 15px;
            --box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            background: radial-gradient(ellipse at top, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
            color: #ffffff;
            overflow-x: hidden;
            min-height: 100vh;
        }
        
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 40% 40%, rgba(120, 219, 255, 0.2) 0%, transparent 50%);
            pointer-events: none;
            z-index: -1;
        }

        .sidebar {
            background: transparent;
            border: none;
            padding: 30px 20px;
            position: fixed;
            width: 280px;
            height: calc(100vh - 40px);
            top: 20px;
            left: 20px;
            overflow-y: auto;
        }
        
        .sidebar-header {
            display: flex;
            align-items: center;
            margin-bottom: 2rem;
            padding: 0 1rem;
        }

        .main-content {
            margin-left: 320px;
            padding: 20px;
            min-height: 100vh;
        }

        .nav-link {
            display: flex;
            align-items: center;
            padding: 12px 15px;
            color: rgba(255, 255, 255, 0.7);
            text-decoration: none;
            border-radius: 15px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            margin: 5px 0;
        }
        
        .nav-link::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
            transition: left 0.5s;
        }
        
        .nav-link:hover::before {
            left: 100%;
        }
        
        .nav-link:hover, .nav-link.active {
            background: rgba(108, 99, 255, 0.2);
            color: #ffffff;
            transform: translateX(5px);
        }

        .nav-link i {
            margin-right: 0.75rem;
            width: 20px;
        }

        .schedule-container {
            background: transparent;
            border: none;
            padding: 2rem;
            margin-bottom: 2rem;
            position: relative;
        }
        
        .schedule-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(108, 99, 255, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(108, 99, 255, 0.08) 100%);
            border-radius: 12px;
            z-index: -1;
        }

        .schedule-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .schedule-title {
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-size: 2rem;
            font-weight: 600;
            margin: 0;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border: none;
            border-radius: 25px;
            padding: 0.75rem 1.5rem;
            font-weight: 600;
            transition: var(--transition);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .calendar-container {
            background: transparent;
            border: none;
            padding: 1.5rem;
            position: relative;
        }
        
        .calendar-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(108, 99, 255, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(108, 99, 255, 0.08) 100%);
            border-radius: 12px;
            z-index: -1;
        }

        .fc {
            font-family: inherit;
            color: white;
        }
        
        .fc-theme-standard .fc-scrollgrid {
            border-color: rgba(255,255,255,0.1);
        }
        
        .fc-theme-standard td, .fc-theme-standard th {
            border-color: rgba(255,255,255,0.1);
        }
        
        .fc-col-header-cell {
            background: rgba(108, 99, 255, 0.1);
            color: white;
        }
        
        .fc-daygrid-day {
            background: transparent;
        }
        
        .fc-daygrid-day:hover {
            background: rgba(255,255,255,0.05);
        }
        
        .fc-day-today {
            background: rgba(108, 99, 255, 0.2) !important;
        }
        
        .fc-daygrid-day-number {
            color: rgba(255,255,255,0.9);
        }
        
        .fc-day-other .fc-daygrid-day-number {
            color: rgba(255,255,255,0.4);
        }

        .fc-toolbar-title {
            color: white;
            font-weight: bold;
        }
        
        .fc-toolbar-chunk {
            display: flex;
            align-items: center;
        }

        .fc-button-primary {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border: none;
            border-radius: 8px;
            color: white;
        }

        .fc-button-primary:hover, .fc-button-primary:focus {
            background: linear-gradient(135deg, var(--secondary-color), var(--primary-color));
            border: none;
            color: white;
        }
        
        .fc-button-primary:disabled {
            background: rgba(255,255,255,0.1);
            border: none;
            color: rgba(255,255,255,0.5);
        }
        
        .fc-button-active {
            background: linear-gradient(135deg, var(--accent-color), var(--primary-color)) !important;
            border: none !important;
        }

        .fc-event {
            border: none;
            border-radius: 8px;
            padding: 2px 6px;
            font-size: 0.85rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .fc-event:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
        }

        .fc-event.workout-event {
            background: linear-gradient(135deg, #4facfe, #00d2ff);
        }

        .fc-event.meal-event {
            background: linear-gradient(135deg, #f6d365, #ffa726);
        }

        .fc-event.appointment-event {
            background: linear-gradient(135deg, #ff6b6b, #ff8a80);
        }
        
        .fc-event.health-check-event {
            background: linear-gradient(135deg, #a8edea, #fed6e3);
        }
        
        .fc-event.reminder-event {
            background: linear-gradient(135deg, #667eea, #764ba2);
        }
        
        .fc-event.custom-event {
            background: linear-gradient(135deg, #ffecd2, #fcb69f);
        }

        .quick-actions {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .quick-action-card {
            background: transparent;
            border: none;
            padding: 1.5rem;
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
        }
        
        .quick-action-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(108, 99, 255, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(108, 99, 255, 0.08) 100%);
            border-radius: 12px;
            z-index: -1;
            transition: all 0.3s ease;
        }

        .quick-action-card:hover {
            transform: translateY(-5px);
        }
        
        .quick-action-card:hover::before {
            background: linear-gradient(135deg, 
                rgba(108, 99, 255, 0.15) 0%,
                rgba(255, 255, 255, 0.1) 50%,
                rgba(108, 99, 255, 0.12) 100%);
        }

        .quick-action-icon {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            color: var(--primary-color);
        }

        .upcoming-events {
            background: transparent;
            border: none;
            padding: 1.5rem;
            margin-bottom: 2rem;
            position: relative;
        }
        
        .upcoming-events::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(108, 99, 255, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(108, 99, 255, 0.08) 100%);
            border-radius: 12px;
            z-index: -1;
        }

        .event-item {
            display: flex;
            align-items: center;
            padding: 1rem;
            margin: 0.5rem 0;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            border-left: 4px solid var(--primary-color);
            transition: all 0.3s ease;
        }

        .event-item:hover {
            transform: translateX(5px);
            background: rgba(255, 255, 255, 0.1);
        }

        .event-time {
            font-weight: bold;
            color: var(--primary-color);
            margin-right: 1rem;
            min-width: 80px;
        }

        .event-details {
            flex: 1;
        }

        .event-title {
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .event-description {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
        }

        .event-actions {
            display: flex;
            gap: 0.5rem;
        }

        .btn-sm {
            padding: 0.25rem 0.75rem;
            font-size: 0.8rem;
            border-radius: 15px;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: transparent;
            border: none;
            padding: 1.5rem;
            text-align: center;
            position: relative;
            transition: transform 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
        }
        
        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(108, 99, 255, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(108, 99, 255, 0.08) 100%);
            border-radius: 12px;
            z-index: -1;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: 600;
            color: var(--primary-color);
            margin-bottom: 0.5rem;
        }

        .stat-label {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
        }

        .modal-content {
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
            border: 1px solid rgba(255,255,255,0.1);
            border-radius: var(--border-radius);
            box-shadow: 0 20px 60px rgba(0,0,0,0.5);
            color: white;
        }

        .modal-header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            border-radius: var(--border-radius) var(--border-radius) 0 0;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }
        
        .modal-body {
            background: transparent;
            color: white;
        }
        
        .modal-footer {
            background: transparent;
            border-top: 1px solid rgba(255,255,255,0.1);
        }

        .form-control, .form-select {
            background: rgba(255,255,255,0.05);
            border: 1px solid rgba(255,255,255,0.2);
            border-radius: 10px;
            color: white;
            transition: var(--transition);
        }
        
        .form-control::placeholder {
            color: rgba(255,255,255,0.5);
        }
        
        .form-select option {
            background: #1a1a2e;
            color: white;
        }

        .form-control:focus, .form-select:focus {
            background: rgba(255,255,255,0.1);
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
            color: white;
        }
        
        .form-label {
            color: rgba(255,255,255,0.9);
            font-weight: 500;
        }
        
        .form-check-input {
            background-color: rgba(255,255,255,0.1);
            border-color: rgba(255,255,255,0.3);
        }
        
        .form-check-input:checked {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }
        
        .form-check-label {
            color: rgba(255,255,255,0.9);
        }

        .loading-spinner {
            display: none;
            text-align: center;
            padding: 2rem;
        }

        .empty-state {
            text-align: center;
            padding: 3rem;
            color: rgba(255, 255, 255, 0.7);
        }

        .empty-state i {
            font-size: 4rem;
            margin-bottom: 1rem;
            color: rgba(255, 255, 255, 0.3);
        }

        .btn-outline-primary {
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }
        
        .btn-outline-primary:hover {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border-color: rgba(255, 255, 255, 0.5);
        }
        
        .btn-outline-secondary {
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }
        
        .btn-outline-secondary:hover {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border-color: rgba(255, 255, 255, 0.5);
        }
        
        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
                transition: transform 0.3s ease;
                z-index: 1000;
                background: rgba(26, 26, 46, 0.95);
                backdrop-filter: blur(10px);
            }
            
            .sidebar.show {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
                padding: 10px;
            }

            .schedule-header {
                flex-direction: column;
                align-items: stretch;
            }

            .quick-actions {
                grid-template-columns: 1fr;
            }

            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        .ai-suggestions {
            background: transparent;
            border: none;
            padding: 1.5rem;
            margin-bottom: 2rem;
            position: relative;
        }
        
        .ai-suggestions::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(108, 99, 255, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(108, 99, 255, 0.08) 100%);
            border-radius: 12px;
            z-index: -1;
        }

        .suggestion-item {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            padding: 1rem;
            margin: 0.5rem 0;
            border-left: 4px solid var(--accent-color);
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .suggestion-item:hover {
            transform: translateX(5px);
            background: rgba(255, 255, 255, 0.1);
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <img src="https://ui-avatars.com/api/?name=<%= user.fullName %>&background=6C63FF&color=fff" alt="User Avatar" style="width: 40px; height: 40px; border-radius: 50%; margin-right: 10px;">
            <div>
                <h3 style="font-weight: 600; margin: 0; color: white;"><%= user.fullName %></h3>
                <span style="font-size: 0.8rem; color: var(--primary-color); background: rgba(108, 99, 255, 0.1); padding: 2px 8px; border-radius: 20px; margin-top: 5px;">Premium Plan</span>
            </div>
        </div>
        
        <nav class="nav flex-column">
            <a href="/dashboard?token=<%= navToken %>" class="nav-link">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="/workouts?token=<%= navToken %>" class="nav-link">
                <i class="fas fa-dumbbell"></i> Workouts
            </a>
            <a href="/progress?token=<%= navToken %>" class="nav-link">
                <i class="fas fa-chart-line"></i> Progress
            </a>
            <a href="/nutrition?token=<%= navToken %>" class="nav-link">
                <i class="fas fa-utensils"></i> Nutrition
            </a>
            <a href="/nutriscan?token=<%= navToken %>" class="nav-link">
                <i class="fas fa-qrcode"></i> NutriScan
            </a>
            <a href="/meal-planner?token=<%= navToken %>" class="nav-link">
                <i class="fas fa-calendar-check"></i> Meal Planner
            </a>
            <a href="/challenges?token=<%= navToken %>" class="nav-link">
                <i class="fas fa-trophy"></i> Challenges
            </a>
            <a href="/health?token=<%= navToken %>" class="nav-link">
                <i class="fas fa-heartbeat"></i> Health Metrics
            </a>
            <a href="/biometrics?token=<%= navToken %>" class="nav-link" data-premium="analytics">
                <i class="fas fa-chart-bar"></i> Biometrics
            </a>
            <a href="/schedule?token=<%= navToken %>" class="nav-link active">
                <i class="fas fa-calendar-alt"></i> Schedule
            </a>
            <a href="/community?token=<%= navToken %>" class="nav-link">
                <i class="fas fa-users"></i> Community
            </a>
            <a href="/chat?token=<%= navToken %>" class="nav-link">
                <i class="fas fa-comments"></i> Chat
            </a>
            <a href="/ai-coach?token=<%= navToken %>" class="nav-link" data-premium="ai-coach">
                <i class="fas fa-robot"></i> AI Coach
            </a>
            <a href="/settings?token=<%= navToken %>" class="nav-link">
                <i class="fas fa-cog"></i> Settings
            </a>
            <a href="/subscription?token=<%= navToken %>" class="nav-link">
                <i class="fas fa-crown"></i> Subscription
            </a>
        </nav>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Mobile Menu Button -->
        <button class="btn btn-primary d-md-none mb-3" type="button" onclick="toggleSidebar()">
            <i class="fas fa-bars"></i> Menu
        </button>

        <!-- Schedule Header -->
        <div class="schedule-container">
            <div class="schedule-header">
                <h1 class="schedule-title">
                    <i class="fas fa-calendar-alt me-3"></i>My Schedule
                </h1>
                <div class="d-flex gap-2 flex-wrap">
                    <button class="btn btn-primary" onclick="showAddEventModal()">
                        <i class="fas fa-plus me-2"></i>Add Event
                    </button>
                    <button class="btn btn-outline-primary" onclick="loadAISuggestions()">
                        <i class="fas fa-magic me-2"></i>AI Suggestions
                    </button>
                    <button class="btn btn-outline-secondary" onclick="refreshSchedule()">
                        <i class="fas fa-sync-alt me-2"></i>Refresh
                    </button>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="quick-actions">
                <div class="quick-action-card" onclick="quickAddWorkout()">
                    <div class="quick-action-icon">
                        <i class="fas fa-dumbbell"></i>
                    </div>
                    <h5 style="color: white;">Quick Workout</h5>
                    <p style="color: rgba(255, 255, 255, 0.7); margin-bottom: 0;">Schedule a workout session</p>
                </div>
                <div class="quick-action-card" onclick="quickAddMeal()">
                    <div class="quick-action-icon">
                        <i class="fas fa-utensils"></i>
                    </div>
                    <h5 style="color: white;">Meal Planning</h5>
                    <p style="color: rgba(255, 255, 255, 0.7); margin-bottom: 0;">Plan your meals</p>
                </div>
                <div class="quick-action-card" onclick="quickAddAppointment()">
                    <div class="quick-action-icon">
                        <i class="fas fa-user-md"></i>
                    </div>
                    <h5 style="color: white;">Health Appointment</h5>
                    <p style="color: rgba(255, 255, 255, 0.7); margin-bottom: 0;">Book health checkup</p>
                </div>
                <div class="quick-action-card" onclick="viewStats()">
                    <div class="quick-action-icon">
                        <i class="fas fa-chart-bar"></i>
                    </div>
                    <h5 style="color: white;">Schedule Stats</h5>
                    <p style="color: rgba(255, 255, 255, 0.7); margin-bottom: 0;">View your statistics</p>
                </div>
            </div>

            <!-- Schedule Statistics -->
            <div class="stats-grid" id="scheduleStats">
                <div class="stat-card">
                    <div class="stat-number" id="totalEvents">-</div>
                    <div class="stat-label">Total Events</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="completedEvents">-</div>
                    <div class="stat-label">Completed</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="upcomingEvents">-</div>
                    <div class="stat-label">Upcoming</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="completionRate">-</div>
                    <div class="stat-label">Completion Rate</div>
                </div>
            </div>

            <!-- AI Suggestions -->
            <div class="ai-suggestions" id="aiSuggestions" style="display: none;">
                <h5><i class="fas fa-magic me-2"></i>AI Schedule Suggestions</h5>
                <div id="suggestionsList">
                    <!-- AI suggestions will be loaded here -->
                </div>
            </div>

            <!-- Calendar -->
            <div class="calendar-container">
                <div id="calendar"></div>
            </div>
        </div>

        <!-- Upcoming Events -->
        <div class="upcoming-events">
            <h4 style="color: white;"><i class="fas fa-clock me-2"></i>Upcoming Events</h4>
            <div id="upcomingEventsList">
                <div class="loading-spinner">
                    <i class="fas fa-spinner fa-spin fa-2x text-primary"></i>
                    <p class="mt-2">Loading upcoming events...</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Event Modal -->
    <div class="modal fade" id="addEventModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-plus me-2"></i>Add New Event
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addEventForm">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Event Type</label>
                                <select class="form-select" id="eventType" required>
                                    <option value="">Select type...</option>
                                    <option value="workout">Workout</option>
                                    <option value="meal">Meal</option>
                                    <option value="nutrition">Nutrition</option>
                                    <option value="health-check">Health Appointment</option>
                                    <option value="reminder">Reminder</option>
                                    <option value="custom">Custom</option>
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Priority</label>
                                <select class="form-select" id="eventPriority">
                                    <option value="low">Low</option>
                                    <option value="medium" selected>Medium</option>
                                    <option value="high">High</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Title</label>
                            <input type="text" class="form-control" id="eventTitle" required placeholder="Enter event title">
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" id="eventDescription" rows="3" placeholder="Enter event description (optional)"></textarea>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Start Date & Time</label>
                                <input type="datetime-local" class="form-control" id="eventStartDate" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">End Date & Time</label>
                                <input type="datetime-local" class="form-control" id="eventEndDate" required>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Location (Optional)</label>
                            <input type="text" class="form-control" id="eventLocation" placeholder="Enter location">
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="eventReminder" checked>
                                    <label class="form-check-label" for="eventReminder">
                                        Set Reminder
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Reminder (minutes before)</label>
                                <select class="form-select" id="reminderMinutes">
                                    <option value="15" selected>15 minutes</option>
                                    <option value="30">30 minutes</option>
                                    <option value="60">1 hour</option>
                                    <option value="120">2 hours</option>
                                    <option value="1440">1 day</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="eventRecurring">
                                    <label class="form-check-label" for="eventRecurring">
                                        Recurring Event
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Repeat</label>
                                <select class="form-select" id="recurringType" disabled>
                                    <option value="daily">Daily</option>
                                    <option value="weekly" selected>Weekly</option>
                                    <option value="monthly">Monthly</option>
                                </select>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="saveEvent()">
                        <i class="fas fa-save me-2"></i>Save Event
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Event Details Modal -->
    <div class="modal fade" id="eventDetailsModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="eventDetailsTitle">Event Details</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="eventDetailsBody">
                    <!-- Event details will be loaded here -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-success" id="completeEventBtn" onclick="completeEvent()">
                        <i class="fas fa-check me-2"></i>Mark Complete
                    </button>
                    <button type="button" class="btn btn-warning" id="editEventBtn" onclick="editEvent()">
                        <i class="fas fa-edit me-2"></i>Edit
                    </button>
                    <button type="button" class="btn btn-danger" id="deleteEventBtn" onclick="deleteEvent()">
                        <i class="fas fa-trash me-2"></i>Delete
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>
    <script>
        let calendar;
        let currentEventId = null;
        let events = [];

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            // GSAP Animations
            gsap.registerPlugin(ScrollTrigger);
            
            gsap.from(".schedule-header", {duration: 1, y: -50, opacity: 0, ease: "power2.out"});
            gsap.from(".quick-actions .quick-action-card", {duration: 1, y: 50, opacity: 0, stagger: 0.1, delay: 0.3, ease: "power2.out"});
            gsap.from(".stats-grid .stat-card", {duration: 1, y: 50, opacity: 0, stagger: 0.1, delay: 0.6, ease: "power2.out"});
            gsap.from(".calendar-container", {duration: 1, y: 50, opacity: 0, delay: 0.9, ease: "power2.out"});
            
            initializeCalendar();
            loadScheduleData();
            loadUpcomingEvents();
            loadScheduleStats();
            
            // Set default dates for new events
            const now = new Date();
            const tomorrow = new Date(now.getTime() + 24 * 60 * 60 * 1000);
            document.getElementById('eventStartDate').value = formatDateTimeLocal(tomorrow);
            document.getElementById('eventEndDate').value = formatDateTimeLocal(new Date(tomorrow.getTime() + 60 * 60 * 1000));
            
            // Handle recurring event checkbox
            const recurringCheckbox = document.getElementById('eventRecurring');
            const recurringSelect = document.getElementById('recurringType');
            
            if (recurringCheckbox && recurringSelect) {
                recurringCheckbox.addEventListener('change', function() {
                    recurringSelect.disabled = !this.checked;
                });
            }
        });

        // Initialize FullCalendar
        function initializeCalendar() {
            const calendarEl = document.getElementById('calendar');
            calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'
                },
                height: 'auto',
                events: [],
                eventClick: function(info) {
                    showEventDetails(info.event);
                },
                dateClick: function(info) {
                    const clickedDate = new Date(info.date);
                    const endDate = new Date(clickedDate.getTime() + 60 * 60 * 1000);
                    
                    document.getElementById('eventStartDate').value = formatDateTimeLocal(clickedDate);
                    document.getElementById('eventEndDate').value = formatDateTimeLocal(endDate);
                    
                    showAddEventModal();
                },
                eventDidMount: function(info) {
                    // Add custom styling based on event type
                    const eventType = info.event.extendedProps.type;
                    if (eventType) {
                        info.el.classList.add(eventType + '-event');
                    }
                    
                    // Add priority indicator
                    const priority = info.event.extendedProps.priority;
                    if (priority === 'high') {
                        info.el.style.borderLeft = '4px solid #ff6b6b';
                    }
                },
                eventMouseEnter: function(info) {
                    // Show tooltip on hover
                    const tooltip = document.createElement('div');
                    tooltip.className = 'event-tooltip';
                    tooltip.style.cssText = `
                        position: absolute;
                        background: rgba(0,0,0,0.9);
                        color: white;
                        padding: 8px 12px;
                        border-radius: 6px;
                        font-size: 0.8rem;
                        z-index: 10000;
                        pointer-events: none;
                        max-width: 200px;
                    `;
                    tooltip.innerHTML = `
                        <strong>${info.event.title}</strong><br>
                        ${info.event.extendedProps.description || 'No description'}<br>
                        <small>${formatDateTime(info.event.start)}</small>
                    `;
                    
                    document.body.appendChild(tooltip);
                    info.el.addEventListener('mousemove', function(e) {
                        tooltip.style.left = e.pageX + 10 + 'px';
                        tooltip.style.top = e.pageY + 10 + 'px';
                    });
                    
                    info.el._tooltip = tooltip;
                },
                eventMouseLeave: function(info) {
                    if (info.el._tooltip) {
                        info.el._tooltip.remove();
                        delete info.el._tooltip;
                    }
                }
            });
            calendar.render();
        }

        // Load schedule data from API
        async function loadScheduleData() {
            try {
                const startDate = new Date();
                startDate.setMonth(startDate.getMonth() - 1);
                const endDate = new Date();
                endDate.setMonth(endDate.getMonth() + 2);

                const response = await fetch(`/api/schedule/events?startDate=${startDate.toISOString()}&endDate=${endDate.toISOString()}`);
                const data = await response.json();

                if (data.success) {
                    events = data.events;
                    updateCalendarEvents();
                } else {
                    console.error('Failed to load schedule data:', data.error);
                    showNotification('Failed to load schedule data', 'error');
                }
            } catch (error) {
                console.error('Error loading schedule data:', error);
                showNotification('Error loading schedule data', 'error');
            }
        }

        // Update calendar with events
        function updateCalendarEvents() {
            const calendarEvents = events.map(event => ({
                id: event._id,
                title: event.title,
                start: event.startDate,
                end: event.endDate,
                backgroundColor: getEventColor(event.type),
                borderColor: getEventColor(event.type),
                extendedProps: {
                    type: event.type,
                    description: event.description,
                    location: event.location,
                    status: event.status,
                    priority: event.priority,
                    originalEvent: event
                }
            }));

            calendar.removeAllEvents();
            calendar.addEventSource(calendarEvents);
        }

        // Get event color based on type
        function getEventColor(type) {
            const colors = {
                workout: '#4facfe',
                meal: '#f6d365',
                appointment: '#ff6b6b',
                other: '#667eea'
            };
            return colors[type] || colors.other;
        }

        // Load upcoming events
        async function loadUpcomingEvents() {
            try {
                const response = await fetch('/api/schedule/upcoming?limit=10');
                const data = await response.json();

                if (data.success) {
                    displayUpcomingEvents(data.events);
                } else {
                    console.error('Failed to load upcoming events:', data.error);
                }
            } catch (error) {
                console.error('Error loading upcoming events:', error);
            }
        }

        // Display upcoming events
        function displayUpcomingEvents(upcomingEvents) {
            const container = document.getElementById('upcomingEventsList');
            
            if (upcomingEvents.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-calendar-times"></i>
                        <h5>No upcoming events</h5>
                        <p>Add some events to your schedule to see them here.</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = upcomingEvents.map(event => `
                <div class="event-item" onclick="showEventDetails('${event._id}')">
                    <div class="event-time">
                        ${formatEventTime(event.startDate)}
                    </div>
                    <div class="event-details">
                        <div class="event-title">${event.title}</div>
                        <div class="event-description">
                            <i class="fas fa-${getEventIcon(event.type)} me-1"></i>
                            ${event.description || 'No description'}
                        </div>
                    </div>
                    <div class="event-actions">
                        <button class="btn btn-sm btn-success" onclick="event.stopPropagation(); completeEventQuick('${event._id}')">
                            <i class="fas fa-check"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-primary" onclick="event.stopPropagation(); showEventDetails('${event._id}')">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                </div>
            `).join('');
        }

        // Load schedule statistics
        async function loadScheduleStats() {
            try {
                const startDate = new Date();
                startDate.setMonth(startDate.getMonth() - 1);
                const endDate = new Date();

                const response = await fetch(`/api/schedule/stats?startDate=${startDate.toISOString()}&endDate=${endDate.toISOString()}`);
                const data = await response.json();

                if (data.success) {
                    updateScheduleStats(data.stats);
                } else {
                    console.error('Failed to load schedule stats:', data.error);
                }
            } catch (error) {
                console.error('Error loading schedule stats:', error);
            }
        }

        // Update schedule statistics display
        function updateScheduleStats(stats) {
            document.getElementById('totalEvents').textContent = stats.total || 0;
            document.getElementById('completedEvents').textContent = stats.completed || 0;
            document.getElementById('upcomingEvents').textContent = stats.upcoming || 0;
            
            const completionRate = stats.total > 0 ? Math.round((stats.completed / stats.total) * 100) : 0;
            document.getElementById('completionRate').textContent = completionRate + '%';
        }

        // Show add event modal
        function showAddEventModal() {
            const modal = new bootstrap.Modal(document.getElementById('addEventModal'));
            modal.show();
        }

        // Save new event
        async function saveEvent() {
            const form = document.getElementById('addEventForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const eventData = {
                type: document.getElementById('eventType').value,
                title: document.getElementById('eventTitle').value,
                description: document.getElementById('eventDescription').value,
                startDate: new Date(document.getElementById('eventStartDate').value),
                endDate: new Date(document.getElementById('eventEndDate').value),
                location: document.getElementById('eventLocation').value,
                priority: document.getElementById('eventPriority').value,
                reminders: document.getElementById('eventReminder').checked ? [{
                    minutesBefore: parseInt(document.getElementById('reminderMinutes').value),
                    sent: false
                }] : [],
                recurring: document.getElementById('eventRecurring').checked ? {
                    type: document.getElementById('recurringType').value,
                    enabled: true
                } : null
            };

            try {
                const response = await fetch('/api/schedule/events', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(eventData)
                });

                const data = await response.json();

                if (data.success) {
                    showNotification('Event created successfully!', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('addEventModal')).hide();
                    form.reset();
                    loadScheduleData();
                    loadUpcomingEvents();
                    loadScheduleStats();
                } else {
                    showNotification('Failed to create event: ' + data.error, 'error');
                }
            } catch (error) {
                console.error('Error creating event:', error);
                showNotification('Error creating event', 'error');
            }
        }

        // Show event details
        function showEventDetails(eventIdOrObject) {
            let event;
            
            if (typeof eventIdOrObject === 'string') {
                event = events.find(e => e._id === eventIdOrObject);
            } else {
                event = eventIdOrObject.extendedProps.originalEvent;
            }

            if (!event) {
                showNotification('Event not found', 'error');
                return;
            }

            currentEventId = event._id;

            const modal = document.getElementById('eventDetailsModal');
            const title = document.getElementById('eventDetailsTitle');
            const body = document.getElementById('eventDetailsBody');

            title.innerHTML = `<i class="fas fa-${getEventIcon(event.type)} me-2"></i>${event.title}`;

            body.innerHTML = `
                <div class="row">
                    <div class="col-md-6">
                        <strong>Type:</strong> ${event.type.charAt(0).toUpperCase() + event.type.slice(1)}
                    </div>
                    <div class="col-md-6">
                        <strong>Status:</strong> 
                        <span class="badge bg-${getStatusColor(event.status)}">${event.status}</span>
                    </div>
                </div>
                <hr>
                <div class="row">
                    <div class="col-md-6">
                        <strong>Start:</strong> ${formatDateTime(event.startDate)}
                    </div>
                    <div class="col-md-6">
                        <strong>End:</strong> ${formatDateTime(event.endDate)}
                    </div>
                </div>
                ${event.location ? `<hr><strong>Location:</strong> ${event.location}` : ''}
                ${event.description ? `<hr><strong>Description:</strong><br>${event.description}` : ''}
                <hr>
                <div class="row">
                    <div class="col-md-6">
                        <strong>Priority:</strong> 
                        <span class="badge bg-${getPriorityColor(event.priority)}">${event.priority}</span>
                    </div>
                    <div class="col-md-6">
                        <strong>Created:</strong> ${formatDateTime(event.createdAt)}
                    </div>
                </div>
            `;

            // Show/hide action buttons based on event status
            const completeBtn = document.getElementById('completeEventBtn');
            const editBtn = document.getElementById('editEventBtn');
            
            if (event.status === 'completed') {
                completeBtn.style.display = 'none';
            } else {
                completeBtn.style.display = 'inline-block';
            }

            new bootstrap.Modal(modal).show();
        }

        // Complete event
        async function completeEvent() {
            if (!currentEventId) return;

            try {
                const response = await fetch(`/api/schedule/events/${currentEventId}/complete`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        notes: 'Completed via schedule interface'
                    })
                });

                const data = await response.json();

                if (data.success) {
                    showNotification('Event marked as completed!', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('eventDetailsModal')).hide();
                    loadScheduleData();
                    loadUpcomingEvents();
                    loadScheduleStats();
                } else {
                    showNotification('Failed to complete event: ' + data.error, 'error');
                }
            } catch (error) {
                console.error('Error completing event:', error);
                showNotification('Error completing event', 'error');
            }
        }

        // Complete event quickly from upcoming list
        async function completeEventQuick(eventId) {
            try {
                const response = await fetch(`/api/schedule/events/${eventId}/complete`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        notes: 'Quick completion'
                    })
                });

                const data = await response.json();

                if (data.success) {
                    showNotification('Event completed!', 'success');
                    loadScheduleData();
                    loadUpcomingEvents();
                    loadScheduleStats();
                } else {
                    showNotification('Failed to complete event: ' + data.error, 'error');
                }
            } catch (error) {
                console.error('Error completing event:', error);
                showNotification('Error completing event', 'error');
            }
        }

        // Delete event
        async function deleteEvent() {
            if (!currentEventId) return;

            if (!confirm('Are you sure you want to delete this event?')) {
                return;
            }

            try {
                const response = await fetch(`/api/schedule/events/${currentEventId}`, {
                    method: 'DELETE'
                });

                const data = await response.json();

                if (data.success) {
                    showNotification('Event deleted successfully!', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('eventDetailsModal')).hide();
                    loadScheduleData();
                    loadUpcomingEvents();
                    loadScheduleStats();
                } else {
                    showNotification('Failed to delete event: ' + data.error, 'error');
                }
            } catch (error) {
                console.error('Error deleting event:', error);
                showNotification('Error deleting event', 'error');
            }
        }

        // Load AI suggestions
        async function loadAISuggestions() {
            const suggestionsContainer = document.getElementById('aiSuggestions');
            const suggestionsList = document.getElementById('suggestionsList');
            
            suggestionsContainer.style.display = 'block';
            suggestionsList.innerHTML = '<div class="text-center"><i class="fas fa-spinner fa-spin"></i> Loading AI suggestions...</div>';

            try {
                const response = await fetch('/api/schedule/suggestions');
                const data = await response.json();

                if (data.success && data.suggestions.length > 0) {
                    suggestionsList.innerHTML = data.suggestions.map(suggestion => `
                        <div class="suggestion-item" onclick="applySuggestion('${suggestion.id}')">
                            <div class="d-flex justify-content-between align-items-start">
                                <div>
                                    <h6 class="mb-1">${suggestion.title}</h6>
                                    <p class="mb-1 text-muted">${suggestion.description}</p>
                                    <small class="text-primary">
                                        <i class="fas fa-clock me-1"></i>${suggestion.suggestedTime}
                                    </small>
                                </div>
                                <button class="btn btn-sm btn-outline-primary" onclick="event.stopPropagation(); applySuggestion('${suggestion.id}')">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>
                    `).join('');
                } else {
                    suggestionsList.innerHTML = `
                        <div class="text-center text-muted">
                            <i class="fas fa-lightbulb fa-2x mb-2"></i>
                            <p>No AI suggestions available at the moment.</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error loading AI suggestions:', error);
                suggestionsList.innerHTML = `
                    <div class="text-center text-danger">
                        <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                        <p>Failed to load AI suggestions.</p>
                    </div>
                `;
            }
        }

        // Quick action functions
        function quickAddWorkout() {
            document.getElementById('eventType').value = 'workout';
            document.getElementById('eventTitle').value = 'Workout Session';
            document.getElementById('eventDescription').value = 'Scheduled workout session';
            showAddEventModal();
        }

        function quickAddMeal() {
            document.getElementById('eventType').value = 'meal';
            document.getElementById('eventTitle').value = 'Meal Planning';
            document.getElementById('eventDescription').value = 'Plan and prepare meals';
            showAddEventModal();
        }

        function quickAddAppointment() {
            document.getElementById('eventType').value = 'health-check';
            document.getElementById('eventTitle').value = 'Health Appointment';
            document.getElementById('eventDescription').value = 'Medical checkup or consultation';
            showAddEventModal();
        }
        
        function showCalendarView(view) {
            calendar.changeView(view);
            showNotification(`Switched to ${view.replace('Grid', ' ').replace('time', 'Time ')} view`, 'success');
        }
        
        function exportSchedule() {
            showNotification('Export feature coming soon! You\'ll be able to download your schedule as PDF or CSV.', 'info');
        }
        
        function showRecurringEvents() {
            showNotification('Recurring events management coming soon!', 'info');
        }

        function viewStats() {
            // Scroll to stats section with animation
            document.getElementById('scheduleStats').scrollIntoView({ behavior: 'smooth' });
        }

        // Refresh schedule
        function refreshSchedule() {
            loadScheduleData();
            loadUpcomingEvents();
            loadScheduleStats();
            showNotification('Schedule refreshed!', 'success');
        }

        // Utility functions
        function formatDateTime(dateString) {
            return new Date(dateString).toLocaleString();
        }

        function formatEventTime(dateString) {
            return new Date(dateString).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }

        function formatDateTimeLocal(date) {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');
            return `${year}-${month}-${day}T${hours}:${minutes}`;
        }

        function getEventIcon(type) {
            const icons = {
                workout: 'dumbbell',
                meal: 'utensils',
                appointment: 'user-md',
                other: 'calendar'
            };
            return icons[type] || icons.other;
        }

        function getStatusColor(status) {
            const colors = {
                scheduled: 'primary',
                'in-progress': 'warning',
                completed: 'success',
                cancelled: 'secondary',
                missed: 'danger'
            };
            return colors[status] || 'secondary';
        }

        function getPriorityColor(priority) {
            const colors = {
                low: 'secondary',
                medium: 'warning',
                high: 'danger'
            };
            return colors[priority] || 'secondary';
        }

        function showNotification(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show position-fixed`;
            notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            notification.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(notification);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 5000);
        }

        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            sidebar.classList.toggle('show');
        }

        // Close sidebar when clicking outside on mobile
        document.addEventListener('click', function(event) {
            const sidebar = document.getElementById('sidebar');
            const menuButton = event.target.closest('button');
            
            if (window.innerWidth <= 768 && 
                !sidebar.contains(event.target) && 
                !menuButton?.innerHTML.includes('fa-bars')) {
                sidebar.classList.remove('show');
            }
        });
    </script>
    <script src="/js/smart-voice-assistant.js"></script>
</body>
</html>