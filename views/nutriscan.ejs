<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NutriScan - Barcode Scanner | Fit With AI</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/quagga/0.12.1/quagga.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"></script>
    <style>
        :root {
            --primary-color: #6366f1;
            --secondary-color: #8b5cf6;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --dark-color: #1f2937;
            --light-color: #f8fafc;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: radial-gradient(ellipse at top, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
            color: #ffffff;
            overflow-x: hidden;
            min-height: 100vh;
            margin: 0;
            padding: 0;
        }
        
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 40% 40%, rgba(120, 219, 255, 0.2) 0%, transparent 50%);
            pointer-events: none;
            z-index: -1;
        }

        .navbar {
            background: transparent;
            backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .navbar-brand, .nav-link {
            color: rgba(255, 255, 255, 0.9) !important;
        }
        
        .nav-link:hover, .nav-link.active {
            color: #6C63FF !important;
        }

        .scanner-container {
            background: transparent;
            border: none;
            overflow: hidden;
            margin: 2rem 0;
            position: relative;
        }
        
        .scanner-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(108, 99, 255, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(108, 99, 255, 0.08) 100%);
            border-radius: 20px;
            z-index: -1;
        }

        .scanner-header {
            background: transparent;
            color: white;
            padding: 2rem;
            text-align: center;
            position: relative;
        }
        
        .scanner-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(108, 99, 255, 0.2), rgba(139, 92, 246, 0.2));
            border-radius: 20px 20px 0 0;
            z-index: -1;
        }

        .scanner-body {
            padding: 2rem;
            position: relative;
            z-index: 1;
        }

        #scanner-container {
            position: relative;
            width: 100%;
            max-width: 500px;
            margin: 0 auto;
            border-radius: 15px;
            overflow: hidden;
            background: #000;
        }

        #scanner-container video {
            width: 100%;
            height: auto;
            display: block;
        }

        .scanner-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border: 2px solid var(--success-color);
            border-radius: 15px;
            pointer-events: none;
        }

        .scanner-overlay::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 10%;
            right: 10%;
            height: 2px;
            background: var(--success-color);
            transform: translateY(-50%);
            animation: scan-line 2s ease-in-out infinite;
        }

        @keyframes scan-line {
            0%, 100% { opacity: 0.3; }
            50% { opacity: 1; }
        }

        .manual-input {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            padding: 1.5rem;
            margin-top: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .manual-input .form-control {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
        }
        
        .manual-input .form-control::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }
        
        .manual-input .form-control:focus {
            background: rgba(255, 255, 255, 0.15);
            border-color: #6C63FF;
            color: white;
            box-shadow: 0 0 0 0.2rem rgba(108, 99, 255, 0.25);
        }

        .nutrition-card {
            background: transparent;
            border: none;
            margin-top: 2rem;
            overflow: hidden;
            position: relative;
        }
        
        .nutrition-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                rgba(108, 99, 255, 0.1) 0%,
                rgba(255, 255, 255, 0.05) 50%,
                rgba(108, 99, 255, 0.08) 100%);
            border-radius: 15px;
            z-index: -1;
        }

        .nutrition-header {
            background: transparent;
            color: white;
            padding: 1.5rem;
            position: relative;
        }
        
        .nutrition-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(40, 167, 69, 0.2), rgba(5, 150, 105, 0.2));
            border-radius: 15px 15px 0 0;
            z-index: -1;
        }

        .nutrition-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
            padding: 1.5rem;
        }

        .nutrition-item {
            text-align: center;
            padding: 1rem;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            border: 2px solid transparent;
            transition: all 0.3s ease;
        }

        .nutrition-item:hover {
            border-color: #6C63FF;
            transform: translateY(-2px);
            background: rgba(108, 99, 255, 0.1);
        }

        .nutrition-value {
            font-size: 1.5rem;
            font-weight: bold;
            color: #6C63FF;
        }

        .nutrition-label {
            font-size: 0.9rem;
            color: rgba(255, 255, 255, 0.7);
            margin-top: 0.5rem;
        }

        .recommendations {
            background: rgba(245, 158, 11, 0.1);
            border-left: 4px solid #f59e0b;
            padding: 1rem;
            margin: 1rem 0;
            border-radius: 0 10px 10px 0;
            color: white;
        }

        .btn-scan {
            background: linear-gradient(135deg, #6C63FF, #8b5cf6);
            border: none;
            border-radius: 50px;
            padding: 12px 30px;
            color: white;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn-scan:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(99, 102, 241, 0.3);
            color: white;
        }

        .btn-add-to-log {
            background: linear-gradient(135deg, #28A745, #059669);
            border: none;
            border-radius: 50px;
            padding: 10px 25px;
            color: white;
            font-weight: 600;
        }

        .btn-add-to-log:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(16, 185, 129, 0.3);
            color: white;
        }

        .search-results {
            max-height: 400px;
            overflow-y: auto;
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            background: rgba(255, 255, 255, 0.05);
        }

        .product-item {
            padding: 1rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            cursor: pointer;
            transition: background-color 0.2s ease;
            color: white;
        }

        .product-item:hover {
            background-color: rgba(108, 99, 255, 0.1);
        }

        .product-item:last-child {
            border-bottom: none;
        }

        .loading-spinner {
            display: none;
            text-align: center;
            padding: 2rem;
        }

        .scanner-status {
            text-align: center;
            padding: 1rem;
            margin: 1rem 0;
            border-radius: 10px;
            font-weight: 500;
        }

        .scanner-status.success {
            background: rgba(40, 167, 69, 0.1);
            color: #28A745;
            border: 1px solid rgba(40, 167, 69, 0.3);
        }

        .scanner-status.error {
            background: rgba(239, 68, 68, 0.1);
            color: #ef4444;
            border: 1px solid rgba(239, 68, 68, 0.3);
        }

        .scanner-status.info {
            background: rgba(108, 99, 255, 0.1);
            color: #6C63FF;
            border: 1px solid rgba(108, 99, 255, 0.3);
        }

        @media (max-width: 768px) {
            .scanner-container {
                margin: 1rem;
            }
            
            .scanner-header, .scanner-body {
                padding: 1.5rem;
            }
            
            .nutrition-grid {
                grid-template-columns: repeat(2, 1fr);
                gap: 0.5rem;
                padding: 1rem;
            }
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-light sticky-top">
        <div class="container">
            <a class="navbar-brand fw-bold" href="/dashboard<%= navToken ? '?token=' + navToken : '' %>">
                <i class="fas fa-dumbbell me-2" style="color: #6C63FF;"></i>Fit With AI
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" style="border-color: rgba(255,255,255,0.3);">
                <span class="navbar-toggler-icon" style="filter: invert(1);"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/dashboard<%= navToken ? '?token=' + navToken : '' %>">
                            <i class="fas fa-home me-1"></i>Dashboard
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/workouts<%= navToken ? '?token=' + navToken : '' %>">
                            <i class="fas fa-dumbbell me-1"></i>Workouts
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/progress<%= navToken ? '?token=' + navToken : '' %>">
                            <i class="fas fa-chart-line me-1"></i>Progress
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/nutrition<%= navToken ? '?token=' + navToken : '' %>">
                            <i class="fas fa-utensils me-1"></i>Nutrition
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="/nutriscan<%= navToken ? '?token=' + navToken : '' %>">
                            <i class="fas fa-qrcode me-1"></i>NutriScan
                        </a>
                    </li>
                </ul>
                <ul class="navbar-nav">
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown">
                            <i class="fas fa-user-circle me-1"></i><%= user.fullName || 'User' %>
                        </a>
                        <ul class="dropdown-menu" style="background: rgba(26, 26, 46, 0.95); border: 1px solid rgba(255,255,255,0.1);">
                            <li><a class="dropdown-item" href="/settings<%= navToken ? '?token=' + navToken : '' %>" style="color: white;">Settings</a></li>
                            <li><hr class="dropdown-divider" style="border-color: rgba(255,255,255,0.1);"></li>
                            <li><a class="dropdown-item" href="/logout" style="color: white;">Logout</a></li>
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container">
        <!-- Header -->
        <div class="scanner-container">
            <div class="scanner-header">
                <h1><i class="fas fa-qrcode me-3"></i>NutriScan</h1>
                <p class="mb-0">Scan product barcodes to get instant nutrition information</p>
            </div>
            
            <div class="scanner-body">
                <!-- Scanner Status -->
                <div id="scanner-status" class="scanner-status info">
                    <i class="fas fa-info-circle me-2"></i>
                    Click "Start Scanner" to begin scanning barcodes
                </div>

                <!-- Scanner Controls -->
                <div class="text-center mb-4">
                    <button id="start-scanner" class="btn btn-scan me-2">
                        <i class="fas fa-camera me-2"></i>Start Scanner
                    </button>
                    <button id="stop-scanner" class="btn btn-outline-secondary" style="display: none;">
                        <i class="fas fa-stop me-2"></i>Stop Scanner
                    </button>
                </div>

                <!-- Scanner Container -->
                <div id="scanner-container" style="display: none;">
                    <div class="scanner-overlay"></div>
                </div>

                <!-- Manual Input -->
                <div class="manual-input">
                    <h5><i class="fas fa-keyboard me-2"></i>Manual Entry</h5>
                    <div class="row">
                        <div class="col-md-8">
                            <input type="text" id="manual-barcode" class="form-control" placeholder="Enter barcode manually (e.g., 8901030895559)">
                        </div>
                        <div class="col-md-4">
                            <button id="lookup-barcode" class="btn btn-scan w-100">
                                <i class="fas fa-search me-2"></i>Lookup
                            </button>
                        </div>
                    </div>
                    
                    <!-- Product Search -->
                    <div class="mt-3">
                        <div class="row">
                            <div class="col-md-8">
                                <input type="text" id="product-search" class="form-control" placeholder="Or search by product name (e.g., Maggi Noodles)">
                            </div>
                            <div class="col-md-4">
                                <button id="search-products" class="btn btn-outline-primary w-100">
                                    <i class="fas fa-search me-2"></i>Search
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Loading Spinner -->
                <div id="loading-spinner" class="loading-spinner">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Fetching nutrition information...</p>
                </div>

                <!-- Search Results -->
                <div id="search-results" class="search-results mt-3" style="display: none;">
                    <h6 class="p-3 mb-0 bg-light"><i class="fas fa-list me-2"></i>Search Results</h6>
                    <div id="search-results-list"></div>
                </div>
            </div>
        </div>

        <!-- Nutrition Information Card -->
        <div id="nutrition-card" class="nutrition-card" style="display: none;">
            <div class="nutrition-header">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <h4 id="product-name" class="mb-1">Product Name</h4>
                        <p id="product-brand" class="mb-0 opacity-75">Brand Name</p>
                    </div>
                    <div class="col-md-4 text-end">
                        <img id="product-image" src="" alt="Product Image" class="img-fluid rounded" style="max-height: 80px; display: none;">
                    </div>
                </div>
            </div>

            <div class="nutrition-grid" id="nutrition-grid">
                <!-- Nutrition items will be populated here -->
            </div>

            <!-- Serving Size Selector -->
            <div class="px-3 pb-3">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <label for="serving-size" class="form-label">Serving Size (grams):</label>
                        <input type="number" id="serving-size" class="form-control" value="100" min="1" max="1000">
                    </div>
                    <div class="col-md-6 text-end">
                        <button id="add-to-nutrition-log" class="btn btn-add-to-log">
                            <i class="fas fa-plus me-2"></i>Add to Nutrition Log
                        </button>
                    </div>
                </div>
            </div>

            <!-- Recommendations -->
            <div id="recommendations" class="recommendations" style="display: none;">
                <h6><i class="fas fa-lightbulb me-2"></i>Recommendations</h6>
                <div id="recommendations-content"></div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        class NutriScanner {
            constructor() {
                this.isScanning = false;
                this.currentProduct = null;
                this.initializeEventListeners();
            }

            initializeEventListeners() {
                document.getElementById('start-scanner').addEventListener('click', () => this.startScanner());
                document.getElementById('stop-scanner').addEventListener('click', () => this.stopScanner());
                document.getElementById('lookup-barcode').addEventListener('click', () => this.lookupBarcode());
                document.getElementById('search-products').addEventListener('click', () => this.searchProducts());
                document.getElementById('serving-size').addEventListener('input', () => this.updateNutritionDisplay());
                document.getElementById('add-to-nutrition-log').addEventListener('click', () => this.addToNutritionLog());
                
                // Enter key handlers
                document.getElementById('manual-barcode').addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') this.lookupBarcode();
                });
                
                document.getElementById('product-search').addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') this.searchProducts();
                });
            }

            async startScanner() {
                try {
                    this.updateStatus('Initializing camera...', 'info');
                    
                    const scannerContainer = document.getElementById('scanner-container');
                    scannerContainer.style.display = 'block';
                    
                    await this.initializeQuagga();
                    
                    document.getElementById('start-scanner').style.display = 'none';
                    document.getElementById('stop-scanner').style.display = 'inline-block';
                    
                    this.isScanning = true;
                    this.updateStatus('Scanner active - Point camera at barcode', 'success');
                    
                } catch (error) {
                    console.error('Scanner initialization error:', error);
                    this.updateStatus('Camera access denied or not available. Please use manual entry.', 'error');
                    document.getElementById('scanner-container').style.display = 'none';
                }
            }

            stopScanner() {
                if (this.isScanning) {
                    Quagga.stop();
                    this.isScanning = false;
                }
                
                document.getElementById('scanner-container').style.display = 'none';
                document.getElementById('start-scanner').style.display = 'inline-block';
                document.getElementById('stop-scanner').style.display = 'none';
                
                this.updateStatus('Scanner stopped', 'info');
            }

            async initializeQuagga() {
                return new Promise((resolve, reject) => {
                    Quagga.init({
                        inputStream: {
                            name: "Live",
                            type: "LiveStream",
                            target: document.querySelector('#scanner-container'),
                            constraints: {
                                width: 500,
                                height: 300,
                                facingMode: "environment"
                            }
                        },
                        decoder: {
                            readers: [
                                "code_128_reader",
                                "ean_reader",
                                "ean_8_reader",
                                "code_39_reader",
                                "code_39_vin_reader",
                                "codabar_reader",
                                "upc_reader",
                                "upc_e_reader"
                            ]
                        }
                    }, (err) => {
                        if (err) {
                            reject(err);
                            return;
                        }
                        
                        Quagga.start();
                        
                        Quagga.onDetected((data) => {
                            const barcode = data.codeResult.code;
                            console.log('Barcode detected:', barcode);
                            
                            this.stopScanner();
                            this.processBarcode(barcode);
                        });
                        
                        resolve();
                    });
                });
            }

            async lookupBarcode() {
                const barcode = document.getElementById('manual-barcode').value.trim();
                if (!barcode) {
                    this.updateStatus('Please enter a barcode', 'error');
                    return;
                }
                
                await this.processBarcode(barcode);
            }

            async processBarcode(barcode) {
                try {
                    this.showLoading(true);
                    this.updateStatus(`Looking up barcode: ${barcode}`, 'info');
                    
                    const response = await fetch(`/api/nutriscan/barcode/${barcode}`);
                    const data = await response.json();
                    
                    if (data.success && data.nutrition) {
                        this.currentProduct = data.nutrition;
                        this.displayNutritionInfo(data.nutrition);
                        this.updateStatus('Product found successfully!', 'success');
                    } else {
                        this.updateStatus('Product not found. Try manual search or different barcode.', 'error');
                    }
                    
                } catch (error) {
                    console.error('Barcode lookup error:', error);
                    this.updateStatus('Error looking up product. Please try again.', 'error');
                } finally {
                    this.showLoading(false);
                }
            }

            async searchProducts() {
                const query = document.getElementById('product-search').value.trim();
                if (!query) {
                    this.updateStatus('Please enter a product name to search', 'error');
                    return;
                }
                
                try {
                    this.showLoading(true);
                    this.updateStatus(`Searching for: ${query}`, 'info');
                    
                    const response = await fetch(`/api/nutriscan/search?q=${encodeURIComponent(query)}`);
                    const data = await response.json();
                    
                    if (data.success && data.products && data.products.length > 0) {
                        this.displaySearchResults(data.products);
                        this.updateStatus(`Found ${data.products.length} products`, 'success');
                    } else {
                        this.updateStatus('No products found. Try a different search term.', 'error');
                        document.getElementById('search-results').style.display = 'none';
                    }
                    
                } catch (error) {
                    console.error('Product search error:', error);
                    this.updateStatus('Error searching products. Please try again.', 'error');
                } finally {
                    this.showLoading(false);
                }
            }

            displaySearchResults(products) {
                const resultsContainer = document.getElementById('search-results-list');
                resultsContainer.innerHTML = '';
                
                products.forEach(product => {
                    const productItem = document.createElement('div');
                    productItem.className = 'product-item';
                    productItem.innerHTML = `
                        <div class="d-flex align-items-center">
                            <div class="flex-grow-1">
                                <h6 class="mb-1">${product.productName}</h6>
                                <small class="text-muted">${product.brand} • ${product.category}</small>
                                <div class="mt-1">
                                    <span class="badge bg-primary me-1">${product.nutritionPer100g.calories} cal</span>
                                    <span class="badge bg-success me-1">${product.nutritionPer100g.protein}g protein</span>
                                </div>
                            </div>
                            ${product.imageUrl ? `<img src="${product.imageUrl}" alt="${product.productName}" class="ms-2" style="width: 50px; height: 50px; object-fit: cover; border-radius: 5px;">` : ''}
                        </div>
                    `;
                    
                    productItem.addEventListener('click', () => {
                        this.currentProduct = product;
                        this.displayNutritionInfo(product);
                        document.getElementById('search-results').style.display = 'none';
                        this.updateStatus('Product selected successfully!', 'success');
                    });
                    
                    resultsContainer.appendChild(productItem);
                });
                
                document.getElementById('search-results').style.display = 'block';
            }

            displayNutritionInfo(nutrition) {
                document.getElementById('product-name').textContent = nutrition.productName;
                document.getElementById('product-brand').textContent = nutrition.brand;
                
                // Product image
                const productImage = document.getElementById('product-image');
                if (nutrition.imageUrl) {
                    productImage.src = nutrition.imageUrl;
                    productImage.style.display = 'block';
                } else {
                    productImage.style.display = 'none';
                }
                
                this.updateNutritionDisplay();
                document.getElementById('nutrition-card').style.display = 'block';
                
                // Scroll to nutrition card
                document.getElementById('nutrition-card').scrollIntoView({ behavior: 'smooth' });
            }

            updateNutritionDisplay() {
                if (!this.currentProduct) return;
                
                const servingSize = parseInt(document.getElementById('serving-size').value) || 100;
                const multiplier = servingSize / 100;
                const nutrition = this.currentProduct.nutritionPer100g;
                
                const nutritionGrid = document.getElementById('nutrition-grid');
                nutritionGrid.innerHTML = `
                    <div class="nutrition-item">
                        <div class="nutrition-value">${Math.round(nutrition.calories * multiplier)}</div>
                        <div class="nutrition-label">Calories</div>
                    </div>
                    <div class="nutrition-item">
                        <div class="nutrition-value">${(nutrition.protein * multiplier).toFixed(1)}g</div>
                        <div class="nutrition-label">Protein</div>
                    </div>
                    <div class="nutrition-item">
                        <div class="nutrition-value">${(nutrition.carbohydrates * multiplier).toFixed(1)}g</div>
                        <div class="nutrition-label">Carbs</div>
                    </div>
                    <div class="nutrition-item">
                        <div class="nutrition-value">${(nutrition.fat * multiplier).toFixed(1)}g</div>
                        <div class="nutrition-label">Fat</div>
                    </div>
                    <div class="nutrition-item">
                        <div class="nutrition-value">${(nutrition.fiber * multiplier).toFixed(1)}g</div>
                        <div class="nutrition-label">Fiber</div>
                    </div>
                    <div class="nutrition-item">
                        <div class="nutrition-value">${(nutrition.sugar * multiplier).toFixed(1)}g</div>
                        <div class="nutrition-label">Sugar</div>
                    </div>
                    <div class="nutrition-item">
                        <div class="nutrition-value">${(nutrition.sodium * multiplier * 1000).toFixed(0)}mg</div>
                        <div class="nutrition-label">Sodium</div>
                    </div>
                    <div class="nutrition-item">
                        <div class="nutrition-value">${(nutrition.saturatedFat * multiplier).toFixed(1)}g</div>
                        <div class="nutrition-label">Sat. Fat</div>
                    </div>
                `;
            }

            async addToNutritionLog() {
                if (!this.currentProduct) return;
                
                try {
                    const servingSize = parseInt(document.getElementById('serving-size').value) || 100;
                    const multiplier = servingSize / 100;
                    const nutrition = this.currentProduct.nutritionPer100g;
                    
                    const nutritionData = {
                        meals: [{
                            type: 'snack',
                            foods: [{
                                name: this.currentProduct.productName,
                                brand: this.currentProduct.brand,
                                quantity: servingSize,
                                unit: 'g',
                                calories: Math.round(nutrition.calories * multiplier),
                                protein: Math.round(nutrition.protein * multiplier * 10) / 10,
                                carbs: Math.round(nutrition.carbohydrates * multiplier * 10) / 10,
                                fat: Math.round(nutrition.fat * multiplier * 10) / 10,
                                barcode: this.currentProduct.barcode
                            }]
                        }],
                        totalCalories: Math.round(nutrition.calories * multiplier),
                        totalProtein: Math.round(nutrition.protein * multiplier * 10) / 10,
                        totalCarbs: Math.round(nutrition.carbohydrates * multiplier * 10) / 10,
                        totalFat: Math.round(nutrition.fat * multiplier * 10) / 10,
                        waterIntake: 0
                    };
                    
                    const response = await fetch('/api/nutrition', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(nutritionData)
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        this.updateStatus('Added to nutrition log successfully!', 'success');
                        
                        // Show success animation or redirect
                        setTimeout(() => {
                            window.location.href = '/nutrition<%= navToken ? "?token=" + navToken : "" %>';
                        }, 2000);
                    } else {
                        this.updateStatus('Failed to add to nutrition log', 'error');
                    }
                    
                } catch (error) {
                    console.error('Add to nutrition log error:', error);
                    this.updateStatus('Error adding to nutrition log', 'error');
                }
            }

            updateStatus(message, type) {
                const statusElement = document.getElementById('scanner-status');
                statusElement.className = `scanner-status ${type}`;
                statusElement.innerHTML = `<i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'} me-2"></i>${message}`;
            }

            showLoading(show) {
                document.getElementById('loading-spinner').style.display = show ? 'block' : 'none';
            }
        }

        // Initialize the scanner when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            initializeAnimations();
            new NutriScanner();
        });
        
        // Initialize GSAP animations
        function initializeAnimations() {
            gsap.registerPlugin(ScrollTrigger);
            
            // Animate scanner container
            gsap.fromTo('.scanner-container', 
                { y: 50, opacity: 0, scale: 0.95 },
                { 
                    y: 0, 
                    opacity: 1, 
                    scale: 1,
                    duration: 0.8,
                    delay: 0.2,
                    ease: "back.out(1.7)"
                }
            );
            
            // Animate manual input section
            gsap.fromTo('.manual-input', 
                { x: -50, opacity: 0 },
                { 
                    x: 0, 
                    opacity: 1,
                    duration: 0.6,
                    delay: 0.4,
                    ease: "power2.out"
                }
            );
            
            // Animate nutrition card when it appears
            const nutritionCard = document.getElementById('nutrition-card');
            const observer = new MutationObserver((mutations) => {
                mutations.forEach((mutation) => {
                    if (mutation.type === 'attributes' && mutation.attributeName === 'style') {
                        if (nutritionCard.style.display === 'block') {
                            gsap.fromTo(nutritionCard, 
                                { y: 50, opacity: 0, scale: 0.9 },
                                { 
                                    y: 0, 
                                    opacity: 1, 
                                    scale: 1,
                                    duration: 0.8,
                                    ease: "back.out(1.7)"
                                }
            );
                        }
                    }
                });
            });
            
            observer.observe(nutritionCard, { attributes: true });
        }
    </script>
</body>
</html>