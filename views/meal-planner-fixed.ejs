<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Meal Planning & Tracking - Fit-With-AI</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        :root {
            --primary: #6C63FF;
            --secondary: #4D44DB;
            --accent: #FF6584;
            --light: #F8F9FA;
            --dark: #343A40;
            --success: #28A745;
            --warning: #FFC107;
            --danger: #DC3545;
            --gray: #6C757D;
            --light-gray: #E9ECEF;
            --gradient-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --gradient-success: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
            --gradient-warning: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            color: var(--dark);
            margin: 0;
            padding: 0;
            min-height: 100vh;
        }
        
        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }
        
        .sidebar {
            width: 250px;
            background: white;
            box-shadow: 2px 0 20px rgba(0,0,0,0.1);
            padding: 2rem 1rem;
            position: fixed;
            height: 100vh;
            overflow-y: auto;
        }
        
        .sidebar-header {
            display: flex;
            align-items: center;
            margin-bottom: 2rem;
            padding: 0 1rem;
        }
        
        .user-name {
            font-weight: 600;
            margin: 0;
        }
        
        .user-plan {
            font-size: 0.8rem;
            color: var(--primary);
            background: rgba(108, 99, 255, 0.1);
            padding: 2px 8px;
            border-radius: 20px;
            margin-top: 5px;
        }
        
        .nav-menu {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .nav-item {
            margin-bottom: 5px;
        }
        
        .nav-link {
            display: flex;
            align-items: center;
            padding: 12px 1rem;
            color: var(--gray);
            text-decoration: none;
            border-radius: 8px;
            transition: all 0.3s ease;
        }
        
        .nav-link:hover, .nav-link.active {
            background: rgba(108, 99, 255, 0.1);
            color: var(--primary);
            transform: translateX(5px);
        }
        
        .nav-link i {
            margin-right: 10px;
            font-size: 1.2rem;
        }
        
        .logout-section {
            margin-top: 2rem;
            padding-top: 1rem;
            border-top: 1px solid var(--light-gray);
        }
        
        .logout-link {
            display: flex;
            align-items: center;
            padding: 12px 1rem;
            color: var(--danger);
            text-decoration: none;
            border-radius: 8px;
            transition: all 0.3s ease;
            font-weight: 500;
        }
        
        .logout-link:hover {
            background: rgba(220, 53, 69, 0.1);
            transform: translateX(5px);
        }
        
        .logout-link i {
            margin-right: 10px;
            font-size: 1.2rem;
        }
        
        .main-content {
            flex: 1;
            margin-left: 250px;
            padding: 2rem;
        }
        
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            background: white;
            padding: 2rem;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        
        .page-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--dark);
            margin: 0;
        }
        
        .ai-badge {
            background: var(--gradient-primary);
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 25px;
            font-size: 0.9rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            box-shadow: 0 5px 15px rgba(108, 99, 255, 0.3);
        }
        
        .ai-badge i {
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        
        /* Enhanced Welcome Section */
        .welcome-card {
            background: white;
            border-radius: 20px;
            padding: 3rem;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            text-align: center;
            margin-bottom: 2rem;
            position: relative;
            overflow: hidden;
        }
        
        .welcome-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 5px;
            background: var(--gradient-primary);
        }
        
        .welcome-header {
            margin-bottom: 3rem;
        }
        
        .ai-avatar {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            background: var(--gradient-primary);
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1.5rem;
            font-size: 2.5rem;
            color: white;
            animation: float 3s ease-in-out infinite;
            box-shadow: 0 10px 30px rgba(108, 99, 255, 0.3);
        }
        
        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
        }
        
        .welcome-header h2 {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--dark);
            margin-bottom: 1rem;
            background: var(--gradient-primary);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .welcome-header p {
            font-size: 1.2rem;
            color: var(--gray);
            max-width: 700px;
            margin: 0 auto;
            line-height: 1.8;
        }
        
        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 2rem;
            margin-bottom: 3rem;
        }
        
        .feature-item {
            text-align: center;
            padding: 2rem;
            background: rgba(255, 255, 255, 0.5);
            border-radius: 15px;
            transition: all 0.3s ease;
            border: 1px solid rgba(108, 99, 255, 0.1);
        }
        
        .feature-item:hover {
            transform: translateY(-10px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            background: white;
        }
        
        .feature-icon {
            width: 80px;
            height: 80px;
            border-radius: 20px;
            background: var(--gradient-primary);
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1.5rem;
            font-size: 2rem;
            color: white;
            box-shadow: 0 10px 25px rgba(108, 99, 255, 0.3);
        }
        
        .feature-item h4 {
            font-size: 1.3rem;
            font-weight: 600;
            color: var(--dark);
            margin-bottom: 1rem;
        }
        
        .feature-item p {
            color: var(--gray);
            line-height: 1.6;
        }
        
        .cta-section {
            text-align: center;
        }
        
        .btn {
            padding: 1rem 2rem;
            border: none;
            border-radius: 12px;
            font-family: inherit;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
            font-size: 1rem;
        }
        
        .btn-primary {
            background: var(--gradient-primary);
            color: white;
            box-shadow: 0 10px 25px rgba(108, 99, 255, 0.3);
        }
        
        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 35px rgba(108, 99, 255, 0.4);
        }
        
        .btn-large {
            padding: 1.25rem 2.5rem;
            font-size: 1.1rem;
            font-weight: 700;
        }
        
        .cta-note {
            margin-top: 1.5rem;
            color: var(--gray);
            font-size: 0.95rem;
        }
        
        /* Enhanced Modal Styles */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            backdrop-filter: blur(5px);
        }
        
        .modal-content {
            background: white;
            border-radius: 20px;
            width: 90%;
            max-width: 700px;
            max-height: 85vh;
            overflow-y: auto;
            box-shadow: 0 25px 50px rgba(0,0,0,0.3);
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 2rem 2rem 1rem;
            border-bottom: 1px solid var(--light-gray);
            background: var(--gradient-primary);
            color: white;
            border-radius: 20px 20px 0 0;
        }
        
        .modal-header h2 {
            margin: 0;
            font-weight: 700;
            font-size: 1.5rem;
        }
        
        .close {
            font-size: 1.5rem;
            cursor: pointer;
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: white;
            padding: 0.5rem;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }
        
        .close:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: rotate(90deg);
        }
        
        .modal-body {
            padding: 2rem;
        }
        
        .assessment-progress {
            margin-bottom: 2rem;
        }
        
        .progress-bar {
            width: 100%;
            height: 12px;
            background: var(--light-gray);
            border-radius: 6px;
            overflow: hidden;
            margin-bottom: 1rem;
        }
        
        .progress-fill {
            height: 100%;
            background: var(--gradient-success);
            border-radius: 6px;
            transition: width 0.5s ease;
            position: relative;
        }
        
        .progress-fill::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            animation: shimmer 2s infinite;
        }
        
        @keyframes shimmer {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }
        
        .progress-text {
            text-align: center;
            color: var(--gray);
            font-size: 0.9rem;
            font-weight: 500;
        }
        
        .question-container {
            margin-bottom: 2rem;
        }
        
        .question {
            margin-bottom: 2rem;
        }
        
        .question-title {
            font-size: 1.3rem;
            font-weight: 600;
            color: var(--dark);
            margin-bottom: 1.5rem;
            line-height: 1.4;
        }
        
        .question-description {
            color: var(--gray);
            margin-bottom: 1rem;
            font-size: 0.95rem;
        }
        
        .question-input {
            width: 100%;
            padding: 15px 20px;
            border: 2px solid var(--light-gray);
            border-radius: 12px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: white;
            box-sizing: border-box;
        }
        
        .question-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(108, 99, 255, 0.1);
        }
        
        .number-input-container {
            position: relative;
            display: block;
            width: 100%;
        }
        
        .input-unit {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--gray);
            font-weight: 500;
        }
        
        .question-options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
        }
        
        .enhanced-options {
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        }
        
        .option-card {
            border: 2px solid var(--light-gray);
            border-radius: 12px;
            padding: 1.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            background: white;
            position: relative;
        }
        
        .option-card:hover {
            border-color: var(--primary);
            box-shadow: 0 5px 15px rgba(108, 99, 255, 0.2);
            transform: translateY(-2px);
        }
        
        .option-card.selected {
            border-color: var(--success);
            background: linear-gradient(135deg, rgba(40, 167, 69, 0.1), rgba(40, 167, 69, 0.05));
            box-shadow: 0 5px 20px rgba(40, 167, 69, 0.3);
        }
        
        .enhanced-card {
            text-align: left;
        }
        
        .option-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
        }
        
        .option-description {
            color: var(--gray);
            font-size: 0.9rem;
            margin: 0;
        }
        
        .multiselect-options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 0.75rem;
        }
        
        .enhanced-multiselect {
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        }
        
        .multiselect-option {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 1rem;
            border: 2px solid var(--light-gray);
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            background: white;
        }
        
        .multiselect-option:hover {
            background: rgba(108, 99, 255, 0.05);
            border-color: var(--primary);
        }
        
        .multiselect-option.selected {
            background: linear-gradient(135deg, rgba(40, 167, 69, 0.1), rgba(40, 167, 69, 0.05));
            border-color: var(--success);
        }
        
        .checkbox-container {
            position: relative;
        }
        
        .checkbox-container input[type="checkbox"] {
            opacity: 0;
            position: absolute;
        }
        
        .checkmark {
            width: 20px;
            height: 20px;
            border: 2px solid var(--light-gray);
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }
        
        .multiselect-option.selected .checkmark {
            background: var(--success);
            border-color: var(--success);
        }
        
        .multiselect-option.selected .checkmark::after {
            content: '✓';
            color: white;
            font-weight: bold;
            font-size: 12px;
        }
        
        .option-text {
            font-weight: 500;
            color: var(--dark);
        }
        
        .assessment-navigation {
            display: flex;
            justify-content: space-between;
            gap: 1rem;
            margin-top: 2rem;
        }
        
        .assessment-navigation .btn {
            flex: 1;
            justify-content: center;
        }
        
        .btn-outline {
            background: white;
            color: var(--primary);
            border: 2px solid var(--primary);
        }
        
        .btn-outline:hover {
            background: var(--primary);
            color: white;
        }
        
        .btn-success {
            background: var(--gradient-success);
            color: white;
            box-shadow: 0 5px 15px rgba(40, 167, 69, 0.3);
        }
        
        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(40, 167, 69, 0.4);
        }
        
        /* Meal Plan Display */
        .meal-plan-section {
            background: white;
            border-radius: 20px;
            padding: 2rem;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }
        
        .daily-summary {
            background: var(--gradient-primary);
            color: white;
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
        }
        
        .summary-title {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 1.5rem;
            text-align: center;
        }
        
        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
        }
        
        .summary-item {
            text-align: center;
            background: rgba(255, 255, 255, 0.1);
            padding: 1.5rem;
            border-radius: 12px;
            backdrop-filter: blur(10px);
        }
        
        .summary-value {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }
        
        .summary-label {
            font-size: 0.9rem;
            opacity: 0.9;
            font-weight: 500;
        }
        
        .summary-progress {
            width: 100%;
            height: 8px;
            background: rgba(255,255,255,0.2);
            border-radius: 4px;
            margin-top: 1rem;
            overflow: hidden;
        }
        
        .summary-progress-fill {
            height: 100%;
            background: white;
            border-radius: 4px;
            transition: width 0.8s ease;
        }
        
        /* Toast Notifications */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 12px;
            color: white;
            z-index: 2000;
            font-weight: 500;
            transform: translateX(100%);
            transition: transform 0.3s ease;
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
        }
        
        .toast.show {
            transform: translateX(0);
        }
        
        .toast-success { 
            background: var(--gradient-success);
        }
        
        .toast-error { 
            background: var(--gradient-warning);
        }
        
        .toast-info { 
            background: var(--gradient-primary);
        }
        
        /* Responsive Design */
        @media (max-width: 768px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                position: relative;
                height: auto;
                padding: 1rem;
            }
            
            .main-content {
                margin-left: 0;
                padding: 1rem;
            }
            
            .page-header {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }
            
            .features-grid {
                grid-template-columns: 1fr;
            }
            
            .question-options {
                grid-template-columns: 1fr;
            }
            
            .multiselect-options {
                grid-template-columns: 1fr;
            }
            
            .summary-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-header">
                <div>
                    <h3 class="user-name"><%= user.fullName %></h3>
                    <span class="user-plan">Premium Plan</span>
                </div>
            </div>
            
            <ul class="nav-menu">
                <li class="nav-item"><a href="/dashboard" class="nav-link"><i class="fas fa-home"></i> Dashboard</a></li>
                <li class="nav-item"><a href="/workouts" class="nav-link"><i class="fas fa-dumbbell"></i> Workouts</a></li>
                <li class="nav-item"><a href="/progress" class="nav-link"><i class="fas fa-chart-line"></i> Progress</a></li>
                <li class="nav-item"><a href="/nutrition" class="nav-link"><i class="fas fa-utensils"></i> Nutrition</a></li>
                <li class="nav-item"><a href="/meal-planner" class="nav-link active"><i class="fas fa-calendar-check"></i> Meal Planner</a></li>
                <li class="nav-item"><a href="/challenges" class="nav-link"><i class="fas fa-trophy"></i> Challenges</a></li>
                <li class="nav-item"><a href="/health" class="nav-link"><i class="fas fa-heartbeat"></i> Health Metrics</a></li>
                <li class="nav-item"><a href="/biometrics" class="nav-link"><i class="fas fa-chart-bar"></i> Biometrics</a></li>
                <li class="nav-item"><a href="/schedule" class="nav-link"><i class="fas fa-calendar-alt"></i> Schedule</a></li>
                <li class="nav-item"><a href="/community" class="nav-link"><i class="fas fa-users"></i> Community</a></li>
                <li class="nav-item"><a href="/ai-coach" class="nav-link"><i class="fas fa-robot"></i> AI Coach</a></li>
                <li class="nav-item"><a href="/chat" class="nav-link"><i class="fas fa-comments"></i> Chat</a></li>
                <li class="nav-item"><a href="/settings" class="nav-link"><i class="fas fa-cog"></i> Settings</a></li>
            </ul>
            
            <div class="logout-section">
                <a href="/logout" class="logout-link">
                    <i class="fas fa-sign-out-alt"></i> Logout
                </a>
            </div>
        </div>
        
        <!-- Main Content -->
        <div class="main-content">
            <div class="page-header">
                <h1 class="page-title">AI Meal Planning & Tracking</h1>
                <div class="ai-badge">
                    <i class="fas fa-robot"></i>
                    AI-Powered Nutrition
                </div>
            </div>
            
            <!-- Health Assessment Modal -->
            <div id="healthAssessmentModal" class="modal" style="display: none;">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2><i class="fas fa-brain"></i> AI Health Assessment</h2>
                        <span class="close" onclick="closeHealthAssessment()">&times;</span>
                    </div>
                    <div class="modal-body">
                        <div class="assessment-progress">
                            <div class="progress-bar">
                                <div class="progress-fill" id="assessmentProgress" style="width: 0%"></div>
                            </div>
                            <div class="progress-text">
                                <span id="currentQuestion">1</span> of <span id="totalQuestions">20</span> questions
                            </div>
                        </div>
                        
                        <div class="question-container" id="questionContainer">
                            <!-- Questions will be populated here -->
                        </div>
                        
                        <div class="assessment-navigation">
                            <button class="btn btn-outline" id="prevBtn" onclick="previousQuestion()" disabled>
                                <i class="fas fa-arrow-left"></i> Previous
                            </button>
                            <button class="btn btn-primary" id="nextBtn" onclick="nextQuestion()">
                                Next <i class="fas fa-arrow-right"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Meal Plan Display -->
            <div id="mealPlanSection" class="meal-plan-section" style="display: none;">
                <!-- Daily Summary -->
                <div class="daily-summary">
                    <h2 class="summary-title">Your Personalized Nutrition Plan</h2>
                    <div class="summary-grid">
                        <div class="summary-item">
                            <div class="summary-value" id="targetCalories">0</div>
                            <div class="summary-label">Target Calories</div>
                            <div class="summary-progress">
                                <div class="summary-progress-fill" id="caloriesProgress" style="width: 0%"></div>
                            </div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-value" id="targetProtein">0g</div>
                            <div class="summary-label">Target Protein</div>
                            <div class="summary-progress">
                                <div class="summary-progress-fill" id="proteinProgress" style="width: 0%"></div>
                            </div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-value" id="targetCarbs">0g</div>
                            <div class="summary-label">Target Carbs</div>
                            <div class="summary-progress">
                                <div class="summary-progress-fill" id="carbsProgress" style="width: 0%"></div>
                            </div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-value" id="targetFat">0g</div>
                            <div class="summary-label">Target Fat</div>
                            <div class="summary-progress">
                                <div class="summary-progress-fill" id="fatProgress" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Weekly Meal Plan -->
                <div id="weeklyMealPlan">
                    <!-- Meal plan will be populated here -->
                </div>
            </div>

            <!-- Welcome Section -->
            <div id="welcomeSection">
                <div class="welcome-card">
                    <div class="welcome-header">
                        <div class="ai-avatar">
                            <i class="fas fa-robot"></i>
                        </div>
                        <h2>Welcome to AI Meal Planning!</h2>
                        <p>I'm your personal nutrition AI assistant. Let me create a customized meal plan based on your health profile, goals, regional preferences, and lifestyle.</p>
                    </div>
                    
                    <div class="features-grid">
                        <div class="feature-item">
                            <div class="feature-icon">
                                <i class="fas fa-brain"></i>
                            </div>
                            <h4>Smart Analysis</h4>
                            <p>AI analyzes your health data, medical conditions, regional preferences, and lifestyle</p>
                        </div>
                        <div class="feature-item">
                            <div class="feature-icon">
                                <i class="fas fa-globe-asia"></i>
                            </div>
                            <h4>Regional Cuisine</h4>
                            <p>Authentic North Indian, South Indian, and regional meal plans tailored to your taste</p>
                        </div>
                        <div class="feature-item">
                            <div class="feature-icon">
                                <i class="fas fa-utensils"></i>
                            </div>
                            <h4>Personalized Meals</h4>
                            <p>Custom meal plans considering dietary restrictions, cooking time, and budget</p>
                        </div>
                        <div class="feature-item">
                            <div class="feature-icon">
                                <i class="fas fa-heartbeat"></i>
                            </div>
                            <h4>Health-Focused</h4>
                            <p>Meals designed for specific medical conditions like diabetes, hypertension, and more</p>
                        </div>
                        <div class="feature-item">
                            <div class="feature-icon">
                                <i class="fas fa-chart-line"></i>
                            </div>
                            <h4>Progress Tracking</h4>
                            <p>Real-time nutrition tracking and goal monitoring with detailed analytics</p>
                        </div>
                        <div class="feature-item">
                            <div class="feature-icon">
                                <i class="fas fa-shopping-cart"></i>
                            </div>
                            <h4>Smart Shopping</h4>
                            <p>Automated grocery lists with budget optimization and local ingredient suggestions</p>
                        </div>
                    </div>
                    
                    <div class="cta-section">
                        <button class="btn btn-primary btn-large" onclick="startHealthAssessment()">
                            <i class="fas fa-magic"></i> Start Health Assessment
                        </button>
                        <p class="cta-note">Takes 5-7 minutes • Completely personalized • Science-backed • Regional cuisine support</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // Global variables
        let healthQuestions = [];
        let currentQuestionIndex = 0;
        let healthAnswers = {};
        
        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Enhanced Meal Planner initialized');
        });
        
        // Start health assessment
        async function startHealthAssessment() {
            try {
                console.log('Starting enhanced health assessment...');
                showToast('Loading health assessment questions...', 'info');
                
                // Load health questions from server
                const response = await fetch('/api/meal-planner/health-questions');
                const data = await response.json();
                
                console.log('Health questions response:', data);
                
                if (data.success) {
                    healthQuestions = data.questions;
                    currentQuestionIndex = 0;
                    healthAnswers = {};
                    
                    console.log('Loaded', healthQuestions.length, 'enhanced health questions');
                    
                    // Show modal and first question
                    document.getElementById('healthAssessmentModal').style.display = 'flex';
                    document.getElementById('totalQuestions').textContent = healthQuestions.length;
                    
                    showQuestion(0);
                    showToast('Health assessment started!', 'success');
                } else {
                    console.error('Failed to load health questions:', data.error);
                    showToast('Failed to load health assessment', 'error');
                }
            } catch (error) {
                console.error('Error starting health assessment:', error);
                showToast('Error starting health assessment', 'error');
            }
        }
        
        // Show specific question with enhanced UI
        function showQuestion(index) {
            if (index >= healthQuestions.length) {
                completeAssessment();
                return;
            }
            
            const question = healthQuestions[index];
            const container = document.getElementById('questionContainer');
            
            // Update progress
            const progress = ((index + 1) / healthQuestions.length) * 100;
            document.getElementById('assessmentProgress').style.width = progress + '%';
            document.getElementById('currentQuestion').textContent = index + 1;
            
            // Generate question HTML with enhanced styling
            let questionHTML = `
                <div class="question">
                    <h3 class="question-title">${question.question}</h3>
                    ${question.description ? `<p class="question-description">${question.description}</p>` : ''}
            `;
            
            switch (question.type) {
                case 'number':
                    questionHTML += `
                        <div class="number-input-container">
                            <input type="number" 
                                   class="question-input" 
                                   id="answer-${question.id}" 
                                   min="${question.min || 0}" 
                                   max="${question.max || 1000}"
                                   value="${healthAnswers[question.id] || ''}"
                                   placeholder="Enter ${question.question.toLowerCase()}"
                                   onchange="saveNumberInput('${question.id}')">
                            ${question.unit ? `<span class="input-unit">${question.unit}</span>` : ''}
                        </div>
                    `;
                    break;
                    
                case 'select':
                    if (Array.isArray(question.options) && question.options.length > 0 && typeof question.options[0] === 'object') {
                        // Options with labels
                        questionHTML += '<div class="question-options enhanced-options">';
                        question.options.forEach(option => {
                            const isSelected = healthAnswers[question.id] === option.value;
                            questionHTML += `
                                <div class="option-card enhanced-card ${isSelected ? 'selected' : ''}" 
                                     onclick="selectOption('${question.id}', '${option.value}')">
                                    <div class="option-header">
                                        <strong>${option.label}</strong>
                                        ${isSelected ? '<i class="fas fa-check-circle"></i>' : ''}
                                    </div>
                                    ${option.description ? `<p class="option-description">${option.description}</p>` : ''}
                                </div>
                            `;
                        });
                        questionHTML += '</div>';
                    } else {
                        // Simple options
                        questionHTML += '<div class="question-options">';
                        question.options.forEach(option => {
                            const isSelected = healthAnswers[question.id] === option;
                            const displayText = formatOptionText(option);
                            questionHTML += `
                                <div class="option-card ${isSelected ? 'selected' : ''}" 
                                     onclick="selectOption('${question.id}', '${option}')">
                                    <span>${displayText}</span>
                                    ${isSelected ? '<i class="fas fa-check-circle"></i>' : ''}
                                </div>
                            `;
                        });
                        questionHTML += '</div>';
                    }
                    break;
                    
                case 'multiselect':
                    questionHTML += '<div class="multiselect-options enhanced-multiselect">';
                    question.options.forEach(option => {
                        const isSelected = healthAnswers[question.id] && healthAnswers[question.id].includes(option);
                        const displayText = formatOptionText(option);
                        questionHTML += `
                            <div class="multiselect-option ${isSelected ? 'selected' : ''}" 
                                 onclick="toggleMultiOption('${question.id}', '${option}')">
                                <div class="checkbox-container">
                                    <input type="checkbox" ${isSelected ? 'checked' : ''} readonly>
                                    <span class="checkmark"></span>
                                </div>
                                <span class="option-text">${displayText}</span>
                            </div>
                        `;
                    });
                    questionHTML += '</div>';
                    break;
            }
            
            questionHTML += '</div>';
            container.innerHTML = questionHTML;
            
            // Update navigation buttons
            document.getElementById('prevBtn').disabled = index === 0;
            const nextBtn = document.getElementById('nextBtn');
            if (index === healthQuestions.length - 1) {
                nextBtn.innerHTML = 'Generate Meal Plan <i class="fas fa-magic"></i>';
                nextBtn.classList.add('btn-success');
                nextBtn.classList.remove('btn-primary');
            } else {
                nextBtn.innerHTML = 'Next <i class="fas fa-arrow-right"></i>';
                nextBtn.classList.add('btn-primary');
                nextBtn.classList.remove('btn-success');
            }
        }
        
        // Format option text for better display
        function formatOptionText(option) {
            return option.charAt(0).toUpperCase() + 
                   option.slice(1)
                         .replace(/_/g, ' ')
                         .replace(/([a-z])([A-Z])/g, '$1 $2');
        }
        
        // Save number input value
        function saveNumberInput(questionId) {
            const input = document.getElementById(`answer-${questionId}`);
            if (input && input.value) {
                healthAnswers[questionId] = input.value;
                console.log('Saved number input:', questionId, input.value);
            }
        }
        
        // Select single option - FIXED
        function selectOption(questionId, value) {
            console.log('Selecting option:', questionId, value);
            healthAnswers[questionId] = value;
            
            // Update UI - remove selected class from all options in this question
            const questionContainer = document.getElementById('questionContainer');
            const allOptions = questionContainer.querySelectorAll('.option-card');
            allOptions.forEach(card => card.classList.remove('selected'));
            
            // Add selected class to clicked option
            const clickedElement = event.target.closest('.option-card');
            if (clickedElement) {
                clickedElement.classList.add('selected');
            }
            
            console.log('Updated answers:', healthAnswers);
        }
        
        // Toggle multi-select option - FIXED
        function toggleMultiOption(questionId, value) {
            console.log('Toggling multi-option:', questionId, value);
            
            if (!healthAnswers[questionId]) {
                healthAnswers[questionId] = [];
            }
            
            const index = healthAnswers[questionId].indexOf(value);
            if (index > -1) {
                healthAnswers[questionId].splice(index, 1);
            } else {
                healthAnswers[questionId].push(value);
            }
            
            // Update UI
            const clickedElement = event.target.closest('.multiselect-option');
            if (clickedElement) {
                clickedElement.classList.toggle('selected');
                const checkbox = clickedElement.querySelector('input[type="checkbox"]');
                if (checkbox) {
                    checkbox.checked = !checkbox.checked;
                }
            }
            
            console.log('Updated multiselect answers:', healthAnswers);
        }
        
        // Validate current answer
        function validateCurrentAnswer() {
            const currentQuestion = healthQuestions[currentQuestionIndex];
            if (!currentQuestion) return true;
            
            // Save any pending number input
            const numberInput = document.getElementById(`answer-${currentQuestion.id}`);
            if (numberInput && numberInput.value) {
                healthAnswers[currentQuestion.id] = numberInput.value;
            }
            
            // Check if answer exists for required questions
            if (currentQuestion.required) {
                const answer = healthAnswers[currentQuestion.id];
                
                if (answer === undefined || answer === null || answer === '') {
                    return false;
                }
                
                // For multiselect, check if array has items
                if (currentQuestion.type === 'multiselect') {
                    return Array.isArray(answer) && answer.length > 0;
                }
                
                return true;
            }
            
            return true;
        }
        
        // Navigation functions - FIXED
        function nextQuestion() {
            console.log('Next question clicked, current index:', currentQuestionIndex);
            console.log('Current answers before validation:', healthAnswers);
            
            // Validate current answer
            if (!validateCurrentAnswer()) {
                showToast('Please answer this question before continuing', 'error');
                return;
            }
            
            console.log('Moving to next question. Current answers:', healthAnswers);
            
            currentQuestionIndex++;
            showQuestion(currentQuestionIndex);
        }
        
        function previousQuestion() {
            if (currentQuestionIndex > 0) {
                // Save current answer before going back
                validateCurrentAnswer();
                
                currentQuestionIndex--;
                showQuestion(currentQuestionIndex);
            }
        }
        
        // Complete assessment and generate meal plan
        async function completeAssessment() {
            try {
                // Final validation
                if (!validateCurrentAnswer()) {
                    showToast('Please answer the current question before completing', 'error');
                    return;
                }
                
                showToast('Processing your health assessment...', 'info');
                
                console.log('Submitting health assessment:', healthAnswers);
                
                const response = await fetch('/api/meal-planner/health-assessment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        answers: healthAnswers
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    console.log('Assessment completed successfully:', data);
                    
                    // Close modal
                    closeHealthAssessment();
                    
                    // Show meal plan
                    displayMealPlan(data.nutritionTargets, data.mealPlan);
                    
                    showToast('Your personalized meal plan is ready!', 'success');
                } else {
                    console.error('Assessment submission failed:', data.error);
                    showToast('Failed to generate meal plan: ' + data.error, 'error');
                }
            } catch (error) {
                console.error('Error completing assessment:', error);
                showToast('Error generating meal plan', 'error');
            }
        }
        
        // Display generated meal plan
        function displayMealPlan(nutritionTargets, mealPlan) {
            // Hide welcome section
            document.getElementById('welcomeSection').style.display = 'none';
            
            // Show meal plan section
            const mealPlanSection = document.getElementById('mealPlanSection');
            mealPlanSection.style.display = 'block';
            
            // Update nutrition targets
            document.getElementById('targetCalories').textContent = nutritionTargets.calories;
            document.getElementById('targetProtein').textContent = nutritionTargets.protein + 'g';
            document.getElementById('targetCarbs').textContent = nutritionTargets.carbs + 'g';
            document.getElementById('targetFat').textContent = nutritionTargets.fat + 'g';
            
            // Generate weekly meal plan HTML
            const weeklyPlanContainer = document.getElementById('weeklyMealPlan');
            let weeklyPlanHTML = '<h3 style="text-align: center; margin-bottom: 2rem; color: var(--dark);">Your 7-Day Meal Plan</h3>';
            
            const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
            const dayNames = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
            
            days.forEach((day, index) => {
                const dayPlan = mealPlan[day];
                if (dayPlan) {
                    weeklyPlanHTML += `
                        <div class="day-plan" style="background: white; border-radius: 15px; padding: 2rem; margin-bottom: 2rem; box-shadow: 0 5px 15px rgba(0,0,0,0.1);">
                            <h4 style="color: var(--primary); font-size: 1.5rem; margin-bottom: 1.5rem; text-align: center;">${dayNames[index]}</h4>
                            <div class="meals-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 1.5rem;">
                    `;
                    
                    Object.keys(dayPlan).forEach(mealType => {
                        const meal = dayPlan[mealType];
                        weeklyPlanHTML += `
                            <div class="meal-card" style="border: 2px solid var(--light-gray); border-radius: 12px; padding: 1.5rem; transition: all 0.3s ease;">
                                <div class="meal-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                                    <h5 style="color: var(--dark); font-weight: 600; margin: 0; text-transform: capitalize;">${mealType.replace('_', ' ')}</h5>
                                    <span style="background: var(--gradient-primary); color: white; padding: 0.25rem 0.75rem; border-radius: 15px; font-size: 0.8rem;">${meal.calories} cal</span>
                                </div>
                                <h6 style="color: var(--primary); font-weight: 600; margin-bottom: 0.5rem;">${meal.name}</h6>
                                <p style="color: var(--gray); font-size: 0.9rem; margin-bottom: 1rem;">${meal.description}</p>
                                <div class="nutrition-info" style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 0.5rem; margin-bottom: 1rem;">
                                    <div style="text-align: center; padding: 0.5rem; background: rgba(108, 99, 255, 0.1); border-radius: 8px;">
                                        <div style="font-weight: 600; color: var(--primary);">${meal.protein}g</div>
                                        <div style="font-size: 0.8rem; color: var(--gray);">Protein</div>
                                    </div>
                                    <div style="text-align: center; padding: 0.5rem; background: rgba(40, 167, 69, 0.1); border-radius: 8px;">
                                        <div style="font-weight: 600; color: var(--success);">${meal.carbs}g</div>
                                        <div style="font-size: 0.8rem; color: var(--gray);">Carbs</div>
                                    </div>
                                    <div style="text-align: center; padding: 0.5rem; background: rgba(255, 193, 7, 0.1); border-radius: 8px;">
                                        <div style="font-weight: 600; color: var(--warning);">${meal.fat}g</div>
                                        <div style="font-size: 0.8rem; color: var(--gray);">Fat</div>
                                    </div>
                                </div>
                                ${meal.cookingTime ? `<div style="color: var(--gray); font-size: 0.9rem;"><i class="fas fa-clock"></i> ${meal.cookingTime} minutes</div>` : ''}
                                ${meal.region ? `<div style="color: var(--gray); font-size: 0.9rem; margin-top: 0.5rem;"><i class="fas fa-map-marker-alt"></i> ${formatOptionText(meal.region)} cuisine</div>` : ''}
                            </div>
                        `;
                    });
                    
                    weeklyPlanHTML += `
                            </div>
                        </div>
                    `;
                }
            });
            
            weeklyPlanContainer.innerHTML = weeklyPlanHTML;
            
            // Scroll to meal plan
            mealPlanSection.scrollIntoView({ behavior: 'smooth' });
        }
        
        // Close health assessment modal
        function closeHealthAssessment() {
            document.getElementById('healthAssessmentModal').style.display = 'none';
        }
        
        // Show toast notification
        function showToast(message, type) {
            const toast = document.createElement('div');
            toast.className = `toast toast-${type}`;
            toast.innerHTML = `<i class="fas fa-${type === 'success' ? 'check' : type === 'error' ? 'exclamation' : 'info'}-circle"></i> ${message}`;
            document.body.appendChild(toast);
            
            // Trigger animation
            setTimeout(() => toast.classList.add('show'), 100);
            
            // Remove after 4 seconds
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => toast.remove(), 300);
            }, 4000);
        }
    </script>
</body>
</html>